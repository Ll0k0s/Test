
TrafficControl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000038  00800100  00002b06  00002b9a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002b06  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002c7  00800138  00800138  00002bd2  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002bd2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002c30  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000810  00000000  00000000  00002c70  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000166d9  00000000  00000000  00003480  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000385a  00000000  00000000  00019b59  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00005243  00000000  00000000  0001d3b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000018a8  00000000  00000000  000225f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004ee4  00000000  00000000  00023ea0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00008dbc  00000000  00000000  00028d84  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000810  00000000  00000000  00031b40  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__ctors_end>
       4:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
       8:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
       c:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      10:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      14:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      18:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      1c:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      20:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      24:	0c 94 15 02 	jmp	0x42a	; 0x42a <__vector_9>
      28:	0c 94 41 05 	jmp	0xa82	; 0xa82 <__vector_10>
      2c:	0c 94 73 05 	jmp	0xae6	; 0xae6 <__vector_11>
      30:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      34:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      38:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      3c:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      40:	0c 94 9b 0f 	jmp	0x1f36	; 0x1f36 <__vector_16>
      44:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      48:	0c 94 bb 0e 	jmp	0x1d76	; 0x1d76 <__vector_18>
      4c:	0c 94 ed 0e 	jmp	0x1dda	; 0x1dda <__vector_19>
      50:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      54:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      58:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      5c:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      60:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      64:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      68:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      6c:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      70:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      74:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      78:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      7c:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      80:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      84:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      88:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      8c:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      90:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      94:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      98:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      9c:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      a0:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      a4:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      a8:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      ac:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      b0:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      b4:	73 10       	cpse	r7, r3
      b6:	76 10       	cpse	r7, r6
      b8:	69 10       	cpse	r6, r9
      ba:	6d 10       	cpse	r6, r13
      bc:	97 10       	cpse	r9, r7
      be:	97 10       	cpse	r9, r7
      c0:	7a 10       	cpse	r7, r10
      c2:	7e 10       	cpse	r7, r14
      c4:	84 10       	cpse	r8, r4
      c6:	88 10       	cpse	r8, r8
      c8:	97 10       	cpse	r9, r7
      ca:	8e 10       	cpse	r8, r14
      cc:	92 10       	cpse	r9, r2

000000ce <__trampolines_end>:
      ce:	63 6f       	ori	r22, 0xF3	; 243
      d0:	6d 6d       	ori	r22, 0xDD	; 221
      d2:	3a 20       	and	r3, r10
      d4:	75 6e       	ori	r23, 0xE5	; 229
      d6:	64 65       	ori	r22, 0x54	; 84
      d8:	66 69       	ori	r22, 0x96	; 150
      da:	6e 65       	ori	r22, 0x5E	; 94
      dc:	64 20       	and	r6, r4
      de:	63 6f       	ori	r22, 0xF3	; 243
      e0:	6d 6d       	ori	r22, 0xDD	; 221
      e2:	61 6e       	ori	r22, 0xE1	; 225
      e4:	64 0a       	sbc	r6, r20
	...

000000e7 <_ZZN4UART4readEvE3__c_0>:
      e7:	63 6f 6d 6d 3a 20 25 73 0a 00                       comm: %s..

000000f1 <_ZZN4UART4readEvE3__c>:
      f1:	63 6f 6d 6d 3a 20 62 75 66 66 65 72 20 6f 76 65     comm: buffer ove
     101:	72 66 6c 6f 77 0a 00                                rflow..

00000108 <_ZZL19ina219_readAndPrintvE3__c>:
     108:	49 4e 41 32 31 39 3a 20 56 3d 25 2e 32 66 56 20     INA219: V=%.2fV 
     118:	49 3d 25 2e 31 66 6d 41 20 50 3d 25 2e 30 66 6d     I=%.1fmA P=%.0fm
     128:	57 20 56 73 68 3d 25 2e 32 66 6d 56 0a 00           W Vsh=%.2fmV..

00000136 <_ZZ4loopE3__c>:
     136:	63 68 65 63 6b 0a 00                                check..

0000013d <_ZZ5setupE3__c>:
     13d:	54 65 73 74 20 42 6f 61 72 64 20 25 64 0a 00        Test Board %d..

0000014c <digital_pin_to_timer_PGM>:
     14c:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
     15c:	00 00 00 00                                         ....

00000160 <digital_pin_to_bit_mask_PGM>:
     160:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     170:	04 08 10 20                                         ... 

00000174 <digital_pin_to_port_PGM>:
     174:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     184:	03 03 03 03                                         ....

00000188 <port_to_output_PGM>:
     188:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

00000192 <port_to_mode_PGM>:
     192:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

0000019c <__ctors_start>:
     19c:	9d 07       	cpc	r25, r29
     19e:	6f 0c       	add	r6, r15
     1a0:	1d 0f       	add	r17, r29

000001a2 <__ctors_end>:
     1a2:	11 24       	eor	r1, r1
     1a4:	1f be       	out	0x3f, r1	; 63
     1a6:	cf ef       	ldi	r28, 0xFF	; 255
     1a8:	d8 e0       	ldi	r29, 0x08	; 8
     1aa:	de bf       	out	0x3e, r29	; 62
     1ac:	cd bf       	out	0x3d, r28	; 61

000001ae <__do_copy_data>:
     1ae:	11 e0       	ldi	r17, 0x01	; 1
     1b0:	a0 e0       	ldi	r26, 0x00	; 0
     1b2:	b1 e0       	ldi	r27, 0x01	; 1
     1b4:	e6 e0       	ldi	r30, 0x06	; 6
     1b6:	fb e2       	ldi	r31, 0x2B	; 43
     1b8:	02 c0       	rjmp	.+4      	; 0x1be <__do_copy_data+0x10>
     1ba:	05 90       	lpm	r0, Z+
     1bc:	0d 92       	st	X+, r0
     1be:	a8 33       	cpi	r26, 0x38	; 56
     1c0:	b1 07       	cpc	r27, r17
     1c2:	d9 f7       	brne	.-10     	; 0x1ba <__do_copy_data+0xc>

000001c4 <__do_clear_bss>:
     1c4:	23 e0       	ldi	r18, 0x03	; 3
     1c6:	a8 e3       	ldi	r26, 0x38	; 56
     1c8:	b1 e0       	ldi	r27, 0x01	; 1
     1ca:	01 c0       	rjmp	.+2      	; 0x1ce <.do_clear_bss_start>

000001cc <.do_clear_bss_loop>:
     1cc:	1d 92       	st	X+, r1

000001ce <.do_clear_bss_start>:
     1ce:	af 3f       	cpi	r26, 0xFF	; 255
     1d0:	b2 07       	cpc	r27, r18
     1d2:	e1 f7       	brne	.-8      	; 0x1cc <.do_clear_bss_loop>

000001d4 <__do_global_ctors>:
     1d4:	10 e0       	ldi	r17, 0x00	; 0
     1d6:	c1 ed       	ldi	r28, 0xD1	; 209
     1d8:	d0 e0       	ldi	r29, 0x00	; 0
     1da:	04 c0       	rjmp	.+8      	; 0x1e4 <__do_global_ctors+0x10>
     1dc:	21 97       	sbiw	r28, 0x01	; 1
     1de:	fe 01       	movw	r30, r28
     1e0:	0e 94 25 11 	call	0x224a	; 0x224a <__tablejump2__>
     1e4:	ce 3c       	cpi	r28, 0xCE	; 206
     1e6:	d1 07       	cpc	r29, r17
     1e8:	c9 f7       	brne	.-14     	; 0x1dc <__do_global_ctors+0x8>
     1ea:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <main>
     1ee:	0c 94 81 15 	jmp	0x2b02	; 0x2b02 <_exit>

000001f2 <__bad_interrupt>:
     1f2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001f6 <_ZN10LocoPacketC1Ev>:

#if ENA_MODE_W_EEPROM == 0

extern UART uart;

LocoPacket::LocoPacket()
     1f6:	fc 01       	movw	r30, r24
     1f8:	8c ed       	ldi	r24, 0xDC	; 220
     1fa:	95 e0       	ldi	r25, 0x05	; 5
     1fc:	93 8b       	std	Z+19, r25	; 0x13
     1fe:	82 8b       	std	Z+18, r24	; 0x12
     200:	88 ec       	ldi	r24, 0xC8	; 200
     202:	90 e0       	ldi	r25, 0x00	; 0
     204:	95 8b       	std	Z+21, r25	; 0x15
     206:	84 8b       	std	Z+20, r24	; 0x14
     208:	80 ed       	ldi	r24, 0xD0	; 208
     20a:	97 e0       	ldi	r25, 0x07	; 7
     20c:	97 8b       	std	Z+23, r25	; 0x17
     20e:	86 8b       	std	Z+22, r24	; 0x16
     210:	08 95       	ret

00000212 <_ZN10LocoPacket7send_B2Ejb>:
	}
}

//отправка по LocoNet2 команды B2
void LocoPacket::send_B2(uint16_t addr_B2, bool state)
{
     212:	cf 93       	push	r28
     214:	df 93       	push	r29
     216:	cd b7       	in	r28, 0x3d	; 61
     218:	de b7       	in	r29, 0x3e	; 62
     21a:	60 97       	sbiw	r28, 0x10	; 16
     21c:	0f b6       	in	r0, 0x3f	; 63
     21e:	f8 94       	cli
     220:	de bf       	out	0x3e, r29	; 62
     222:	0f be       	out	0x3f, r0	; 63
     224:	cd bf       	out	0x3d, r28	; 61
	#if SHOW_LOCONET
	uart.print(PSTR("[Tx][%dB2_%d]\n"), state, addr_B2);
	#endif
	
	uint8_t board = (addr_B2) / 16;
     226:	cb 01       	movw	r24, r22
     228:	e4 e0       	ldi	r30, 0x04	; 4
     22a:	96 95       	lsr	r25
     22c:	87 95       	ror	r24
     22e:	ea 95       	dec	r30
     230:	e1 f7       	brne	.-8      	; 0x22a <_ZN10LocoPacket7send_B2Ejb+0x18>
	uint8_t input = (addr_B2) % 16;
     232:	26 2f       	mov	r18, r22
     234:	2f 70       	andi	r18, 0x0F	; 15
	uint16_t result, input_2;
	lnMsg	Ln2TxPacket;

	if (input == 0 || input == 1) input_2 = 0;
     236:	22 30       	cpi	r18, 0x02	; 2
     238:	d0 f0       	brcs	.+52     	; 0x26e <_ZN10LocoPacket7send_B2Ejb+0x5c>
	else if (input == 2 || input == 3) input_2 = 1;
     23a:	3e ef       	ldi	r19, 0xFE	; 254
     23c:	32 0f       	add	r19, r18
     23e:	32 30       	cpi	r19, 0x02	; 2
     240:	c8 f0       	brcs	.+50     	; 0x274 <_ZN10LocoPacket7send_B2Ejb+0x62>
	else if (input == 4 || input == 5) input_2 = 2;
     242:	3c ef       	ldi	r19, 0xFC	; 252
     244:	32 0f       	add	r19, r18
     246:	32 30       	cpi	r19, 0x02	; 2
     248:	c0 f0       	brcs	.+48     	; 0x27a <_ZN10LocoPacket7send_B2Ejb+0x68>
	else if (input == 6 || input == 7) input_2 = 3;
     24a:	3a ef       	ldi	r19, 0xFA	; 250
     24c:	32 0f       	add	r19, r18
     24e:	32 30       	cpi	r19, 0x02	; 2
     250:	b8 f0       	brcs	.+46     	; 0x280 <_ZN10LocoPacket7send_B2Ejb+0x6e>
	else if (input == 8 || input == 9) input_2 = 4;
     252:	38 ef       	ldi	r19, 0xF8	; 248
     254:	32 0f       	add	r19, r18
     256:	32 30       	cpi	r19, 0x02	; 2
     258:	b0 f0       	brcs	.+44     	; 0x286 <_ZN10LocoPacket7send_B2Ejb+0x74>
	else if (input == 10 || input == 11) input_2 = 5;
     25a:	36 ef       	ldi	r19, 0xF6	; 246
     25c:	32 0f       	add	r19, r18
     25e:	32 30       	cpi	r19, 0x02	; 2
     260:	a8 f0       	brcs	.+42     	; 0x28c <_ZN10LocoPacket7send_B2Ejb+0x7a>
	else if (input == 12 || input == 13) input_2 = 6;
     262:	2c 50       	subi	r18, 0x0C	; 12
     264:	22 30       	cpi	r18, 0x02	; 2
     266:	a8 f4       	brcc	.+42     	; 0x292 <_ZN10LocoPacket7send_B2Ejb+0x80>
     268:	26 e0       	ldi	r18, 0x06	; 6
     26a:	30 e0       	ldi	r19, 0x00	; 0
     26c:	14 c0       	rjmp	.+40     	; 0x296 <_ZN10LocoPacket7send_B2Ejb+0x84>
	uint8_t board = (addr_B2) / 16;
	uint8_t input = (addr_B2) % 16;
	uint16_t result, input_2;
	lnMsg	Ln2TxPacket;

	if (input == 0 || input == 1) input_2 = 0;
     26e:	20 e0       	ldi	r18, 0x00	; 0
     270:	30 e0       	ldi	r19, 0x00	; 0
     272:	11 c0       	rjmp	.+34     	; 0x296 <_ZN10LocoPacket7send_B2Ejb+0x84>
	else if (input == 2 || input == 3) input_2 = 1;
     274:	21 e0       	ldi	r18, 0x01	; 1
     276:	30 e0       	ldi	r19, 0x00	; 0
     278:	0e c0       	rjmp	.+28     	; 0x296 <_ZN10LocoPacket7send_B2Ejb+0x84>
	else if (input == 4 || input == 5) input_2 = 2;
     27a:	22 e0       	ldi	r18, 0x02	; 2
     27c:	30 e0       	ldi	r19, 0x00	; 0
     27e:	0b c0       	rjmp	.+22     	; 0x296 <_ZN10LocoPacket7send_B2Ejb+0x84>
	else if (input == 6 || input == 7) input_2 = 3;
     280:	23 e0       	ldi	r18, 0x03	; 3
     282:	30 e0       	ldi	r19, 0x00	; 0
     284:	08 c0       	rjmp	.+16     	; 0x296 <_ZN10LocoPacket7send_B2Ejb+0x84>
	else if (input == 8 || input == 9) input_2 = 4;
     286:	24 e0       	ldi	r18, 0x04	; 4
     288:	30 e0       	ldi	r19, 0x00	; 0
     28a:	05 c0       	rjmp	.+10     	; 0x296 <_ZN10LocoPacket7send_B2Ejb+0x84>
	else if (input == 10 || input == 11) input_2 = 5;
     28c:	25 e0       	ldi	r18, 0x05	; 5
     28e:	30 e0       	ldi	r19, 0x00	; 0
     290:	02 c0       	rjmp	.+4      	; 0x296 <_ZN10LocoPacket7send_B2Ejb+0x84>
	else if (input == 12 || input == 13) input_2 = 6;
	else if (input == 14 || input == 15) input_2 = 7;
     292:	27 e0       	ldi	r18, 0x07	; 7
     294:	30 e0       	ldi	r19, 0x00	; 0
	else input_2 = 0;

	result = board;                       //    [0,0,0,0,0,0,0,0][B7,B6,B5,B4,B3,B2,B1,B0]
	result <<= 3;                         //    [0,0,0,0,0,B7,B6,B5][B4,B3,B2,B1,B0,0,0,0]
     296:	99 27       	eor	r25, r25
     298:	53 e0       	ldi	r21, 0x03	; 3
     29a:	88 0f       	add	r24, r24
     29c:	99 1f       	adc	r25, r25
     29e:	5a 95       	dec	r21
     2a0:	e1 f7       	brne	.-8      	; 0x29a <_ZN10LocoPacket7send_B2Ejb+0x88>
	result += input_2;                    //	[0,0,0,0,0,B7,B6,B5][B4,B3,B2,B1,B0,I2,I1,I0] == [0,0,0,0,0,A10,A9,A8][A7,A6,A5,A4,A3,A2,A1,A0]
     2a2:	82 0f       	add	r24, r18
     2a4:	93 1f       	adc	r25, r19

	Ln2TxPacket.data[0] = 0xB2;
     2a6:	22 eb       	ldi	r18, 0xB2	; 178
     2a8:	29 83       	std	Y+1, r18	; 0x01
	Ln2TxPacket.data[1] = (uint8_t)(result & 0x7F);  //	0b01111111			- select A6....A0
     2aa:	28 2f       	mov	r18, r24
     2ac:	2f 77       	andi	r18, 0x7F	; 127
     2ae:	2a 83       	std	Y+2, r18	; 0x02
	Ln2TxPacket.data[2] = (uint8_t)(result >> 7);    //	0b11110000000 >> 7	- select A10...A7
     2b0:	88 0f       	add	r24, r24
     2b2:	89 2f       	mov	r24, r25
     2b4:	88 1f       	adc	r24, r24
     2b6:	99 0b       	sbc	r25, r25
     2b8:	91 95       	neg	r25

	if (state)
     2ba:	41 11       	cpse	r20, r1
	Ln2TxPacket.data[2] |= 0x10; // Set L
     2bc:	80 61       	ori	r24, 0x10	; 16
     2be:	8b 83       	std	Y+3, r24	; 0x03

	if (input == 1 || input == 3 || input == 5 || input == 7 || input == 9 || input == 11 || input == 13 || input == 15)
     2c0:	69 70       	andi	r22, 0x09	; 9
     2c2:	61 30       	cpi	r22, 0x01	; 1
     2c4:	11 f0       	breq	.+4      	; 0x2ca <_ZN10LocoPacket7send_B2Ejb+0xb8>
     2c6:	69 30       	cpi	r22, 0x09	; 9
     2c8:	19 f4       	brne	.+6      	; 0x2d0 <_ZN10LocoPacket7send_B2Ejb+0xbe>
	Ln2TxPacket.data[2] |= 0x20; // Set I
     2ca:	8b 81       	ldd	r24, Y+3	; 0x03
     2cc:	80 62       	ori	r24, 0x20	; 32
     2ce:	8b 83       	std	Y+3, r24	; 0x03

	Ln2TxPacket.data[2] |= 0x40; //  Set X = 1
     2d0:	8b 81       	ldd	r24, Y+3	; 0x03
     2d2:	80 64       	ori	r24, 0x40	; 64
     2d4:	8b 83       	std	Y+3, r24	; 0x03

	LocoNet.send(&Ln2TxPacket);
     2d6:	be 01       	movw	r22, r28
     2d8:	6f 5f       	subi	r22, 0xFF	; 255
     2da:	7f 4f       	sbci	r23, 0xFF	; 255
     2dc:	88 e3       	ldi	r24, 0x38	; 56
     2de:	91 e0       	ldi	r25, 0x01	; 1
     2e0:	0e 94 1d 04 	call	0x83a	; 0x83a <_ZN12LocoNetClass4sendEP5lnMsg>
}
     2e4:	60 96       	adiw	r28, 0x10	; 16
     2e6:	0f b6       	in	r0, 0x3f	; 63
     2e8:	f8 94       	cli
     2ea:	de bf       	out	0x3e, r29	; 62
     2ec:	0f be       	out	0x3f, r0	; 63
     2ee:	cd bf       	out	0x3d, r28	; 61
     2f0:	df 91       	pop	r29
     2f2:	cf 91       	pop	r28
     2f4:	08 95       	ret

000002f6 <_ZN10LocoPacket13send_B2_helloEv>:

void LocoPacket::send_B2_hello()
{
	send_B2(LOCO_START_B2_HELLO_BOARDS + ADDR_BOARD, true);
     2f6:	41 e0       	ldi	r20, 0x01	; 1
     2f8:	60 e0       	ldi	r22, 0x00	; 0
     2fa:	70 e0       	ldi	r23, 0x00	; 0
     2fc:	0c 94 09 01 	jmp	0x212	; 0x212 <_ZN10LocoPacket7send_B2Ejb>

00000300 <_ZN10LocoPacket7read_B2Ejb>:
}

#pragma region B2
void LocoPacket::read_B2(uint16_t addr_B2, bool state)
{
	addr_B2--;
     300:	61 50       	subi	r22, 0x01	; 1
     302:	71 09       	sbc	r23, r1
	if ( (addr_B2 == LOCO_START_B2_HELLO_BOARDS + ADDR_BOARD) || (addr_B2 == LOCO_FINISH_B2_HELLO) ) {
     304:	19 f0       	breq	.+6      	; 0x30c <_ZN10LocoPacket7read_B2Ejb+0xc>
     306:	67 3c       	cpi	r22, 0xC7	; 199
     308:	71 05       	cpc	r23, r1
     30a:	21 f4       	brne	.+8      	; 0x314 <_ZN10LocoPacket7read_B2Ejb+0x14>
		if (state == false) {
     30c:	41 11       	cpse	r20, r1
     30e:	02 c0       	rjmp	.+4      	; 0x314 <_ZN10LocoPacket7read_B2Ejb+0x14>
			send_B2_hello();
     310:	0c 94 7b 01 	jmp	0x2f6	; 0x2f6 <_ZN10LocoPacket13send_B2_helloEv>
     314:	08 95       	ret

00000316 <_ZN10LocoPacket4readEv>:
LocoPacket::LocoPacket()
{
}

lnMsg* LocoPacket::read()
{
     316:	df 92       	push	r13
     318:	ef 92       	push	r14
     31a:	ff 92       	push	r15
     31c:	0f 93       	push	r16
     31e:	1f 93       	push	r17
     320:	cf 93       	push	r28
     322:	df 93       	push	r29
     324:	cd b7       	in	r28, 0x3d	; 61
     326:	de b7       	in	r29, 0x3e	; 62
     328:	60 97       	sbiw	r28, 0x10	; 16
     32a:	0f b6       	in	r0, 0x3f	; 63
     32c:	f8 94       	cli
     32e:	de bf       	out	0x3e, r29	; 62
     330:	0f be       	out	0x3f, r0	; 63
     332:	cd bf       	out	0x3d, r28	; 61
     334:	8c 01       	movw	r16, r24
					break;
				}
				case 0xBB: {
					if (this->lnrx->data[1] == 0x03) {
						lnMsg Ln2TxPacket;
						Ln2TxPacket.data[0] = 0xE7;
     336:	97 ee       	ldi	r25, 0xE7	; 231
     338:	f9 2e       	mov	r15, r25
						Ln2TxPacket.data[1] = 0x0E;
     33a:	2e e0       	ldi	r18, 0x0E	; 14
     33c:	e2 2e       	mov	r14, r18
						Ln2TxPacket.data[2] = 0x03;
						Ln2TxPacket.data[3] = 0x00;
						Ln2TxPacket.data[4] = 0x00;
						Ln2TxPacket.data[5] = 0x00;
						Ln2TxPacket.data[6] = 0x00;
						Ln2TxPacket.data[7] = 0x47;
     33e:	37 e4       	ldi	r19, 0x47	; 71
     340:	d3 2e       	mov	r13, r19
{
}

lnMsg* LocoPacket::read()
{
	while(LocoNet.available() > 0) {
     342:	88 e3       	ldi	r24, 0x38	; 56
     344:	91 e0       	ldi	r25, 0x01	; 1
     346:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <_ZN12LocoNetClass9availableEv>
     34a:	88 23       	and	r24, r24
     34c:	09 f4       	brne	.+2      	; 0x350 <_ZN10LocoPacket4readEv+0x3a>
     34e:	4e c0       	rjmp	.+156    	; 0x3ec <_ZN10LocoPacket4readEv+0xd6>
		this->lnrx = LocoNet.receive();
     350:	88 e3       	ldi	r24, 0x38	; 56
     352:	91 e0       	ldi	r25, 0x01	; 1
     354:	0e 94 e6 03 	call	0x7cc	; 0x7cc <_ZN12LocoNetClass7receiveEv>
     358:	fc 01       	movw	r30, r24
     35a:	d8 01       	movw	r26, r16
     35c:	8d 93       	st	X+, r24
     35e:	9c 93       	st	X, r25
		if (this->lnrx != NULL) {
     360:	89 2b       	or	r24, r25
     362:	b9 f1       	breq	.+110    	; 0x3d2 <_ZN10LocoPacket4readEv+0xbc>
	
			uint16_t Address = (this->lnrx->srq.sw1 | ( ( this->lnrx->srq.sw2 & 0x0F ) << 7 ));
     364:	81 81       	ldd	r24, Z+1	; 0x01
     366:	42 81       	ldd	r20, Z+2	; 0x02
     368:	64 2f       	mov	r22, r20
     36a:	6f 70       	andi	r22, 0x0F	; 15
     36c:	b0 e8       	ldi	r27, 0x80	; 128
     36e:	6b 9f       	mul	r22, r27
     370:	b0 01       	movw	r22, r0
     372:	11 24       	eor	r1, r1
     374:	68 2b       	or	r22, r24
			if( this->lnrx->sr.command != OPC_INPUT_REP ) {
     376:	90 81       	ld	r25, Z
     378:	92 3b       	cpi	r25, 0xB2	; 178
     37a:	19 f0       	breq	.+6      	; 0x382 <_ZN10LocoPacket4readEv+0x6c>
			//uart.print(PSTR("read LocoPack: addr %d\n"), Address);
			//for (uint8_t i = 0; i < 16; i++) {
				//uart.print(PSTR("%d "), this->lnrx->data[i]);
			//}
			//uart.print(PSTR("\n"));
			switch (this->lnrx->data[0]) {
     37c:	9b 3b       	cpi	r25, 0xBB	; 187
     37e:	91 f0       	breq	.+36     	; 0x3a4 <_ZN10LocoPacket4readEv+0x8e>
     380:	e0 cf       	rjmp	.-64     	; 0x342 <_ZN10LocoPacket4readEv+0x2c>
				case 0xB2: {
					Address <<= 1 ;
     382:	66 0f       	add	r22, r22
     384:	77 1f       	adc	r23, r23
					Address += ( this->lnrx->ir.in2 & OPC_INPUT_REP_SW ) ? 2 : 1 ;
     386:	45 fd       	sbrc	r20, 5
     388:	03 c0       	rjmp	.+6      	; 0x390 <_ZN10LocoPacket4readEv+0x7a>
     38a:	81 e0       	ldi	r24, 0x01	; 1
     38c:	90 e0       	ldi	r25, 0x00	; 0
     38e:	02 c0       	rjmp	.+4      	; 0x394 <_ZN10LocoPacket4readEv+0x7e>
     390:	82 e0       	ldi	r24, 0x02	; 2
     392:	90 e0       	ldi	r25, 0x00	; 0
					this->read_B2(Address, (bool)(this->lnrx->ir.in2 & OPC_INPUT_REP_HI));
     394:	42 95       	swap	r20
     396:	41 70       	andi	r20, 0x01	; 1
     398:	68 0f       	add	r22, r24
     39a:	79 1f       	adc	r23, r25
     39c:	c8 01       	movw	r24, r16
     39e:	0e 94 80 01 	call	0x300	; 0x300 <_ZN10LocoPacket7read_B2Ejb>
					break;
     3a2:	cf cf       	rjmp	.-98     	; 0x342 <_ZN10LocoPacket4readEv+0x2c>
				case 0xB0: {
					this->read_B0(Address, (bool)(this->lnrx->srq.sw2 & OPC_SW_REQ_OUT), (bool)(this->lnrx->srq.sw2 & OPC_SW_REQ_DIR));
					break;
				}
				case 0xBB: {
					if (this->lnrx->data[1] == 0x03) {
     3a4:	83 30       	cpi	r24, 0x03	; 3
     3a6:	69 f6       	brne	.-102    	; 0x342 <_ZN10LocoPacket4readEv+0x2c>
						lnMsg Ln2TxPacket;
						Ln2TxPacket.data[0] = 0xE7;
     3a8:	f9 82       	std	Y+1, r15	; 0x01
						Ln2TxPacket.data[1] = 0x0E;
     3aa:	ea 82       	std	Y+2, r14	; 0x02
						Ln2TxPacket.data[2] = 0x03;
     3ac:	8b 83       	std	Y+3, r24	; 0x03
						Ln2TxPacket.data[3] = 0x00;
     3ae:	1c 82       	std	Y+4, r1	; 0x04
						Ln2TxPacket.data[4] = 0x00;
     3b0:	1d 82       	std	Y+5, r1	; 0x05
						Ln2TxPacket.data[5] = 0x00;
     3b2:	1e 82       	std	Y+6, r1	; 0x06
						Ln2TxPacket.data[6] = 0x00;
     3b4:	1f 82       	std	Y+7, r1	; 0x07
						Ln2TxPacket.data[7] = 0x47;
     3b6:	d8 86       	std	Y+8, r13	; 0x08
						Ln2TxPacket.data[8] = 0x00;
     3b8:	19 86       	std	Y+9, r1	; 0x09
						Ln2TxPacket.data[9] = 0x00;
     3ba:	1a 86       	std	Y+10, r1	; 0x0a
						Ln2TxPacket.data[10] = 0x00;
     3bc:	1b 86       	std	Y+11, r1	; 0x0b
						Ln2TxPacket.data[11] = 0x00;
     3be:	1c 86       	std	Y+12, r1	; 0x0c
						Ln2TxPacket.data[12] = 0x00;
     3c0:	1d 86       	std	Y+13, r1	; 0x0d
						LocoNet.send(&Ln2TxPacket);
     3c2:	be 01       	movw	r22, r28
     3c4:	6f 5f       	subi	r22, 0xFF	; 255
     3c6:	7f 4f       	sbci	r23, 0xFF	; 255
     3c8:	88 e3       	ldi	r24, 0x38	; 56
     3ca:	91 e0       	ldi	r25, 0x01	; 1
     3cc:	0e 94 1d 04 	call	0x83a	; 0x83a <_ZN12LocoNetClass4sendEP5lnMsg>
     3d0:	b8 cf       	rjmp	.-144    	; 0x342 <_ZN10LocoPacket4readEv+0x2c>
     3d2:	80 e0       	ldi	r24, 0x00	; 0
     3d4:	90 e0       	ldi	r25, 0x00	; 0
					}
				}
			}
		} else {
			for (uint8_t i = 0; i < 16; i++) {
				this->lnrx->data[i] = 0x00;
     3d6:	d8 01       	movw	r26, r16
     3d8:	ed 91       	ld	r30, X+
     3da:	fc 91       	ld	r31, X
     3dc:	e8 0f       	add	r30, r24
     3de:	f9 1f       	adc	r31, r25
     3e0:	10 82       	st	Z, r1
     3e2:	01 96       	adiw	r24, 0x01	; 1
						LocoNet.send(&Ln2TxPacket);
					}
				}
			}
		} else {
			for (uint8_t i = 0; i < 16; i++) {
     3e4:	80 31       	cpi	r24, 0x10	; 16
     3e6:	91 05       	cpc	r25, r1
     3e8:	b1 f7       	brne	.-20     	; 0x3d6 <_ZN10LocoPacket4readEv+0xc0>
     3ea:	ab cf       	rjmp	.-170    	; 0x342 <_ZN10LocoPacket4readEv+0x2c>
				this->lnrx->data[i] = 0x00;
			}
		}
	}

}
     3ec:	60 96       	adiw	r28, 0x10	; 16
     3ee:	0f b6       	in	r0, 0x3f	; 63
     3f0:	f8 94       	cli
     3f2:	de bf       	out	0x3e, r29	; 62
     3f4:	0f be       	out	0x3f, r0	; 63
     3f6:	cd bf       	out	0x3d, r28	; 61
     3f8:	df 91       	pop	r29
     3fa:	cf 91       	pop	r28
     3fc:	1f 91       	pop	r17
     3fe:	0f 91       	pop	r16
     400:	ff 90       	pop	r15
     402:	ef 90       	pop	r14
     404:	df 90       	pop	r13
     406:	08 95       	ret

00000408 <_Z15logic_timer_1Hzv>:



//логика таймера
void logic_timer_1Hz()
{
     408:	08 95       	ret

0000040a <_ZN5TimerC1Ev>:
#include "Timer.h"
#if ENA_MODE_W_EEPROM == 0

Timer::Timer()
{
	this->cnt_1Hz = 0;
     40a:	fc 01       	movw	r30, r24
     40c:	11 82       	std	Z+1, r1	; 0x01
     40e:	10 82       	st	Z, r1
	this->ena_timer_1Hz = false;
     410:	12 82       	std	Z+2, r1	; 0x02
	
	TCCR2B |= (0 << CS22) | (1 << CS21) | (0 << CS20);
     412:	e1 eb       	ldi	r30, 0xB1	; 177
     414:	f0 e0       	ldi	r31, 0x00	; 0
     416:	80 81       	ld	r24, Z
     418:	82 60       	ori	r24, 0x02	; 2
     41a:	80 83       	st	Z, r24
	TIMSK2 |= (1 << TOIE2);		//enable interrupt
     41c:	e0 e7       	ldi	r30, 0x70	; 112
     41e:	f0 e0       	ldi	r31, 0x00	; 0
     420:	80 81       	ld	r24, Z
     422:	81 60       	ori	r24, 0x01	; 1
     424:	80 83       	st	Z, r24
	sei();
     426:	78 94       	sei
     428:	08 95       	ret

0000042a <__vector_9>:
}

ISR(TIMER2_OVF_vect)	// F = 16MHz / (8 * 200) = 10 000 Hz
{
     42a:	1f 92       	push	r1
     42c:	0f 92       	push	r0
     42e:	0f b6       	in	r0, 0x3f	; 63
     430:	0f 92       	push	r0
     432:	11 24       	eor	r1, r1
     434:	8f 93       	push	r24
     436:	9f 93       	push	r25
	TIMSK2 &= ~(1 << TOIE2);			//disable interrupt
     438:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>
     43c:	8e 7f       	andi	r24, 0xFE	; 254
     43e:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>
	TCNT2 = 0xFF - 220;
     442:	83 e2       	ldi	r24, 0x23	; 35
     444:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
	if (timer.cnt_1Hz >= 163) {
     448:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <timer>
     44c:	90 91 69 02 	lds	r25, 0x0269	; 0x800269 <timer+0x1>
     450:	83 3a       	cpi	r24, 0xA3	; 163
     452:	91 05       	cpc	r25, r1
     454:	40 f0       	brcs	.+16     	; 0x466 <__vector_9+0x3c>
		timer.ena_timer_1Hz = true;
     456:	81 e0       	ldi	r24, 0x01	; 1
     458:	80 93 6a 02 	sts	0x026A, r24	; 0x80026a <timer+0x2>
		timer.cnt_1Hz = 0;
     45c:	10 92 69 02 	sts	0x0269, r1	; 0x800269 <timer+0x1>
     460:	10 92 68 02 	sts	0x0268, r1	; 0x800268 <timer>
     464:	05 c0       	rjmp	.+10     	; 0x470 <__vector_9+0x46>
	} else {
		timer.cnt_1Hz++;
     466:	01 96       	adiw	r24, 0x01	; 1
     468:	90 93 69 02 	sts	0x0269, r25	; 0x800269 <timer+0x1>
     46c:	80 93 68 02 	sts	0x0268, r24	; 0x800268 <timer>
	}

	TIMSK2 |= (1 << TOIE2);				//enable interrupt
     470:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>
     474:	81 60       	ori	r24, 0x01	; 1
     476:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>
}
     47a:	9f 91       	pop	r25
     47c:	8f 91       	pop	r24
     47e:	0f 90       	pop	r0
     480:	0f be       	out	0x3f, r0	; 63
     482:	0f 90       	pop	r0
     484:	1f 90       	pop	r1
     486:	18 95       	reti

00000488 <_ZN4UARTC1Ev>:

extern LocoPacket loco;

UART::UART()
{
	this->cnt_rx_read = 0;
     488:	fc 01       	movw	r30, r24
     48a:	ef 5b       	subi	r30, 0xBF	; 191
     48c:	ff 4f       	sbci	r31, 0xFF	; 255
     48e:	10 82       	st	Z, r1
	this->cnt_rx_save = 0;
     490:	31 97       	sbiw	r30, 0x01	; 1
     492:	10 82       	st	Z, r1
     494:	08 95       	ret

00000496 <_ZN4UART5printEPKcz>:
}

void UART::print(const char* typeFormat, ...) {
     496:	ef 92       	push	r14
     498:	ff 92       	push	r15
     49a:	0f 93       	push	r16
     49c:	1f 93       	push	r17
     49e:	cf 93       	push	r28
     4a0:	df 93       	push	r29
     4a2:	cd b7       	in	r28, 0x3d	; 61
     4a4:	de b7       	in	r29, 0x3e	; 62
	va_list args;
	va_start(args, typeFormat);
	size_t bufferSize = vsnprintf_P(NULL, 0, typeFormat, args) + 1;
     4a6:	9e 01       	movw	r18, r28
     4a8:	23 5f       	subi	r18, 0xF3	; 243
     4aa:	3f 4f       	sbci	r19, 0xFF	; 255
     4ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     4ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     4b0:	60 e0       	ldi	r22, 0x00	; 0
     4b2:	70 e0       	ldi	r23, 0x00	; 0
     4b4:	80 e0       	ldi	r24, 0x00	; 0
     4b6:	90 e0       	ldi	r25, 0x00	; 0
     4b8:	0e 94 84 12 	call	0x2508	; 0x2508 <vsnprintf_P>
     4bc:	01 96       	adiw	r24, 0x01	; 1
     4be:	7c 01       	movw	r14, r24
	char* buffer = (char*)malloc(bufferSize);
     4c0:	0e 94 2b 11 	call	0x2256	; 0x2256 <malloc>
     4c4:	8c 01       	movw	r16, r24
	if (buffer) {
     4c6:	00 97       	sbiw	r24, 0x00	; 0
     4c8:	81 f0       	breq	.+32     	; 0x4ea <_ZN4UART5printEPKcz+0x54>
		vsnprintf_P(buffer, bufferSize, typeFormat, args);
     4ca:	9e 01       	movw	r18, r28
     4cc:	23 5f       	subi	r18, 0xF3	; 243
     4ce:	3f 4f       	sbci	r19, 0xFF	; 255
     4d0:	4b 85       	ldd	r20, Y+11	; 0x0b
     4d2:	5c 85       	ldd	r21, Y+12	; 0x0c
     4d4:	b7 01       	movw	r22, r14
     4d6:	0e 94 84 12 	call	0x2508	; 0x2508 <vsnprintf_P>
		Serial.print(buffer);
     4da:	b8 01       	movw	r22, r16
     4dc:	85 e5       	ldi	r24, 0x55	; 85
     4de:	93 e0       	ldi	r25, 0x03	; 3
     4e0:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <_ZN5Print5printEPKc>
		free(buffer);
     4e4:	c8 01       	movw	r24, r16
     4e6:	0e 94 c3 11 	call	0x2386	; 0x2386 <free>
	}
	va_end(args);
}
     4ea:	df 91       	pop	r29
     4ec:	cf 91       	pop	r28
     4ee:	1f 91       	pop	r17
     4f0:	0f 91       	pop	r16
     4f2:	ff 90       	pop	r15
     4f4:	ef 90       	pop	r14
     4f6:	08 95       	ret

000004f8 <_ZN4UART13clear_buff_rxEv>:


void UART::clear_buff_rx()
{
     4f8:	fc 01       	movw	r30, r24
     4fa:	9c 01       	movw	r18, r24
     4fc:	20 5c       	subi	r18, 0xC0	; 192
     4fe:	3f 4f       	sbci	r19, 0xFF	; 255
	for (uint8_t i = 0; i < UART_BUF_RX_SIZE; i++) {
		this->buff_rx[i] = 0;
     500:	11 92       	st	Z+, r1
}


void UART::clear_buff_rx()
{
	for (uint8_t i = 0; i < UART_BUF_RX_SIZE; i++) {
     502:	e2 17       	cp	r30, r18
     504:	f3 07       	cpc	r31, r19
     506:	e1 f7       	brne	.-8      	; 0x500 <_ZN4UART13clear_buff_rxEv+0x8>
		this->buff_rx[i] = 0;
	}
	this->cnt_rx_save = 0;
     508:	10 82       	st	Z, r1
	this->cnt_rx_read = 0;
     50a:	fc 01       	movw	r30, r24
     50c:	ef 5b       	subi	r30, 0xBF	; 191
     50e:	ff 4f       	sbci	r31, 0xFF	; 255
     510:	10 82       	st	Z, r1
     512:	08 95       	ret

00000514 <_ZN4UART9read_nameEPKc>:
}

bool UART::read_name(const char* str)
{
     514:	cf 93       	push	r28
     516:	df 93       	push	r29
	uint8_t cnt_rx_read = this->cnt_rx_read;
	if (this->cnt_rx_save >= strlen(str)) {
     518:	fb 01       	movw	r30, r22
     51a:	01 90       	ld	r0, Z+
     51c:	00 20       	and	r0, r0
     51e:	e9 f7       	brne	.-6      	; 0x51a <_ZN4UART9read_nameEPKc+0x6>
     520:	31 97       	sbiw	r30, 0x01	; 1
     522:	e6 1b       	sub	r30, r22
     524:	f7 0b       	sbc	r31, r23
     526:	dc 01       	movw	r26, r24
     528:	a0 5c       	subi	r26, 0xC0	; 192
     52a:	bf 4f       	sbci	r27, 0xFF	; 255
     52c:	2c 91       	ld	r18, X
     52e:	30 e0       	ldi	r19, 0x00	; 0
     530:	2e 17       	cp	r18, r30
     532:	3f 07       	cpc	r19, r31
     534:	58 f1       	brcs	.+86     	; 0x58c <_ZN4UART9read_nameEPKc+0x78>
	this->cnt_rx_read = 0;
}

bool UART::read_name(const char* str)
{
	uint8_t cnt_rx_read = this->cnt_rx_read;
     536:	fc 01       	movw	r30, r24
     538:	ef 5b       	subi	r30, 0xBF	; 191
     53a:	ff 4f       	sbci	r31, 0xFF	; 255
     53c:	c0 81       	ld	r28, Z
     53e:	30 e0       	ldi	r19, 0x00	; 0
	if (this->cnt_rx_save >= strlen(str)) {
		for (uint8_t i = 0; i < strlen(str); i++, this->cnt_rx_read++) {
     540:	43 2f       	mov	r20, r19
     542:	50 e0       	ldi	r21, 0x00	; 0
     544:	db 01       	movw	r26, r22
     546:	0d 90       	ld	r0, X+
     548:	00 20       	and	r0, r0
     54a:	e9 f7       	brne	.-6      	; 0x546 <_ZN4UART9read_nameEPKc+0x32>
     54c:	11 97       	sbiw	r26, 0x01	; 1
     54e:	a6 1b       	sub	r26, r22
     550:	b7 0b       	sbc	r27, r23
			if (this->buff_rx[this->cnt_rx_read] != str[i]) {
				this->cnt_rx_read = cnt_rx_read;
				return 0;
			}
		}
		if (this->buff_rx[this->cnt_rx_read] == 32) {
     552:	20 81       	ld	r18, Z

bool UART::read_name(const char* str)
{
	uint8_t cnt_rx_read = this->cnt_rx_read;
	if (this->cnt_rx_save >= strlen(str)) {
		for (uint8_t i = 0; i < strlen(str); i++, this->cnt_rx_read++) {
     554:	4a 17       	cp	r20, r26
     556:	5b 07       	cpc	r21, r27
     558:	80 f4       	brcc	.+32     	; 0x57a <_ZN4UART9read_nameEPKc+0x66>
			if (this->buff_rx[this->cnt_rx_read] != str[i]) {
     55a:	dc 01       	movw	r26, r24
     55c:	a2 0f       	add	r26, r18
     55e:	b1 1d       	adc	r27, r1
     560:	46 0f       	add	r20, r22
     562:	57 1f       	adc	r21, r23
     564:	dc 91       	ld	r29, X
     566:	da 01       	movw	r26, r20
     568:	4c 91       	ld	r20, X
     56a:	d4 17       	cp	r29, r20
     56c:	11 f0       	breq	.+4      	; 0x572 <_ZN4UART9read_nameEPKc+0x5e>
				this->cnt_rx_read = cnt_rx_read;
     56e:	c0 83       	st	Z, r28
     570:	0d c0       	rjmp	.+26     	; 0x58c <_ZN4UART9read_nameEPKc+0x78>

bool UART::read_name(const char* str)
{
	uint8_t cnt_rx_read = this->cnt_rx_read;
	if (this->cnt_rx_save >= strlen(str)) {
		for (uint8_t i = 0; i < strlen(str); i++, this->cnt_rx_read++) {
     572:	3f 5f       	subi	r19, 0xFF	; 255
     574:	2f 5f       	subi	r18, 0xFF	; 255
     576:	20 83       	st	Z, r18
     578:	e3 cf       	rjmp	.-58     	; 0x540 <_ZN4UART9read_nameEPKc+0x2c>
			if (this->buff_rx[this->cnt_rx_read] != str[i]) {
				this->cnt_rx_read = cnt_rx_read;
				return 0;
			}
		}
		if (this->buff_rx[this->cnt_rx_read] == 32) {
     57a:	dc 01       	movw	r26, r24
     57c:	a2 0f       	add	r26, r18
     57e:	b1 1d       	adc	r27, r1
     580:	8c 91       	ld	r24, X
     582:	80 32       	cpi	r24, 0x20	; 32
     584:	29 f4       	brne	.+10     	; 0x590 <_ZN4UART9read_nameEPKc+0x7c>
			this->cnt_rx_read++;
     586:	2f 5f       	subi	r18, 0xFF	; 255
     588:	20 83       	st	Z, r18
     58a:	02 c0       	rjmp	.+4      	; 0x590 <_ZN4UART9read_nameEPKc+0x7c>
		}
		return 1;
	}
	this->cnt_rx_read = cnt_rx_read;
	return 0;
     58c:	80 e0       	ldi	r24, 0x00	; 0
     58e:	01 c0       	rjmp	.+2      	; 0x592 <_ZN4UART9read_nameEPKc+0x7e>
			if (this->buff_rx[this->cnt_rx_read] != str[i]) {
				this->cnt_rx_read = cnt_rx_read;
				return 0;
			}
		}
		if (this->buff_rx[this->cnt_rx_read] == 32) {
     590:	81 e0       	ldi	r24, 0x01	; 1
		}
		return 1;
	}
	this->cnt_rx_read = cnt_rx_read;
	return 0;
}
     592:	df 91       	pop	r29
     594:	cf 91       	pop	r28
     596:	08 95       	ret

00000598 <_ZN4UART8read_numEv>:

uint16_t UART::read_num()
{
     598:	cf 92       	push	r12
     59a:	df 92       	push	r13
     59c:	ef 92       	push	r14
     59e:	ff 92       	push	r15
     5a0:	0f 93       	push	r16
     5a2:	1f 93       	push	r17
     5a4:	cf 93       	push	r28
     5a6:	df 93       	push	r29
     5a8:	cd b7       	in	r28, 0x3d	; 61
     5aa:	de b7       	in	r29, 0x3e	; 62
     5ac:	60 97       	sbiw	r28, 0x10	; 16
     5ae:	0f b6       	in	r0, 0x3f	; 63
     5b0:	f8 94       	cli
     5b2:	de bf       	out	0x3e, r29	; 62
     5b4:	0f be       	out	0x3f, r0	; 63
     5b6:	cd bf       	out	0x3d, r28	; 61
     5b8:	dc 01       	movw	r26, r24
	char num[16] = {0};
     5ba:	be 01       	movw	r22, r28
     5bc:	6f 5f       	subi	r22, 0xFF	; 255
     5be:	7f 4f       	sbci	r23, 0xFF	; 255
     5c0:	80 e1       	ldi	r24, 0x10	; 16
     5c2:	fb 01       	movw	r30, r22
     5c4:	11 92       	st	Z+, r1
     5c6:	8a 95       	dec	r24
     5c8:	e9 f7       	brne	.-6      	; 0x5c4 <_ZN4UART8read_numEv+0x2c>
	uint16_t n = 0xFFFF;

	for (uint8_t i = 0; i < strlen(this->buff_rx); i++, this->cnt_rx_read++) {
     5ca:	20 e0       	ldi	r18, 0x00	; 0
		if ((this->buff_rx[this->cnt_rx_read] == 0)
     5cc:	8d 01       	movw	r16, r26
     5ce:	0f 5b       	subi	r16, 0xBF	; 191
     5d0:	1f 4f       	sbci	r17, 0xFF	; 255
uint16_t UART::read_num()
{
	char num[16] = {0};
	uint16_t n = 0xFFFF;

	for (uint8_t i = 0; i < strlen(this->buff_rx); i++, this->cnt_rx_read++) {
     5d2:	fd 01       	movw	r30, r26
     5d4:	01 90       	ld	r0, Z+
     5d6:	00 20       	and	r0, r0
     5d8:	e9 f7       	brne	.-6      	; 0x5d4 <_ZN4UART8read_numEv+0x3c>
     5da:	31 97       	sbiw	r30, 0x01	; 1
     5dc:	6f 01       	movw	r12, r30
     5de:	ca 1a       	sub	r12, r26
     5e0:	db 0a       	sbc	r13, r27
     5e2:	42 2f       	mov	r20, r18
     5e4:	50 e0       	ldi	r21, 0x00	; 0
     5e6:	4c 15       	cp	r20, r12
     5e8:	5d 05       	cpc	r21, r13
     5ea:	a8 f4       	brcc	.+42     	; 0x616 <_ZN4UART8read_numEv+0x7e>
		if ((this->buff_rx[this->cnt_rx_read] == 0)
     5ec:	f8 01       	movw	r30, r16
     5ee:	90 81       	ld	r25, Z
     5f0:	7d 01       	movw	r14, r26
     5f2:	e9 0e       	add	r14, r25
     5f4:	f1 1c       	adc	r15, r1
     5f6:	f7 01       	movw	r30, r14
     5f8:	80 81       	ld	r24, Z
     5fa:	38 2f       	mov	r19, r24
     5fc:	3f 7d       	andi	r19, 0xDF	; 223
     5fe:	11 f4       	brne	.+4      	; 0x604 <_ZN4UART8read_numEv+0x6c>
		|| (this->buff_rx[this->cnt_rx_read] == 32)) {
			i = strlen(this->buff_rx);
     600:	2c 2d       	mov	r18, r12
     602:	04 c0       	rjmp	.+8      	; 0x60c <_ZN4UART8read_numEv+0x74>
			} else {
			num[i] = this->buff_rx[this->cnt_rx_read];
     604:	fb 01       	movw	r30, r22
     606:	e4 0f       	add	r30, r20
     608:	f5 1f       	adc	r31, r21
     60a:	80 83       	st	Z, r24
uint16_t UART::read_num()
{
	char num[16] = {0};
	uint16_t n = 0xFFFF;

	for (uint8_t i = 0; i < strlen(this->buff_rx); i++, this->cnt_rx_read++) {
     60c:	2f 5f       	subi	r18, 0xFF	; 255
     60e:	9f 5f       	subi	r25, 0xFF	; 255
     610:	f8 01       	movw	r30, r16
     612:	90 83       	st	Z, r25
     614:	de cf       	rjmp	.-68     	; 0x5d2 <_ZN4UART8read_numEv+0x3a>
			i = strlen(this->buff_rx);
			} else {
			num[i] = this->buff_rx[this->cnt_rx_read];
		}
	}
	if (strlen(num) != 0) {
     616:	89 81       	ldd	r24, Y+1	; 0x01
     618:	88 23       	and	r24, r24
     61a:	21 f0       	breq	.+8      	; 0x624 <_ZN4UART8read_numEv+0x8c>
		return atoi(num);
     61c:	cb 01       	movw	r24, r22
     61e:	0e 94 4c 12 	call	0x2498	; 0x2498 <atoi>
     622:	02 c0       	rjmp	.+4      	; 0x628 <_ZN4UART8read_numEv+0x90>
		} else {
		return 0xFFFF;
     624:	8f ef       	ldi	r24, 0xFF	; 255
     626:	9f ef       	ldi	r25, 0xFF	; 255
	}
}
     628:	60 96       	adiw	r28, 0x10	; 16
     62a:	0f b6       	in	r0, 0x3f	; 63
     62c:	f8 94       	cli
     62e:	de bf       	out	0x3e, r29	; 62
     630:	0f be       	out	0x3f, r0	; 63
     632:	cd bf       	out	0x3d, r28	; 61
     634:	df 91       	pop	r29
     636:	cf 91       	pop	r28
     638:	1f 91       	pop	r17
     63a:	0f 91       	pop	r16
     63c:	ff 90       	pop	r15
     63e:	ef 90       	pop	r14
     640:	df 90       	pop	r13
     642:	cf 90       	pop	r12
     644:	08 95       	ret

00000646 <_ZN4UART9read_commEv>:
		}
	}
}

void UART::read_comm()
{
     646:	cf 93       	push	r28
     648:	df 93       	push	r29
     64a:	d8 2f       	mov	r29, r24
     64c:	c9 2f       	mov	r28, r25
	if (read_name("b2 on")) {		//command: [b2 on ][addr_B2]
     64e:	66 e0       	ldi	r22, 0x06	; 6
     650:	71 e0       	ldi	r23, 0x01	; 1
     652:	0e 94 8a 02 	call	0x514	; 0x514 <_ZN4UART9read_nameEPKc>
     656:	88 23       	and	r24, r24
     658:	29 f0       	breq	.+10     	; 0x664 <_ZN4UART9read_commEv+0x1e>
		uint16_t addr_B2 = read_num();
     65a:	8d 2f       	mov	r24, r29
     65c:	9c 2f       	mov	r25, r28
     65e:	0e 94 cc 02 	call	0x598	; 0x598 <_ZN4UART8read_numEv>
     662:	14 c0       	rjmp	.+40     	; 0x68c <_ZN4UART9read_commEv+0x46>

	} else if (read_name("b2 off")) {		//command: [b2 off ][addr_B2]
     664:	6c e0       	ldi	r22, 0x0C	; 12
     666:	71 e0       	ldi	r23, 0x01	; 1
     668:	8d 2f       	mov	r24, r29
     66a:	9c 2f       	mov	r25, r28
     66c:	0e 94 8a 02 	call	0x514	; 0x514 <_ZN4UART9read_nameEPKc>
     670:	81 11       	cpse	r24, r1
     672:	f3 cf       	rjmp	.-26     	; 0x65a <_ZN4UART9read_commEv+0x14>
		uint16_t addr_B2 = read_num();

	} else {
		print(PSTR("comm: undefined command\n"));
     674:	8e ec       	ldi	r24, 0xCE	; 206
     676:	90 e0       	ldi	r25, 0x00	; 0
     678:	9f 93       	push	r25
     67a:	8f 93       	push	r24
     67c:	cf 93       	push	r28
     67e:	df 93       	push	r29
     680:	0e 94 4b 02 	call	0x496	; 0x496 <_ZN4UART5printEPKcz>
     684:	0f 90       	pop	r0
     686:	0f 90       	pop	r0
     688:	0f 90       	pop	r0
     68a:	0f 90       	pop	r0
	}
	this->clear_buff_rx();
     68c:	8d 2f       	mov	r24, r29
     68e:	9c 2f       	mov	r25, r28
}
     690:	df 91       	pop	r29
     692:	cf 91       	pop	r28
		uint16_t addr_B2 = read_num();

	} else {
		print(PSTR("comm: undefined command\n"));
	}
	this->clear_buff_rx();
     694:	0c 94 7c 02 	jmp	0x4f8	; 0x4f8 <_ZN4UART13clear_buff_rxEv>

00000698 <_ZN4UART4readEv>:
		return 0xFFFF;
	}
}

void UART::read(void)
{
     698:	0f 93       	push	r16
     69a:	1f 93       	push	r17
     69c:	cf 93       	push	r28
     69e:	df 93       	push	r29
     6a0:	ec 01       	movw	r28, r24
	if (Serial.available() > 0) {
     6a2:	85 e5       	ldi	r24, 0x55	; 85
     6a4:	93 e0       	ldi	r25, 0x03	; 3
     6a6:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <_ZN14HardwareSerial9availableEv>
     6aa:	18 16       	cp	r1, r24
     6ac:	19 06       	cpc	r1, r25
     6ae:	0c f0       	brlt	.+2      	; 0x6b2 <_ZN4UART4readEv+0x1a>
     6b0:	42 c0       	rjmp	.+132    	; 0x736 <_ZN4UART4readEv+0x9e>
		uint8_t data = Serial.read();
     6b2:	85 e5       	ldi	r24, 0x55	; 85
     6b4:	93 e0       	ldi	r25, 0x03	; 3
     6b6:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <_ZN14HardwareSerial4readEv>
		if ((data != 13) && (data != 10)) {
     6ba:	8d 30       	cpi	r24, 0x0D	; 13
     6bc:	e1 f1       	breq	.+120    	; 0x736 <_ZN4UART4readEv+0x9e>
     6be:	8a 30       	cpi	r24, 0x0A	; 10
     6c0:	19 f1       	breq	.+70     	; 0x708 <_ZN4UART4readEv+0x70>
			this->buff_rx[this->cnt_rx_save] = data;
     6c2:	8e 01       	movw	r16, r28
     6c4:	00 5c       	subi	r16, 0xC0	; 192
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	f8 01       	movw	r30, r16
     6ca:	90 81       	ld	r25, Z
     6cc:	fe 01       	movw	r30, r28
     6ce:	e9 0f       	add	r30, r25
     6d0:	f1 1d       	adc	r31, r1
     6d2:	80 83       	st	Z, r24
			this->cnt_rx_save++;
     6d4:	81 e0       	ldi	r24, 0x01	; 1
     6d6:	89 0f       	add	r24, r25
     6d8:	f8 01       	movw	r30, r16
     6da:	80 83       	st	Z, r24
			if (this->cnt_rx_save == UART_BUF_RX_MASK) {
     6dc:	8f 33       	cpi	r24, 0x3F	; 63
     6de:	79 f4       	brne	.+30     	; 0x6fe <_ZN4UART4readEv+0x66>
				print(PSTR("comm: buffer overflow\n"));
     6e0:	81 ef       	ldi	r24, 0xF1	; 241
     6e2:	90 e0       	ldi	r25, 0x00	; 0
     6e4:	9f 93       	push	r25
     6e6:	8f 93       	push	r24
     6e8:	df 93       	push	r29
     6ea:	cf 93       	push	r28
     6ec:	0e 94 4b 02 	call	0x496	; 0x496 <_ZN4UART5printEPKcz>
				this->clear_buff_rx();
     6f0:	ce 01       	movw	r24, r28
     6f2:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <_ZN4UART13clear_buff_rxEv>
     6f6:	0f 90       	pop	r0
     6f8:	0f 90       	pop	r0
     6fa:	0f 90       	pop	r0
     6fc:	0f 90       	pop	r0
			}
			this->cnt_rx_save &= UART_BUF_RX_MASK;
     6fe:	f8 01       	movw	r30, r16
     700:	80 81       	ld	r24, Z
     702:	8f 73       	andi	r24, 0x3F	; 63
     704:	80 83       	st	Z, r24
     706:	17 c0       	rjmp	.+46     	; 0x736 <_ZN4UART4readEv+0x9e>
			} else if (data == 10) {
			print(PSTR("comm: %s\n"), this->buff_rx);
     708:	df 93       	push	r29
     70a:	cf 93       	push	r28
     70c:	87 ee       	ldi	r24, 0xE7	; 231
     70e:	90 e0       	ldi	r25, 0x00	; 0
     710:	9f 93       	push	r25
     712:	8f 93       	push	r24
     714:	df 93       	push	r29
     716:	cf 93       	push	r28
     718:	0e 94 4b 02 	call	0x496	; 0x496 <_ZN4UART5printEPKcz>
			read_comm();
     71c:	0f 90       	pop	r0
     71e:	0f 90       	pop	r0
     720:	0f 90       	pop	r0
     722:	0f 90       	pop	r0
     724:	0f 90       	pop	r0
     726:	0f 90       	pop	r0
     728:	ce 01       	movw	r24, r28
		}
	}
}
     72a:	df 91       	pop	r29
     72c:	cf 91       	pop	r28
     72e:	1f 91       	pop	r17
     730:	0f 91       	pop	r16
				this->clear_buff_rx();
			}
			this->cnt_rx_save &= UART_BUF_RX_MASK;
			} else if (data == 10) {
			print(PSTR("comm: %s\n"), this->buff_rx);
			read_comm();
     732:	0c 94 23 03 	jmp	0x646	; 0x646 <_ZN4UART9read_commEv>
		}
	}
}
     736:	df 91       	pop	r29
     738:	cf 91       	pop	r28
     73a:	1f 91       	pop	r17
     73c:	0f 91       	pop	r16
     73e:	08 95       	ret

00000740 <_ZN12LocoNetClass8setTxPinEh>:
		lnMsg* m = (lnMsg *)&(LnBuffer.Buf[ LnBuffer.ReadIndex ]);
		return getLnMsgSize(m);
  } 
  else
		return 0;
}
     740:	cf 93       	push	r28
     742:	c6 2f       	mov	r28, r22
     744:	61 e0       	ldi	r22, 0x01	; 1
     746:	8c 2f       	mov	r24, r28
     748:	0e 94 98 10 	call	0x2130	; 0x2130 <pinMode>
     74c:	6c 2f       	mov	r22, r28
     74e:	70 e0       	ldi	r23, 0x00	; 0
     750:	fb 01       	movw	r30, r22
     752:	e0 5a       	subi	r30, 0xA0	; 160
     754:	fe 4f       	sbci	r31, 0xFE	; 254
     756:	24 91       	lpm	r18, Z
     758:	fb 01       	movw	r30, r22
     75a:	ec 58       	subi	r30, 0x8C	; 140
     75c:	fe 4f       	sbci	r31, 0xFE	; 254
     75e:	e4 91       	lpm	r30, Z
     760:	f0 e0       	ldi	r31, 0x00	; 0
     762:	ee 0f       	add	r30, r30
     764:	ff 1f       	adc	r31, r31
     766:	e8 57       	subi	r30, 0x78	; 120
     768:	fe 4f       	sbci	r31, 0xFE	; 254
     76a:	45 91       	lpm	r20, Z+
     76c:	54 91       	lpm	r21, Z
     76e:	60 e0       	ldi	r22, 0x00	; 0
     770:	91 e0       	ldi	r25, 0x01	; 1
     772:	81 e0       	ldi	r24, 0x01	; 1
     774:	92 17       	cp	r25, r18
     776:	41 f0       	breq	.+16     	; 0x788 <_ZN12LocoNetClass8setTxPinEh+0x48>
     778:	6f 5f       	subi	r22, 0xFF	; 255
     77a:	98 2f       	mov	r25, r24
     77c:	06 2e       	mov	r0, r22
     77e:	01 c0       	rjmp	.+2      	; 0x782 <_ZN12LocoNetClass8setTxPinEh+0x42>
     780:	99 0f       	add	r25, r25
     782:	0a 94       	dec	r0
     784:	ea f7       	brpl	.-6      	; 0x780 <_ZN12LocoNetClass8setTxPinEh+0x40>
     786:	f6 cf       	rjmp	.-20     	; 0x774 <_ZN12LocoNetClass8setTxPinEh+0x34>
     788:	ca 01       	movw	r24, r20
     78a:	cf 91       	pop	r28
     78c:	0c 94 3a 05 	jmp	0xa74	; 0xa74 <_Z15setTxPortAndPinPVhh>

00000790 <_ZN12LocoNetClass4initEh>:
     790:	1f 93       	push	r17
     792:	cf 93       	push	r28
     794:	df 93       	push	r29
     796:	ec 01       	movw	r28, r24
     798:	16 2f       	mov	r17, r22
     79a:	0e 94 20 04 	call	0x840	; 0x840 <initLnBuf>
     79e:	61 2f       	mov	r22, r17
     7a0:	ce 01       	movw	r24, r28
     7a2:	0e 94 a0 03 	call	0x740	; 0x740 <_ZN12LocoNetClass8setTxPinEh>
     7a6:	ce 01       	movw	r24, r28
     7a8:	df 91       	pop	r29
     7aa:	cf 91       	pop	r28
     7ac:	1f 91       	pop	r17
     7ae:	0c 94 c2 06 	jmp	0xd84	; 0xd84 <_Z19initLocoNetHardwareP5LnBuf>

000007b2 <_ZN12LocoNetClass9availableEv>:
     7b2:	dc 01       	movw	r26, r24
     7b4:	a6 50       	subi	r26, 0x06	; 6
     7b6:	bf 4f       	sbci	r27, 0xFF	; 255
     7b8:	fc 01       	movw	r30, r24
     7ba:	e5 50       	subi	r30, 0x05	; 5
     7bc:	ff 4f       	sbci	r31, 0xFF	; 255
     7be:	81 e0       	ldi	r24, 0x01	; 1
     7c0:	2c 91       	ld	r18, X
     7c2:	90 81       	ld	r25, Z
     7c4:	29 13       	cpse	r18, r25
     7c6:	01 c0       	rjmp	.+2      	; 0x7ca <_ZN12LocoNetClass9availableEv+0x18>
     7c8:	80 e0       	ldi	r24, 0x00	; 0
     7ca:	08 95       	ret

000007cc <_ZN12LocoNetClass7receiveEv>:

lnMsg* LocoNetClass::receive(void)
{
  return recvLnMsg(&LnBuffer);
     7cc:	0c 94 29 04 	jmp	0x852	; 0x852 <recvLnMsg>

000007d0 <_ZN12LocoNetClass4sendEP5lnMsgh>:
    LN_UNKNOWN -      Indicates an abnormal exit condition for the send attempt.
                        In this case, it is recommended to make another send 
                        attempt.
*/
LN_STATUS LocoNetClass::send(lnMsg *pPacket, uint8_t ucPrioDelay)
{
     7d0:	cf 92       	push	r12
     7d2:	df 92       	push	r13
     7d4:	ff 92       	push	r15
     7d6:	0f 93       	push	r16
     7d8:	1f 93       	push	r17
     7da:	cf 93       	push	r28
     7dc:	df 93       	push	r29
     7de:	ec 01       	movw	r28, r24
     7e0:	6b 01       	movw	r12, r22
     7e2:	14 2f       	mov	r17, r20
     7e4:	09 e1       	ldi	r16, 0x19	; 25
     7e6:	ff 24       	eor	r15, r15
     7e8:	f3 94       	inc	r15

    // wait previous traffic and than prio delay and than try tx
    ucWaitForEnterBackoff = 1;  // don't want to abort do/while loop before
    do                          // we did not see the backoff state once
    {
      enReturn = sendLocoNetPacketTry(pPacket, ucPrioDelay);
     7ea:	61 2f       	mov	r22, r17
     7ec:	c6 01       	movw	r24, r12
     7ee:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <_Z20sendLocoNetPacketTryP5lnMsgh>

      if (enReturn == LN_DONE)  // success?
     7f2:	83 30       	cpi	r24, 0x03	; 3
     7f4:	c9 f0       	breq	.+50     	; 0x828 <__DATA_REGION_LENGTH__+0x28>
        return LN_DONE;

      if (enReturn == LN_PRIO_BACKOFF)
     7f6:	81 30       	cpi	r24, 0x01	; 1
     7f8:	11 f4       	brne	.+4      	; 0x7fe <_ZN12LocoNetClass4sendEP5lnMsgh+0x2e>
        ucWaitForEnterBackoff = 0; // now entered backoff -> next state != LN_BACKOFF is worth incrementing the try counter
     7fa:	f1 2c       	mov	r15, r1
     7fc:	f6 cf       	rjmp	.-20     	; 0x7ea <_ZN12LocoNetClass4sendEP5lnMsgh+0x1a>
    }
    while ((enReturn == LN_CD_BACKOFF) ||                             // waiting CD backoff
    (enReturn == LN_PRIO_BACKOFF) ||                           // waiting master+prio backoff
     7fe:	82 30       	cpi	r24, 0x02	; 2
     800:	a0 f3       	brcs	.-24     	; 0x7ea <_ZN12LocoNetClass4sendEP5lnMsgh+0x1a>
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	11 f4       	brne	.+4      	; 0x80a <__DATA_REGION_LENGTH__+0xa>
    ((enReturn == LN_NETWORK_BUSY) && ucWaitForEnterBackoff)); // or within any traffic unfinished
     806:	f1 10       	cpse	r15, r1
     808:	ee cf       	rjmp	.-36     	; 0x7e6 <_ZN12LocoNetClass4sendEP5lnMsgh+0x16>
    // failed -> next try going to higher prio = smaller prio delay
    if (ucPrioDelay > LN_BACKOFF_MIN)
     80a:	1b 31       	cpi	r17, 0x1B	; 27
     80c:	08 f0       	brcs	.+2      	; 0x810 <__DATA_REGION_LENGTH__+0x10>
      ucPrioDelay--;
     80e:	11 50       	subi	r17, 0x01	; 1
     810:	01 50       	subi	r16, 0x01	; 1
{
  unsigned char ucTry;
  LN_STATUS enReturn;
  unsigned char ucWaitForEnterBackoff;

  for (ucTry = 0; ucTry < LN_TX_RETRIES_MAX; ucTry++)
     812:	49 f7       	brne	.-46     	; 0x7e6 <_ZN12LocoNetClass4sendEP5lnMsgh+0x16>
    ((enReturn == LN_NETWORK_BUSY) && ucWaitForEnterBackoff)); // or within any traffic unfinished
    // failed -> next try going to higher prio = smaller prio delay
    if (ucPrioDelay > LN_BACKOFF_MIN)
      ucPrioDelay--;
  }
  LnBuffer.Stats.TxErrors++ ;
     814:	fe 01       	movw	r30, r28
     816:	eb 5f       	subi	r30, 0xFB	; 251
     818:	fe 4f       	sbci	r31, 0xFE	; 254
     81a:	80 81       	ld	r24, Z
     81c:	91 81       	ldd	r25, Z+1	; 0x01
     81e:	01 96       	adiw	r24, 0x01	; 1
     820:	91 83       	std	Z+1, r25	; 0x01
     822:	80 83       	st	Z, r24
  return LN_RETRY_ERROR;
     824:	86 e0       	ldi	r24, 0x06	; 6
     826:	01 c0       	rjmp	.+2      	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
    do                          // we did not see the backoff state once
    {
      enReturn = sendLocoNetPacketTry(pPacket, ucPrioDelay);

      if (enReturn == LN_DONE)  // success?
        return LN_DONE;
     828:	83 e0       	ldi	r24, 0x03	; 3
    if (ucPrioDelay > LN_BACKOFF_MIN)
      ucPrioDelay--;
  }
  LnBuffer.Stats.TxErrors++ ;
  return LN_RETRY_ERROR;
}
     82a:	df 91       	pop	r29
     82c:	cf 91       	pop	r28
     82e:	1f 91       	pop	r17
     830:	0f 91       	pop	r16
     832:	ff 90       	pop	r15
     834:	df 90       	pop	r13
     836:	cf 90       	pop	r12
     838:	08 95       	ret

0000083a <_ZN12LocoNetClass4sendEP5lnMsg>:
                        In this case, it is recommended to make another send 
                        attempt.
*/
LN_STATUS LocoNetClass::send(lnMsg *pPacket)
{
  return send(pPacket, LN_BACKOFF_INITIAL);
     83a:	4e e2       	ldi	r20, 0x2E	; 46
     83c:	0c 94 e8 03 	jmp	0x7d0	; 0x7d0 <_ZN12LocoNetClass4sendEP5lnMsgh>

00000840 <initLnBuf>:
}

LnBufStats *getLnBufStats( LnBuf *Buffer )
{
  return &(Buffer->Stats) ;
}
     840:	29 e0       	ldi	r18, 0x09	; 9
     842:	31 e0       	ldi	r19, 0x01	; 1
     844:	fc 01       	movw	r30, r24
     846:	a9 01       	movw	r20, r18
     848:	11 92       	st	Z+, r1
     84a:	41 50       	subi	r20, 0x01	; 1
     84c:	50 40       	sbci	r21, 0x00	; 0
     84e:	e1 f7       	brne	.-8      	; 0x848 <initLnBuf+0x8>
     850:	08 95       	ret

00000852 <recvLnMsg>:
     852:	2f 92       	push	r2
     854:	3f 92       	push	r3
     856:	4f 92       	push	r4
     858:	5f 92       	push	r5
     85a:	6f 92       	push	r6
     85c:	7f 92       	push	r7
     85e:	8f 92       	push	r8
     860:	9f 92       	push	r9
     862:	af 92       	push	r10
     864:	bf 92       	push	r11
     866:	cf 92       	push	r12
     868:	df 92       	push	r13
     86a:	ef 92       	push	r14
     86c:	ff 92       	push	r15
     86e:	0f 93       	push	r16
     870:	1f 93       	push	r17
     872:	cf 93       	push	r28
     874:	df 93       	push	r29
     876:	00 d0       	rcall	.+0      	; 0x878 <recvLnMsg+0x26>
     878:	00 d0       	rcall	.+0      	; 0x87a <recvLnMsg+0x28>
     87a:	cd b7       	in	r28, 0x3d	; 61
     87c:	de b7       	in	r29, 0x3e	; 62
     87e:	9c 83       	std	Y+4, r25	; 0x04
     880:	8b 83       	std	Y+3, r24	; 0x03
     882:	7c 01       	movw	r14, r24
     884:	8b ef       	ldi	r24, 0xFB	; 251
     886:	e8 0e       	add	r14, r24
     888:	f1 1c       	adc	r15, r1
     88a:	6b 80       	ldd	r6, Y+3	; 0x03
     88c:	7c 80       	ldd	r7, Y+4	; 0x04
     88e:	9a ef       	ldi	r25, 0xFA	; 250
     890:	69 0e       	add	r6, r25
     892:	71 1c       	adc	r7, r1
     894:	0b 81       	ldd	r16, Y+3	; 0x03
     896:	1c 81       	ldd	r17, Y+4	; 0x04
     898:	04 50       	subi	r16, 0x04	; 4
     89a:	1f 4f       	sbci	r17, 0xFF	; 255
     89c:	eb 81       	ldd	r30, Y+3	; 0x03
     89e:	fc 81       	ldd	r31, Y+4	; 0x04
     8a0:	e3 50       	subi	r30, 0x03	; 3
     8a2:	ff 4f       	sbci	r31, 0xFF	; 255
     8a4:	6f 01       	movw	r12, r30
     8a6:	8b 81       	ldd	r24, Y+3	; 0x03
     8a8:	9c 81       	ldd	r25, Y+4	; 0x04
     8aa:	82 50       	subi	r24, 0x02	; 2
     8ac:	9f 4f       	sbci	r25, 0xFF	; 255
     8ae:	4c 01       	movw	r8, r24
     8b0:	8a ef       	ldi	r24, 0xFA	; 250
     8b2:	28 2e       	mov	r2, r24
     8b4:	ab 80       	ldd	r10, Y+3	; 0x03
     8b6:	bc 80       	ldd	r11, Y+4	; 0x04
     8b8:	91 e0       	ldi	r25, 0x01	; 1
     8ba:	a9 0e       	add	r10, r25
     8bc:	b9 1e       	adc	r11, r25
     8be:	eb 81       	ldd	r30, Y+3	; 0x03
     8c0:	fc 81       	ldd	r31, Y+4	; 0x04
     8c2:	e1 50       	subi	r30, 0x01	; 1
     8c4:	ff 4f       	sbci	r31, 0xFF	; 255
     8c6:	fa 83       	std	Y+2, r31	; 0x02
     8c8:	e9 83       	std	Y+1, r30	; 0x01
     8ca:	f7 01       	movw	r30, r14
     8cc:	80 81       	ld	r24, Z
     8ce:	f3 01       	movw	r30, r6
     8d0:	90 81       	ld	r25, Z
     8d2:	89 17       	cp	r24, r25
     8d4:	09 f4       	brne	.+2      	; 0x8d8 <recvLnMsg+0x86>
     8d6:	9d c0       	rjmp	.+314    	; 0xa12 <__stack+0x113>
     8d8:	eb 81       	ldd	r30, Y+3	; 0x03
     8da:	fc 81       	ldd	r31, Y+4	; 0x04
     8dc:	e8 0f       	add	r30, r24
     8de:	f1 1d       	adc	r31, r1
     8e0:	30 80       	ld	r3, Z
     8e2:	37 fe       	sbrs	r3, 7
     8e4:	1e c0       	rjmp	.+60     	; 0x922 <__stack+0x23>
     8e6:	f8 01       	movw	r30, r16
     8e8:	90 81       	ld	r25, Z
     8ea:	89 17       	cp	r24, r25
     8ec:	39 f0       	breq	.+14     	; 0x8fc <recvLnMsg+0xaa>
     8ee:	f5 01       	movw	r30, r10
     8f0:	20 81       	ld	r18, Z
     8f2:	31 81       	ldd	r19, Z+1	; 0x01
     8f4:	2f 5f       	subi	r18, 0xFF	; 255
     8f6:	3f 4f       	sbci	r19, 0xFF	; 255
     8f8:	31 83       	std	Z+1, r19	; 0x01
     8fa:	20 83       	st	Z, r18
     8fc:	f8 01       	movw	r30, r16
     8fe:	80 83       	st	Z, r24
     900:	8f ef       	ldi	r24, 0xFF	; 255
     902:	f6 01       	movw	r30, r12
     904:	80 83       	st	Z, r24
     906:	83 2d       	mov	r24, r3
     908:	80 76       	andi	r24, 0x60	; 96
     90a:	80 36       	cpi	r24, 0x60	; 96
     90c:	21 f0       	breq	.+8      	; 0x916 <__stack+0x17>
     90e:	82 95       	swap	r24
     910:	8f 70       	andi	r24, 0x0F	; 15
     912:	8e 5f       	subi	r24, 0xFE	; 254
     914:	01 c0       	rjmp	.+2      	; 0x918 <__stack+0x19>
     916:	80 e0       	ldi	r24, 0x00	; 0
     918:	f4 01       	movw	r30, r8
     91a:	80 83       	st	Z, r24
     91c:	81 11       	cpse	r24, r1
     91e:	06 c0       	rjmp	.+12     	; 0x92c <__stack+0x2d>
     920:	42 c0       	rjmp	.+132    	; 0x9a6 <__stack+0xa7>
     922:	f4 01       	movw	r30, r8
     924:	80 81       	ld	r24, Z
     926:	81 11       	cpse	r24, r1
     928:	3e c0       	rjmp	.+124    	; 0x9a6 <__stack+0xa7>
     92a:	30 82       	st	Z, r3
     92c:	f8 01       	movw	r30, r16
     92e:	20 81       	ld	r18, Z
     930:	f4 01       	movw	r30, r8
     932:	30 81       	ld	r19, Z
     934:	82 2f       	mov	r24, r18
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	83 0f       	add	r24, r19
     93a:	91 1d       	adc	r25, r1
     93c:	8b 3f       	cpi	r24, 0xFB	; 251
     93e:	91 05       	cpc	r25, r1
     940:	94 f1       	brlt	.+100    	; 0x9a6 <__stack+0xa7>
     942:	42 2c       	mov	r4, r2
     944:	42 1a       	sub	r4, r18
     946:	f8 94       	cli
     948:	f3 01       	movw	r30, r6
     94a:	40 81       	ld	r20, Z
     94c:	f8 01       	movw	r30, r16
     94e:	80 81       	ld	r24, Z
     950:	84 17       	cp	r24, r20
     952:	08 f0       	brcs	.+2      	; 0x956 <__stack+0x57>
     954:	61 c0       	rjmp	.+194    	; 0xa18 <__stack+0x119>
     956:	f4 2f       	mov	r31, r20
     958:	f8 1b       	sub	r31, r24
     95a:	8f 2f       	mov	r24, r31
     95c:	f3 01       	movw	r30, r6
     95e:	80 83       	st	Z, r24
     960:	78 94       	sei
     962:	f8 01       	movw	r30, r16
     964:	80 81       	ld	r24, Z
     966:	48 17       	cp	r20, r24
     968:	08 f0       	brcs	.+2      	; 0x96c <__stack+0x6d>
     96a:	59 c0       	rjmp	.+178    	; 0xa1e <__stack+0x11f>
     96c:	51 2c       	mov	r5, r1
     96e:	50 e0       	ldi	r21, 0x00	; 0
     970:	6b 81       	ldd	r22, Y+3	; 0x03
     972:	7c 81       	ldd	r23, Y+4	; 0x04
     974:	cb 01       	movw	r24, r22
     976:	84 0d       	add	r24, r4
     978:	95 1d       	adc	r25, r5
     97a:	0e 94 6a 12 	call	0x24d4	; 0x24d4 <memmove>
     97e:	f8 01       	movw	r30, r16
     980:	80 81       	ld	r24, Z
     982:	6b 81       	ldd	r22, Y+3	; 0x03
     984:	7c 81       	ldd	r23, Y+4	; 0x04
     986:	68 0f       	add	r22, r24
     988:	71 1d       	adc	r23, r1
     98a:	a2 01       	movw	r20, r4
     98c:	8b 81       	ldd	r24, Y+3	; 0x03
     98e:	9c 81       	ldd	r25, Y+4	; 0x04
     990:	0e 94 6a 12 	call	0x24d4	; 0x24d4 <memmove>
     994:	f7 01       	movw	r30, r14
     996:	80 81       	ld	r24, Z
     998:	f8 01       	movw	r30, r16
     99a:	90 81       	ld	r25, Z
     99c:	89 1b       	sub	r24, r25
     99e:	f7 01       	movw	r30, r14
     9a0:	80 83       	st	Z, r24
     9a2:	f8 01       	movw	r30, r16
     9a4:	10 82       	st	Z, r1
     9a6:	f7 01       	movw	r30, r14
     9a8:	80 81       	ld	r24, Z
     9aa:	8f 5f       	subi	r24, 0xFF	; 255
     9ac:	80 83       	st	Z, r24
     9ae:	f8 01       	movw	r30, r16
     9b0:	90 81       	ld	r25, Z
     9b2:	28 2f       	mov	r18, r24
     9b4:	29 1b       	sub	r18, r25
     9b6:	8a 3f       	cpi	r24, 0xFA	; 250
     9b8:	10 f0       	brcs	.+4      	; 0x9be <__stack+0xbf>
     9ba:	f7 01       	movw	r30, r14
     9bc:	10 82       	st	Z, r1
     9be:	f4 01       	movw	r30, r8
     9c0:	80 81       	ld	r24, Z
     9c2:	28 17       	cp	r18, r24
     9c4:	29 f0       	breq	.+10     	; 0x9d0 <__stack+0xd1>
     9c6:	f6 01       	movw	r30, r12
     9c8:	80 81       	ld	r24, Z
     9ca:	83 25       	eor	r24, r3
     9cc:	80 83       	st	Z, r24
     9ce:	7d cf       	rjmp	.-262    	; 0x8ca <recvLnMsg+0x78>
     9d0:	f6 01       	movw	r30, r12
     9d2:	80 81       	ld	r24, Z
     9d4:	38 12       	cpse	r3, r24
     9d6:	0c c0       	rjmp	.+24     	; 0x9f0 <__stack+0xf1>
     9d8:	2b 81       	ldd	r18, Y+3	; 0x03
     9da:	3c 81       	ldd	r19, Y+4	; 0x04
     9dc:	29 0f       	add	r18, r25
     9de:	31 1d       	adc	r19, r1
     9e0:	e9 81       	ldd	r30, Y+1	; 0x01
     9e2:	fa 81       	ldd	r31, Y+2	; 0x02
     9e4:	80 81       	ld	r24, Z
     9e6:	91 81       	ldd	r25, Z+1	; 0x01
     9e8:	01 96       	adiw	r24, 0x01	; 1
     9ea:	91 83       	std	Z+1, r25	; 0x01
     9ec:	80 83       	st	Z, r24
     9ee:	08 c0       	rjmp	.+16     	; 0xa00 <__stack+0x101>
     9f0:	f5 01       	movw	r30, r10
     9f2:	80 81       	ld	r24, Z
     9f4:	91 81       	ldd	r25, Z+1	; 0x01
     9f6:	01 96       	adiw	r24, 0x01	; 1
     9f8:	91 83       	std	Z+1, r25	; 0x01
     9fa:	80 83       	st	Z, r24
     9fc:	20 e0       	ldi	r18, 0x00	; 0
     9fe:	30 e0       	ldi	r19, 0x00	; 0
     a00:	f7 01       	movw	r30, r14
     a02:	80 81       	ld	r24, Z
     a04:	f8 01       	movw	r30, r16
     a06:	80 83       	st	Z, r24
     a08:	21 15       	cp	r18, r1
     a0a:	31 05       	cpc	r19, r1
     a0c:	e1 f2       	breq	.-72     	; 0x9c6 <__stack+0xc7>
     a0e:	c9 01       	movw	r24, r18
     a10:	0d c0       	rjmp	.+26     	; 0xa2c <__stack+0x12d>
     a12:	80 e0       	ldi	r24, 0x00	; 0
     a14:	90 e0       	ldi	r25, 0x00	; 0
     a16:	0a c0       	rjmp	.+20     	; 0xa2c <__stack+0x12d>
     a18:	84 2d       	mov	r24, r4
     a1a:	84 0f       	add	r24, r20
     a1c:	9f cf       	rjmp	.-194    	; 0x95c <__stack+0x5d>
     a1e:	48 1b       	sub	r20, r24
     a20:	50 e0       	ldi	r21, 0x00	; 0
     a22:	6b 81       	ldd	r22, Y+3	; 0x03
     a24:	7c 81       	ldd	r23, Y+4	; 0x04
     a26:	68 0f       	add	r22, r24
     a28:	71 1d       	adc	r23, r1
     a2a:	b0 cf       	rjmp	.-160    	; 0x98c <__stack+0x8d>
     a2c:	0f 90       	pop	r0
     a2e:	0f 90       	pop	r0
     a30:	0f 90       	pop	r0
     a32:	0f 90       	pop	r0
     a34:	df 91       	pop	r29
     a36:	cf 91       	pop	r28
     a38:	1f 91       	pop	r17
     a3a:	0f 91       	pop	r16
     a3c:	ff 90       	pop	r15
     a3e:	ef 90       	pop	r14
     a40:	df 90       	pop	r13
     a42:	cf 90       	pop	r12
     a44:	bf 90       	pop	r11
     a46:	af 90       	pop	r10
     a48:	9f 90       	pop	r9
     a4a:	8f 90       	pop	r8
     a4c:	7f 90       	pop	r7
     a4e:	6f 90       	pop	r6
     a50:	5f 90       	pop	r5
     a52:	4f 90       	pop	r4
     a54:	3f 90       	pop	r3
     a56:	2f 90       	pop	r2
     a58:	08 95       	ret

00000a5a <getLnMsgSize>:

uint8_t getLnMsgSize( volatile lnMsg * Msg )
{
     a5a:	fc 01       	movw	r30, r24
  return ( ( Msg->sz.command & (uint8_t)0x60 ) == (uint8_t)0x60 ) ? Msg->sz.mesg_size : ( ( Msg->sz.command & (uint8_t)0x60 ) >> (uint8_t)4 ) + 2 ;
     a5c:	80 81       	ld	r24, Z
     a5e:	80 76       	andi	r24, 0x60	; 96
     a60:	80 36       	cpi	r24, 0x60	; 96
     a62:	11 f4       	brne	.+4      	; 0xa68 <getLnMsgSize+0xe>
     a64:	81 81       	ldd	r24, Z+1	; 0x01
     a66:	08 95       	ret
     a68:	80 81       	ld	r24, Z
     a6a:	80 76       	andi	r24, 0x60	; 96
     a6c:	82 95       	swap	r24
     a6e:	8f 70       	andi	r24, 0x0F	; 15
     a70:	8e 5f       	subi	r24, 0xFE	; 254
}
     a72:	08 95       	ret

00000a74 <_Z15setTxPortAndPinPVhh>:
#define LN_TX_PORT *txPort
#define LN_TX_BIT txPin

void setTxPortAndPin(volatile uint8_t *newTxPort, uint8_t newTxPin)
{
  txPort = newTxPort;
     a74:	90 93 43 02 	sts	0x0243, r25	; 0x800243 <txPort+0x1>
     a78:	80 93 42 02 	sts	0x0242, r24	; 0x800242 <txPort>
  txPin = newTxPin;
     a7c:	60 93 41 02 	sts	0x0241, r22	; 0x800241 <txPin>
     a80:	08 95       	ret

00000a82 <__vector_10>:
 * incoming data.
 *
 **************************************************************************/

ISR(LN_SB_SIGNAL)
{
     a82:	1f 92       	push	r1
     a84:	0f 92       	push	r0
     a86:	0f b6       	in	r0, 0x3f	; 63
     a88:	0f 92       	push	r0
     a8a:	11 24       	eor	r1, r1
     a8c:	8f 93       	push	r24
     a8e:	9f 93       	push	r25
     a90:	ef 93       	push	r30
     a92:	ff 93       	push	r31
  // Disable the Input Comparator Interrupt
  cbi( LN_SB_INT_ENABLE_REG, LN_SB_INT_ENABLE_BIT );     
     a94:	ef e6       	ldi	r30, 0x6F	; 111
     a96:	f0 e0       	ldi	r31, 0x00	; 0
     a98:	80 81       	ld	r24, Z
     a9a:	8f 7d       	andi	r24, 0xDF	; 223
     a9c:	80 83       	st	Z, r24

  // Get the Current Timer1 Count and Add the offset for the Compare target
  lnCompareTarget = LN_TMR_INP_CAPT_REG + LN_TIMER_RX_START_PERIOD ;
     a9e:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
     aa2:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
     aa6:	80 53       	subi	r24, 0x30	; 48
     aa8:	9d 4f       	sbci	r25, 0xFD	; 253
     aaa:	90 93 4c 02 	sts	0x024C, r25	; 0x80024c <lnCompareTarget+0x1>
     aae:	80 93 4b 02 	sts	0x024B, r24	; 0x80024b <lnCompareTarget>
  LN_TMR_OUTP_CAPT_REG = lnCompareTarget ;
     ab2:	80 91 4b 02 	lds	r24, 0x024B	; 0x80024b <lnCompareTarget>
     ab6:	90 91 4c 02 	lds	r25, 0x024C	; 0x80024c <lnCompareTarget+0x1>
     aba:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     abe:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>

  // Clear the current Compare interrupt status bit and enable the Compare interrupt
  sbi(LN_TMR_INT_STATUS_REG, LN_TMR_INT_STATUS_BIT) ;
     ac2:	b1 9a       	sbi	0x16, 1	; 22
  sbi(LN_TMR_INT_ENABLE_REG, LN_TMR_INT_ENABLE_BIT) ; 
     ac4:	80 81       	ld	r24, Z
     ac6:	82 60       	ori	r24, 0x02	; 2
     ac8:	80 83       	st	Z, r24

  // Set the State to indicate that we have begun to Receive
  lnState = LN_ST_RX ;
     aca:	84 e0       	ldi	r24, 0x04	; 4
     acc:	80 93 4f 02 	sts	0x024F, r24	; 0x80024f <lnState>

  // Reset the bit counter so that on first increment it is on 0
  lnBitCount = 0;
     ad0:	10 92 4e 02 	sts	0x024E, r1	; 0x80024e <lnBitCount>
}
     ad4:	ff 91       	pop	r31
     ad6:	ef 91       	pop	r30
     ad8:	9f 91       	pop	r25
     ada:	8f 91       	pop	r24
     adc:	0f 90       	pop	r0
     ade:	0f be       	out	0x3f, r0	; 63
     ae0:	0f 90       	pop	r0
     ae2:	1f 90       	pop	r1
     ae4:	18 95       	reti

00000ae6 <__vector_11>:
 * transmitting, this routine shifts the bits and sends it. When receiving,
 * it samples the bit and shifts it into the buffer.
 *
 **************************************************************************/
ISR(LN_TMR_SIGNAL)     /* signal handler for timer0 overflow */
{
     ae6:	1f 92       	push	r1
     ae8:	0f 92       	push	r0
     aea:	0f b6       	in	r0, 0x3f	; 63
     aec:	0f 92       	push	r0
     aee:	11 24       	eor	r1, r1
     af0:	2f 93       	push	r18
     af2:	3f 93       	push	r19
     af4:	4f 93       	push	r20
     af6:	8f 93       	push	r24
     af8:	9f 93       	push	r25
     afa:	af 93       	push	r26
     afc:	bf 93       	push	r27
     afe:	ef 93       	push	r30
     b00:	ff 93       	push	r31
  // Advance the Compare Target by a bit period
  lnCompareTarget += LN_TIMER_RX_RELOAD_PERIOD;
     b02:	80 91 4b 02 	lds	r24, 0x024B	; 0x80024b <lnCompareTarget>
     b06:	90 91 4c 02 	lds	r25, 0x024C	; 0x80024c <lnCompareTarget+0x1>
     b0a:	80 52       	subi	r24, 0x20	; 32
     b0c:	9e 4f       	sbci	r25, 0xFE	; 254
     b0e:	90 93 4c 02 	sts	0x024C, r25	; 0x80024c <lnCompareTarget+0x1>
     b12:	80 93 4b 02 	sts	0x024B, r24	; 0x80024b <lnCompareTarget>
  LN_TMR_OUTP_CAPT_REG = lnCompareTarget;
     b16:	80 91 4b 02 	lds	r24, 0x024B	; 0x80024b <lnCompareTarget>
     b1a:	90 91 4c 02 	lds	r25, 0x024C	; 0x80024c <lnCompareTarget+0x1>
     b1e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     b22:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>

  lnBitCount++;                // Increment bit_counter
     b26:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <lnBitCount>
     b2a:	8f 5f       	subi	r24, 0xFF	; 255
     b2c:	80 93 4e 02 	sts	0x024E, r24	; 0x80024e <lnBitCount>

  if( lnState == LN_ST_RX ) {  // Are we in RX mode
     b30:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <lnState>
     b34:	84 30       	cpi	r24, 0x04	; 4
     b36:	e9 f5       	brne	.+122    	; 0xbb2 <__vector_11+0xcc>
    if( lnBitCount < 9)  {   // Are we in the Stop Bits phase
     b38:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <lnBitCount>
     b3c:	89 30       	cpi	r24, 0x09	; 9
     b3e:	78 f4       	brcc	.+30     	; 0xb5e <__vector_11+0x78>
      lnCurrentByte >>= 1;
     b40:	80 91 4d 02 	lds	r24, 0x024D	; 0x80024d <lnCurrentByte>
     b44:	90 e0       	ldi	r25, 0x00	; 0
     b46:	95 95       	asr	r25
     b48:	87 95       	ror	r24
     b4a:	80 93 4d 02 	sts	0x024D, r24	; 0x80024d <lnCurrentByte>
#ifdef LN_SW_UART_RX_INVERTED  
      if( bit_is_clear(LN_RX_PORT, LN_RX_BIT)) {
#else		
      if( bit_is_set(LN_RX_PORT, LN_RX_BIT)) {
     b4e:	18 9b       	sbis	0x03, 0	; 3
     b50:	0b c1       	rjmp	.+534    	; 0xd68 <__vector_11+0x282>
#endif
        lnCurrentByte |= 0x80;
     b52:	80 91 4d 02 	lds	r24, 0x024D	; 0x80024d <lnCurrentByte>
     b56:	80 68       	ori	r24, 0x80	; 128
     b58:	80 93 4d 02 	sts	0x024D, r24	; 0x80024d <lnCurrentByte>
     b5c:	05 c1       	rjmp	.+522    	; 0xd68 <__vector_11+0x282>
      return ;
    }

    // Clear the Start Bit Interrupt Status Flag and Enable ready to 
    // detect the next Start Bit
    sbi( LN_SB_INT_STATUS_REG, LN_SB_INT_STATUS_BIT ) ;
     b5e:	b5 9a       	sbi	0x16, 5	; 22
    sbi( LN_SB_INT_ENABLE_REG, LN_SB_INT_ENABLE_BIT ) ;
     b60:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
     b64:	80 62       	ori	r24, 0x20	; 32
     b66:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
     b6a:	80 91 49 02 	lds	r24, 0x0249	; 0x800249 <lnRxBuffer>
     b6e:	90 91 4a 02 	lds	r25, 0x024A	; 0x80024a <lnRxBuffer+0x1>

    // If the Stop bit is not Set then we have a Framing Error
#ifdef LN_SW_UART_RX_INVERTED  
    if( bit_is_set(LN_RX_PORT,LN_RX_BIT) ) {
#else
    if( bit_is_clear(LN_RX_PORT,LN_RX_BIT) ) {
     b72:	18 99       	sbic	0x03, 0	; 3
     b74:	09 c0       	rjmp	.+18     	; 0xb88 <__vector_11+0xa2>
#endif		
      // ERROR_LED_ON();
      lnRxBuffer->Stats.RxErrors++ ;
     b76:	fc 01       	movw	r30, r24
     b78:	ef 5f       	subi	r30, 0xFF	; 255
     b7a:	fe 4f       	sbci	r31, 0xFE	; 254
     b7c:	80 81       	ld	r24, Z
     b7e:	91 81       	ldd	r25, Z+1	; 0x01
     b80:	01 96       	adiw	r24, 0x01	; 1
     b82:	91 83       	std	Z+1, r25	; 0x01
     b84:	80 83       	st	Z, r24
     b86:	10 c0       	rjmp	.+32     	; 0xba8 <__vector_11+0xc2>
    } 
    else { // Put the received byte in the buffer
      addByteLnBuf( lnRxBuffer, lnCurrentByte ) ;
     b88:	40 91 4d 02 	lds	r20, 0x024D	; 0x80024d <lnCurrentByte>
LnBufStats *getLnBufStats( LnBuf *Buffer ) ;
uint8_t getLnMsgSize( volatile lnMsg * newMsg ) ;

static inline void addByteLnBuf( LnBuf *Buffer, uint8_t newByte )
{
  Buffer->Buf[ Buffer->WriteIndex++ ] = newByte ;
     b8c:	fc 01       	movw	r30, r24
     b8e:	e6 50       	subi	r30, 0x06	; 6
     b90:	ff 4f       	sbci	r31, 0xFF	; 255
     b92:	30 81       	ld	r19, Z
     b94:	21 e0       	ldi	r18, 0x01	; 1
     b96:	23 0f       	add	r18, r19
     b98:	20 83       	st	Z, r18
     b9a:	dc 01       	movw	r26, r24
     b9c:	a3 0f       	add	r26, r19
     b9e:	b1 1d       	adc	r27, r1
     ba0:	4c 93       	st	X, r20
  if( Buffer->WriteIndex >= LN_BUF_SIZE )
     ba2:	2a 3f       	cpi	r18, 0xFA	; 250
     ba4:	08 f0       	brcs	.+2      	; 0xba8 <__vector_11+0xc2>
    Buffer->WriteIndex = 0 ;
     ba6:	10 82       	st	Z, r1
    }
    lnBitCount = 0 ;
     ba8:	10 92 4e 02 	sts	0x024E, r1	; 0x80024e <lnBitCount>
    lnState = LN_ST_CD_BACKOFF ;
     bac:	81 e0       	ldi	r24, 0x01	; 1
     bae:	80 93 4f 02 	sts	0x024F, r24	; 0x80024f <lnState>
  }

  if( lnState == LN_ST_TX ) {   // Are we in the TX State
     bb2:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <lnState>
     bb6:	83 30       	cpi	r24, 0x03	; 3
     bb8:	09 f0       	breq	.+2      	; 0xbbc <__vector_11+0xd6>
     bba:	80 c0       	rjmp	.+256    	; 0xcbc <__vector_11+0x1d6>
    // To get to this point we have already begun the TX cycle so we need to 
    // first check for a Collision. 
    if ( IS_LN_COLLISION() ) {			 // Collision?
     bbc:	e0 91 42 02 	lds	r30, 0x0242	; 0x800242 <txPort>
     bc0:	f0 91 43 02 	lds	r31, 0x0243	; 0x800243 <txPort+0x1>
     bc4:	80 81       	ld	r24, Z
     bc6:	20 91 41 02 	lds	r18, 0x0241	; 0x800241 <txPin>
     bca:	33 b1       	in	r19, 0x03	; 3
     bcc:	90 e0       	ldi	r25, 0x00	; 0
     bce:	02 2e       	mov	r0, r18
     bd0:	02 c0       	rjmp	.+4      	; 0xbd6 <__vector_11+0xf0>
     bd2:	95 95       	asr	r25
     bd4:	87 95       	ror	r24
     bd6:	0a 94       	dec	r0
     bd8:	e2 f7       	brpl	.-8      	; 0xbd2 <__vector_11+0xec>
     bda:	83 27       	eor	r24, r19
     bdc:	80 fd       	sbrc	r24, 0
     bde:	04 c0       	rjmp	.+8      	; 0xbe8 <__vector_11+0x102>
      lnBitCount = 0 ;
     be0:	10 92 4e 02 	sts	0x024E, r1	; 0x80024e <lnBitCount>
      lnState = LN_ST_TX_COLLISION ;
     be4:	82 e0       	ldi	r24, 0x02	; 2
     be6:	68 c0       	rjmp	.+208    	; 0xcb8 <__vector_11+0x1d2>
      // ERROR_LED_ON();
    } 
    else if( lnBitCount < 9) {   			 // Send each Bit
     be8:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <lnBitCount>
     bec:	89 30       	cpi	r24, 0x09	; 9
     bee:	f0 f4       	brcc	.+60     	; 0xc2c <__vector_11+0x146>
      if( lnCurrentByte & 0x01 ) {
     bf0:	80 91 4d 02 	lds	r24, 0x024D	; 0x80024d <lnCurrentByte>
        LN_SW_UART_SET_TX_HIGH(LN_TX_PORT, LN_TX_BIT);
     bf4:	30 81       	ld	r19, Z
      lnBitCount = 0 ;
      lnState = LN_ST_TX_COLLISION ;
      // ERROR_LED_ON();
    } 
    else if( lnBitCount < 9) {   			 // Send each Bit
      if( lnCurrentByte & 0x01 ) {
     bf6:	80 ff       	sbrs	r24, 0
     bf8:	09 c0       	rjmp	.+18     	; 0xc0c <__vector_11+0x126>
        LN_SW_UART_SET_TX_HIGH(LN_TX_PORT, LN_TX_BIT);
     bfa:	81 e0       	ldi	r24, 0x01	; 1
     bfc:	90 e0       	ldi	r25, 0x00	; 0
     bfe:	01 c0       	rjmp	.+2      	; 0xc02 <__vector_11+0x11c>
     c00:	88 0f       	add	r24, r24
     c02:	2a 95       	dec	r18
     c04:	ea f7       	brpl	.-6      	; 0xc00 <__vector_11+0x11a>
     c06:	80 95       	com	r24
     c08:	83 23       	and	r24, r19
     c0a:	07 c0       	rjmp	.+14     	; 0xc1a <__vector_11+0x134>
      } 
      else {
        LN_SW_UART_SET_TX_LOW(LN_TX_PORT, LN_TX_BIT);
     c0c:	81 e0       	ldi	r24, 0x01	; 1
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	01 c0       	rjmp	.+2      	; 0xc14 <__vector_11+0x12e>
     c12:	88 0f       	add	r24, r24
     c14:	2a 95       	dec	r18
     c16:	ea f7       	brpl	.-6      	; 0xc12 <__vector_11+0x12c>
     c18:	83 2b       	or	r24, r19
     c1a:	80 83       	st	Z, r24
      }
      lnCurrentByte >>= 1;
     c1c:	80 91 4d 02 	lds	r24, 0x024D	; 0x80024d <lnCurrentByte>
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	95 95       	asr	r25
     c24:	87 95       	ror	r24
     c26:	80 93 4d 02 	sts	0x024D, r24	; 0x80024d <lnCurrentByte>
     c2a:	48 c0       	rjmp	.+144    	; 0xcbc <__vector_11+0x1d6>
    } 
    else if( lnBitCount ==  9) {   		 // Generate stop-bit
     c2c:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <lnBitCount>
     c30:	89 30       	cpi	r24, 0x09	; 9
     c32:	59 f4       	brne	.+22     	; 0xc4a <__vector_11+0x164>
      LN_SW_UART_SET_TX_HIGH(LN_TX_PORT, LN_TX_BIT);
     c34:	30 81       	ld	r19, Z
     c36:	81 e0       	ldi	r24, 0x01	; 1
     c38:	90 e0       	ldi	r25, 0x00	; 0
     c3a:	01 c0       	rjmp	.+2      	; 0xc3e <__vector_11+0x158>
     c3c:	88 0f       	add	r24, r24
     c3e:	2a 95       	dec	r18
     c40:	ea f7       	brpl	.-6      	; 0xc3c <__vector_11+0x156>
     c42:	80 95       	com	r24
     c44:	83 23       	and	r24, r19
     c46:	80 83       	st	Z, r24
     c48:	39 c0       	rjmp	.+114    	; 0xcbc <__vector_11+0x1d6>
    } 
    else if( ++lnTxIndex < lnTxLength ) {  // Any more bytes in buffer
     c4a:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <lnTxIndex>
     c4e:	8f 5f       	subi	r24, 0xFF	; 255
     c50:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <lnTxIndex>
     c54:	90 91 45 02 	lds	r25, 0x0245	; 0x800245 <lnTxLength>
     c58:	89 17       	cp	r24, r25
     c5a:	48 f5       	brcc	.+82     	; 0xcae <__vector_11+0x1c8>
      // Setup for the next byte
      lnBitCount = 0 ;
     c5c:	10 92 4e 02 	sts	0x024E, r1	; 0x80024e <lnBitCount>
      lnCurrentByte = lnTxData->data[ lnTxIndex ] ;
     c60:	a0 91 47 02 	lds	r26, 0x0247	; 0x800247 <lnTxData>
     c64:	b0 91 48 02 	lds	r27, 0x0248	; 0x800248 <lnTxData+0x1>
     c68:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <lnTxIndex>
     c6c:	a8 0f       	add	r26, r24
     c6e:	b1 1d       	adc	r27, r1
     c70:	8c 91       	ld	r24, X
     c72:	80 93 4d 02 	sts	0x024D, r24	; 0x80024d <lnCurrentByte>

      // Begin the Start Bit
      LN_SW_UART_SET_TX_LOW(LN_TX_PORT, LN_TX_BIT);
     c76:	30 81       	ld	r19, Z
     c78:	81 e0       	ldi	r24, 0x01	; 1
     c7a:	90 e0       	ldi	r25, 0x00	; 0
     c7c:	01 c0       	rjmp	.+2      	; 0xc80 <__vector_11+0x19a>
     c7e:	88 0f       	add	r24, r24
     c80:	2a 95       	dec	r18
     c82:	ea f7       	brpl	.-6      	; 0xc7e <__vector_11+0x198>
     c84:	83 2b       	or	r24, r19
     c86:	80 83       	st	Z, r24

      // Get the Current Timer1 Count and Add the offset for the Compare target
      // added adjustment value for bugfix (Olaf Funke)
      lnCompareTarget = LN_TMR_COUNT_REG + LN_TIMER_TX_RELOAD_PERIOD - LN_TIMER_TX_RELOAD_ADJUST; 
     c88:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     c8c:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     c90:	8a 58       	subi	r24, 0x8A	; 138
     c92:	9e 4f       	sbci	r25, 0xFE	; 254
     c94:	90 93 4c 02 	sts	0x024C, r25	; 0x80024c <lnCompareTarget+0x1>
     c98:	80 93 4b 02 	sts	0x024B, r24	; 0x80024b <lnCompareTarget>
      LN_TMR_OUTP_CAPT_REG = lnCompareTarget ;
     c9c:	80 91 4b 02 	lds	r24, 0x024B	; 0x80024b <lnCompareTarget>
     ca0:	90 91 4c 02 	lds	r25, 0x024C	; 0x80024c <lnCompareTarget+0x1>
     ca4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     ca8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
     cac:	07 c0       	rjmp	.+14     	; 0xcbc <__vector_11+0x1d6>
    } 
    else {
      // Successfully Sent all bytes in the buffer
      // so set the Packet Status to Done
      lnTxSuccess = 1 ;
     cae:	81 e0       	ldi	r24, 0x01	; 1
     cb0:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <lnTxSuccess>

      // Now copy the TX Packet into the RX Buffer
      //addMsgLnBuf( lnRxBuffer, lnTxData );

      // Begin CD Backoff state
      lnBitCount = 0 ;
     cb4:	10 92 4e 02 	sts	0x024E, r1	; 0x80024e <lnBitCount>
      lnState = LN_ST_CD_BACKOFF ;     
     cb8:	80 93 4f 02 	sts	0x024F, r24	; 0x80024f <lnState>
    }
  }

  // Note we may have got here from a failed TX cycle, if so BitCount will be 0
  if( lnState == LN_ST_TX_COLLISION ) {
     cbc:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <lnState>
     cc0:	82 30       	cpi	r24, 0x02	; 2
     cc2:	d1 f5       	brne	.+116    	; 0xd38 <__vector_11+0x252>
    if( lnBitCount == 0 ) {
     cc4:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <lnBitCount>
     cc8:	81 11       	cpse	r24, r1
     cca:	11 c0       	rjmp	.+34     	; 0xcee <__vector_11+0x208>
      // Pull the TX Line low to indicate Collision
      LN_SW_UART_SET_TX_LOW(LN_TX_PORT, LN_TX_BIT);
     ccc:	e0 91 42 02 	lds	r30, 0x0242	; 0x800242 <txPort>
     cd0:	f0 91 43 02 	lds	r31, 0x0243	; 0x800243 <txPort+0x1>
     cd4:	20 81       	ld	r18, Z
     cd6:	81 e0       	ldi	r24, 0x01	; 1
     cd8:	90 e0       	ldi	r25, 0x00	; 0
     cda:	00 90 41 02 	lds	r0, 0x0241	; 0x800241 <txPin>
     cde:	02 c0       	rjmp	.+4      	; 0xce4 <__vector_11+0x1fe>
     ce0:	88 0f       	add	r24, r24
     ce2:	99 1f       	adc	r25, r25
     ce4:	0a 94       	dec	r0
     ce6:	e2 f7       	brpl	.-8      	; 0xce0 <__vector_11+0x1fa>
     ce8:	82 2b       	or	r24, r18
     cea:	80 83       	st	Z, r24
     cec:	25 c0       	rjmp	.+74     	; 0xd38 <__vector_11+0x252>
      // ERROR_LED_ON();
    } 
    else if( lnBitCount >= LN_COLLISION_TICKS ) {
     cee:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <lnBitCount>
     cf2:	8f 30       	cpi	r24, 0x0F	; 15
     cf4:	08 f1       	brcs	.+66     	; 0xd38 <__vector_11+0x252>
      // Release the TX Line
      LN_SW_UART_SET_TX_HIGH(LN_TX_PORT, LN_TX_BIT);
     cf6:	e0 91 42 02 	lds	r30, 0x0242	; 0x800242 <txPort>
     cfa:	f0 91 43 02 	lds	r31, 0x0243	; 0x800243 <txPort+0x1>
     cfe:	20 81       	ld	r18, Z
     d00:	81 e0       	ldi	r24, 0x01	; 1
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	00 90 41 02 	lds	r0, 0x0241	; 0x800241 <txPin>
     d08:	02 c0       	rjmp	.+4      	; 0xd0e <__vector_11+0x228>
     d0a:	88 0f       	add	r24, r24
     d0c:	99 1f       	adc	r25, r25
     d0e:	0a 94       	dec	r0
     d10:	e2 f7       	brpl	.-8      	; 0xd0a <__vector_11+0x224>
     d12:	80 95       	com	r24
     d14:	82 23       	and	r24, r18
     d16:	80 83       	st	Z, r24
      // ERROR_LED_OFF();

      lnBitCount = 0 ;
     d18:	10 92 4e 02 	sts	0x024E, r1	; 0x80024e <lnBitCount>
      lnState = LN_ST_CD_BACKOFF ;
     d1c:	81 e0       	ldi	r24, 0x01	; 1
     d1e:	80 93 4f 02 	sts	0x024F, r24	; 0x80024f <lnState>

      lnRxBuffer->Stats.Collisions++ ;
     d22:	e0 91 49 02 	lds	r30, 0x0249	; 0x800249 <lnRxBuffer>
     d26:	f0 91 4a 02 	lds	r31, 0x024A	; 0x80024a <lnRxBuffer+0x1>
     d2a:	e9 5f       	subi	r30, 0xF9	; 249
     d2c:	fe 4f       	sbci	r31, 0xFE	; 254
     d2e:	80 81       	ld	r24, Z
     d30:	91 81       	ldd	r25, Z+1	; 0x01
     d32:	01 96       	adiw	r24, 0x01	; 1
     d34:	91 83       	std	Z+1, r25	; 0x01
     d36:	80 83       	st	Z, r24
    }
  }

  if( lnState == LN_ST_CD_BACKOFF ) {
     d38:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <lnState>
     d3c:	81 30       	cpi	r24, 0x01	; 1
     d3e:	a1 f4       	brne	.+40     	; 0xd68 <__vector_11+0x282>
    if( lnBitCount == 0 ) {
     d40:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <lnBitCount>
     d44:	81 11       	cpse	r24, r1
     d46:	05 c0       	rjmp	.+10     	; 0xd52 <__vector_11+0x26c>
      // Even though we are waiting, other nodes may try and transmit early
      // so Clear the Start Bit Interrupt Status Flag and Enable ready to 
      // detect the next Start Bit
      sbi( LN_SB_INT_STATUS_REG, LN_SB_INT_STATUS_BIT ) ;
     d48:	b5 9a       	sbi	0x16, 5	; 22
      sbi( LN_SB_INT_ENABLE_REG, LN_SB_INT_ENABLE_BIT ) ;
     d4a:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
     d4e:	80 62       	ori	r24, 0x20	; 32
     d50:	09 c0       	rjmp	.+18     	; 0xd64 <__vector_11+0x27e>
    } 
    else if( lnBitCount >= LN_BACKOFF_MAX ) { 
     d52:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <lnBitCount>
     d56:	88 33       	cpi	r24, 0x38	; 56
     d58:	38 f0       	brcs	.+14     	; 0xd68 <__vector_11+0x282>
      // declare network to free after maximum backoff delay
      lnState = LN_ST_IDLE ;
     d5a:	10 92 4f 02 	sts	0x024F, r1	; 0x80024f <lnState>
      cbi( LN_TMR_INT_ENABLE_REG, LN_TMR_INT_ENABLE_BIT ) ;
     d5e:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
     d62:	8d 7f       	andi	r24, 0xFD	; 253
     d64:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
    }
  }
}
     d68:	ff 91       	pop	r31
     d6a:	ef 91       	pop	r30
     d6c:	bf 91       	pop	r27
     d6e:	af 91       	pop	r26
     d70:	9f 91       	pop	r25
     d72:	8f 91       	pop	r24
     d74:	4f 91       	pop	r20
     d76:	3f 91       	pop	r19
     d78:	2f 91       	pop	r18
     d7a:	0f 90       	pop	r0
     d7c:	0f be       	out	0x3f, r0	; 63
     d7e:	0f 90       	pop	r0
     d80:	1f 90       	pop	r1
     d82:	18 95       	reti

00000d84 <_Z19initLocoNetHardwareP5LnBuf>:


void initLocoNetHardware( LnBuf *RxBuffer )
{
  lnRxBuffer = RxBuffer ;
     d84:	90 93 4a 02 	sts	0x024A, r25	; 0x80024a <lnRxBuffer+0x1>
     d88:	80 93 49 02 	sts	0x0249, r24	; 0x800249 <lnRxBuffer>

  // Set the RX line to Input
  cbi( LN_RX_DDR, LN_RX_BIT ) ;
     d8c:	20 98       	cbi	0x04, 0	; 4

  // Set the TX line to Inactive
  LN_SW_UART_SET_TX_HIGH(LN_TX_PORT, LN_TX_BIT);
     d8e:	e0 91 42 02 	lds	r30, 0x0242	; 0x800242 <txPort>
     d92:	f0 91 43 02 	lds	r31, 0x0243	; 0x800243 <txPort+0x1>
     d96:	20 81       	ld	r18, Z
     d98:	81 e0       	ldi	r24, 0x01	; 1
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	00 90 41 02 	lds	r0, 0x0241	; 0x800241 <txPin>
     da0:	02 c0       	rjmp	.+4      	; 0xda6 <_Z19initLocoNetHardwareP5LnBuf+0x22>
     da2:	88 0f       	add	r24, r24
     da4:	99 1f       	adc	r25, r25
     da6:	0a 94       	dec	r0
     da8:	e2 f7       	brpl	.-8      	; 0xda2 <_Z19initLocoNetHardwareP5LnBuf+0x1e>
     daa:	80 95       	com	r24
     dac:	82 23       	and	r24, r18
     dae:	80 83       	st	Z, r24

#ifdef LN_INIT_COMPARATOR
  LN_INIT_COMPARATOR();	
     db0:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
     db4:	e1 e8       	ldi	r30, 0x81	; 129
     db6:	f0 e0       	ldi	r31, 0x00	; 0
     db8:	81 e0       	ldi	r24, 0x01	; 1
     dba:	80 83       	st	Z, r24
  // tional four system clock cycles of delay from a change applied to the input, to the update of the 
  // ICRn Register. The noise canceler uses the system clock and is therefore not affected by the 
  // prescaler.
  TCCR1B |= (1<<ICNC1) ;    		// Enable Noise Canceler 
#endif
  lnState = LN_ST_IDLE ;
     dbc:	10 92 4f 02 	sts	0x024F, r1	; 0x80024f <lnState>
  //Clear StartBit Interrupt flag
  sbi( LN_SB_INT_STATUS_REG, LN_SB_INT_STATUS_BIT );
     dc0:	b5 9a       	sbi	0x16, 5	; 22
  //Enable StartBit Interrupt
  sbi( LN_SB_INT_ENABLE_REG, LN_SB_INT_ENABLE_BIT );
     dc2:	af e6       	ldi	r26, 0x6F	; 111
     dc4:	b0 e0       	ldi	r27, 0x00	; 0
     dc6:	8c 91       	ld	r24, X
     dc8:	80 62       	ori	r24, 0x20	; 32
     dca:	8c 93       	st	X, r24
  //Set rising edge for StartBit if signal is inverted
#ifdef LN_SW_UART_RX_INVERTED  
  sbi(LN_SB_EDGE_CFG_REG, LN_SB_EDGE_BIT);
#endif
  // Set Timer Clock Source 
  LN_TMR_CONTROL_REG = (LN_TMR_CONTROL_REG & 0xF8) | LN_TMR_PRESCALER;
     dcc:	80 81       	ld	r24, Z
     dce:	88 7f       	andi	r24, 0xF8	; 248
     dd0:	81 60       	ori	r24, 0x01	; 1
     dd2:	80 83       	st	Z, r24
     dd4:	08 95       	ret

00000dd6 <_Z20sendLocoNetPacketTryP5lnMsgh>:
}


LN_STATUS sendLocoNetPacketTry(lnMsg *TxData, unsigned char ucPrioDelay)
{
     dd6:	1f 93       	push	r17
     dd8:	cf 93       	push	r28
     dda:	df 93       	push	r29
     ddc:	ec 01       	movw	r28, r24
     dde:	16 2f       	mov	r17, r22
  uint8_t  CheckSum ;
  uint8_t  CheckLength ;

  lnTxLength = getLnMsgSize( TxData ) ;
     de0:	0e 94 2d 05 	call	0xa5a	; 0xa5a <getLnMsgSize>
     de4:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <lnTxLength>

  // First calculate the checksum as it may not have been done
  CheckLength = lnTxLength - 1 ;
     de8:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <lnTxLength>
     dec:	81 50       	subi	r24, 0x01	; 1
  CheckSum = 0xFF ;

  for ( lnTxIndex = 0; lnTxIndex < CheckLength; lnTxIndex++ ) {
     dee:	10 92 46 02 	sts	0x0246, r1	; 0x800246 <lnTxIndex>

  lnTxLength = getLnMsgSize( TxData ) ;

  // First calculate the checksum as it may not have been done
  CheckLength = lnTxLength - 1 ;
  CheckSum = 0xFF ;
     df2:	9f ef       	ldi	r25, 0xFF	; 255

  for ( lnTxIndex = 0; lnTxIndex < CheckLength; lnTxIndex++ ) {
     df4:	20 91 46 02 	lds	r18, 0x0246	; 0x800246 <lnTxIndex>
     df8:	28 17       	cp	r18, r24
     dfa:	68 f4       	brcc	.+26     	; 0xe16 <_Z20sendLocoNetPacketTryP5lnMsgh+0x40>
    CheckSum ^= TxData->data[ lnTxIndex ] ;
     dfc:	20 91 46 02 	lds	r18, 0x0246	; 0x800246 <lnTxIndex>
     e00:	fe 01       	movw	r30, r28
     e02:	e2 0f       	add	r30, r18
     e04:	f1 1d       	adc	r31, r1
     e06:	20 81       	ld	r18, Z
     e08:	92 27       	eor	r25, r18

  // First calculate the checksum as it may not have been done
  CheckLength = lnTxLength - 1 ;
  CheckSum = 0xFF ;

  for ( lnTxIndex = 0; lnTxIndex < CheckLength; lnTxIndex++ ) {
     e0a:	20 91 46 02 	lds	r18, 0x0246	; 0x800246 <lnTxIndex>
     e0e:	2f 5f       	subi	r18, 0xFF	; 255
     e10:	20 93 46 02 	sts	0x0246, r18	; 0x800246 <lnTxIndex>
     e14:	ef cf       	rjmp	.-34     	; 0xdf4 <_Z20sendLocoNetPacketTryP5lnMsgh+0x1e>
    CheckSum ^= TxData->data[ lnTxIndex ] ;
  }

  TxData->data[ CheckLength ] = CheckSum ;
     e16:	fe 01       	movw	r30, r28
     e18:	e8 0f       	add	r30, r24
     e1a:	f1 1d       	adc	r31, r1
     e1c:	90 83       	st	Z, r25
  // clip maximum prio delay
  if (ucPrioDelay > LN_BACKOFF_MAX) {
    ucPrioDelay = LN_BACKOFF_MAX;
  }
  // if priority delay was waited now, declare net as free for this try
  cli();  // disabling interrupt to avoid confusion by ISR changing lnState while we want to do it
     e1e:	f8 94       	cli
  if (lnState == LN_ST_CD_BACKOFF) {
     e20:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <lnState>
     e24:	81 30       	cpi	r24, 0x01	; 1
     e26:	79 f4       	brne	.+30     	; 0xe46 <_Z20sendLocoNetPacketTryP5lnMsgh+0x70>
    if (lnBitCount >= ucPrioDelay) {	// Likely we don't want to wait as long as
     e28:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <lnBitCount>
     e2c:	61 2f       	mov	r22, r17
     e2e:	19 33       	cpi	r17, 0x39	; 57
     e30:	08 f0       	brcs	.+2      	; 0xe34 <_Z20sendLocoNetPacketTryP5lnMsgh+0x5e>
     e32:	68 e3       	ldi	r22, 0x38	; 56
     e34:	86 17       	cp	r24, r22
     e36:	38 f0       	brcs	.+14     	; 0xe46 <_Z20sendLocoNetPacketTryP5lnMsgh+0x70>
      lnState = LN_ST_IDLE;			// the timer ISR waits its maximum delay.
     e38:	10 92 4f 02 	sts	0x024F, r1	; 0x80024f <lnState>
      cbi( LN_TMR_INT_ENABLE_REG, LN_TMR_INT_ENABLE_BIT ) ;
     e3c:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
     e40:	8d 7f       	andi	r24, 0xFD	; 253
     e42:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
    }
  }
  sei();  // a delayed start bit interrupt will happen now,
     e46:	78 94       	sei
  // a delayed timer interrupt was stalled

  // If the Network is not Idle, don't start the packet
  if (lnState == LN_ST_CD_BACKOFF) {
     e48:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <lnState>
     e4c:	81 30       	cpi	r24, 0x01	; 1
     e4e:	39 f4       	brne	.+14     	; 0xe5e <_Z20sendLocoNetPacketTryP5lnMsgh+0x88>
    if (lnBitCount < LN_CARRIER_TICKS) {  // in carrier detect timer?
     e50:	90 91 4e 02 	lds	r25, 0x024E	; 0x80024e <lnBitCount>
      return LN_CD_BACKOFF;
     e54:	94 31       	cpi	r25, 0x14	; 20
     e56:	08 f0       	brcs	.+2      	; 0xe5a <_Z20sendLocoNetPacketTryP5lnMsgh+0x84>
     e58:	6c c0       	rjmp	.+216    	; 0xf32 <_Z20sendLocoNetPacketTryP5lnMsgh+0x15c>
     e5a:	80 e0       	ldi	r24, 0x00	; 0
     e5c:	6a c0       	rjmp	.+212    	; 0xf32 <_Z20sendLocoNetPacketTryP5lnMsgh+0x15c>
    else {
      return LN_PRIO_BACKOFF;
    }
  }

  if( lnState != LN_ST_IDLE ) {
     e5e:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <lnState>
     e62:	81 11       	cpse	r24, r1
     e64:	63 c0       	rjmp	.+198    	; 0xf2c <_Z20sendLocoNetPacketTryP5lnMsgh+0x156>
    return LN_NETWORK_BUSY;  // neither idle nor backoff -> busy
  }
  // We need to do this with interrupts off.
  // The last time we check for free net until sending our start bit
  // must be as short as possible, not interrupted.
  cli() ;
     e66:	f8 94       	cli
  // Before we do anything else - Disable StartBit Interrupt
  cbi( LN_SB_INT_ENABLE_REG, LN_SB_INT_ENABLE_BIT ) ;
     e68:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
     e6c:	8f 7d       	andi	r24, 0xDF	; 223
     e6e:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
  if (bit_is_set(LN_SB_INT_STATUS_REG, LN_SB_INT_STATUS_BIT)) {
     e72:	b5 9b       	sbis	0x16, 5	; 22
     e74:	07 c0       	rjmp	.+14     	; 0xe84 <_Z20sendLocoNetPacketTryP5lnMsgh+0xae>
    // first we disabled it, than before sending the start bit, we found out
    // that somebody was faster by examining the start bit interrupt request flag
    sbi( LN_SB_INT_ENABLE_REG, LN_SB_INT_ENABLE_BIT ) ;
     e76:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
     e7a:	80 62       	ori	r24, 0x20	; 32
     e7c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
    sei() ;  // receive now what our rival is sending
     e80:	78 94       	sei
     e82:	54 c0       	rjmp	.+168    	; 0xf2c <_Z20sendLocoNetPacketTryP5lnMsgh+0x156>
    return LN_NETWORK_BUSY;
  }

  LN_SW_UART_SET_TX_LOW(LN_TX_PORT, LN_TX_BIT);        // Begin the Start Bit
     e84:	e0 91 42 02 	lds	r30, 0x0242	; 0x800242 <txPort>
     e88:	f0 91 43 02 	lds	r31, 0x0243	; 0x800243 <txPort+0x1>
     e8c:	20 81       	ld	r18, Z
     e8e:	81 e0       	ldi	r24, 0x01	; 1
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	00 90 41 02 	lds	r0, 0x0241	; 0x800241 <txPin>
     e96:	02 c0       	rjmp	.+4      	; 0xe9c <_Z20sendLocoNetPacketTryP5lnMsgh+0xc6>
     e98:	88 0f       	add	r24, r24
     e9a:	99 1f       	adc	r25, r25
     e9c:	0a 94       	dec	r0
     e9e:	e2 f7       	brpl	.-8      	; 0xe98 <_Z20sendLocoNetPacketTryP5lnMsgh+0xc2>
     ea0:	82 2b       	or	r24, r18
     ea2:	80 83       	st	Z, r24

  // Get the Current Timer1 Count and Add the offset for the Compare target
  // added adjustment value for bugfix (Olaf Funke)
  lnCompareTarget = LN_TMR_COUNT_REG + LN_TIMER_TX_RELOAD_PERIOD - LN_TIMER_TX_RELOAD_ADJUST;
     ea4:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     ea8:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     eac:	8a 58       	subi	r24, 0x8A	; 138
     eae:	9e 4f       	sbci	r25, 0xFE	; 254
     eb0:	90 93 4c 02 	sts	0x024C, r25	; 0x80024c <lnCompareTarget+0x1>
     eb4:	80 93 4b 02 	sts	0x024B, r24	; 0x80024b <lnCompareTarget>
  LN_TMR_OUTP_CAPT_REG = lnCompareTarget ;
     eb8:	80 91 4b 02 	lds	r24, 0x024B	; 0x80024b <lnCompareTarget>
     ebc:	90 91 4c 02 	lds	r25, 0x024C	; 0x80024c <lnCompareTarget+0x1>
     ec0:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     ec4:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>

  sei() ;  // Interrupts back on ...
     ec8:	78 94       	sei

  lnTxData = TxData ;
     eca:	d0 93 48 02 	sts	0x0248, r29	; 0x800248 <lnTxData+0x1>
     ece:	c0 93 47 02 	sts	0x0247, r28	; 0x800247 <lnTxData>
  lnTxIndex = 0 ;
     ed2:	10 92 46 02 	sts	0x0246, r1	; 0x800246 <lnTxIndex>
  lnTxSuccess = 0 ;
     ed6:	10 92 44 02 	sts	0x0244, r1	; 0x800244 <lnTxSuccess>

  // Load the first Byte
  lnCurrentByte = TxData->data[ 0 ] ;
     eda:	88 81       	ld	r24, Y
     edc:	80 93 4d 02 	sts	0x024D, r24	; 0x80024d <lnCurrentByte>

  // Set the State to Transmit
  lnState = LN_ST_TX ;                      
     ee0:	83 e0       	ldi	r24, 0x03	; 3
     ee2:	80 93 4f 02 	sts	0x024F, r24	; 0x80024f <lnState>

  // Reset the bit counter
  lnBitCount = 0 ;                          
     ee6:	10 92 4e 02 	sts	0x024E, r1	; 0x80024e <lnBitCount>

  // Clear the current Compare interrupt status bit and enable the Compare interrupt
  sbi(LN_TMR_INT_STATUS_REG, LN_TMR_INT_STATUS_BIT) ;
     eea:	b1 9a       	sbi	0x16, 1	; 22
  sbi(LN_TMR_INT_ENABLE_REG, LN_TMR_INT_ENABLE_BIT) ; 
     eec:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
     ef0:	82 60       	ori	r24, 0x02	; 2
     ef2:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>

  while (lnState == LN_ST_TX) {
     ef6:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <lnState>
     efa:	83 30       	cpi	r24, 0x03	; 3
     efc:	e1 f3       	breq	.-8      	; 0xef6 <_Z20sendLocoNetPacketTryP5lnMsgh+0x120>
    // now busy wait until the interrupts do the rest
  }
  if (lnTxSuccess) {
     efe:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <lnTxSuccess>
     f02:	88 23       	and	r24, r24
     f04:	69 f0       	breq	.+26     	; 0xf20 <_Z20sendLocoNetPacketTryP5lnMsgh+0x14a>
    lnRxBuffer->Stats.TxPackets++ ;
     f06:	e0 91 49 02 	lds	r30, 0x0249	; 0x800249 <lnRxBuffer>
     f0a:	f0 91 4a 02 	lds	r31, 0x024A	; 0x80024a <lnRxBuffer+0x1>
     f0e:	ed 5f       	subi	r30, 0xFD	; 253
     f10:	fe 4f       	sbci	r31, 0xFE	; 254
     f12:	80 81       	ld	r24, Z
     f14:	91 81       	ldd	r25, Z+1	; 0x01
     f16:	01 96       	adiw	r24, 0x01	; 1
     f18:	91 83       	std	Z+1, r25	; 0x01
     f1a:	80 83       	st	Z, r24
    return LN_DONE;
     f1c:	83 e0       	ldi	r24, 0x03	; 3
     f1e:	09 c0       	rjmp	.+18     	; 0xf32 <_Z20sendLocoNetPacketTryP5lnMsgh+0x15c>
  }
  if (lnState == LN_ST_TX_COLLISION) {
     f20:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <lnState>
     f24:	82 30       	cpi	r24, 0x02	; 2
     f26:	21 f0       	breq	.+8      	; 0xf30 <_Z20sendLocoNetPacketTryP5lnMsgh+0x15a>
    return LN_COLLISION;
  }
  return LN_UNKNOWN_ERROR; // everything else is an error
     f28:	85 e0       	ldi	r24, 0x05	; 5
     f2a:	03 c0       	rjmp	.+6      	; 0xf32 <_Z20sendLocoNetPacketTryP5lnMsgh+0x15c>
      return LN_PRIO_BACKOFF;
    }
  }

  if( lnState != LN_ST_IDLE ) {
    return LN_NETWORK_BUSY;  // neither idle nor backoff -> busy
     f2c:	82 e0       	ldi	r24, 0x02	; 2
     f2e:	01 c0       	rjmp	.+2      	; 0xf32 <_Z20sendLocoNetPacketTryP5lnMsgh+0x15c>
  if (lnTxSuccess) {
    lnRxBuffer->Stats.TxPackets++ ;
    return LN_DONE;
  }
  if (lnState == LN_ST_TX_COLLISION) {
    return LN_COLLISION;
     f30:	84 e0       	ldi	r24, 0x04	; 4
  }
  return LN_UNKNOWN_ERROR; // everything else is an error
}
     f32:	df 91       	pop	r29
     f34:	cf 91       	pop	r28
     f36:	1f 91       	pop	r17
     f38:	08 95       	ret

00000f3a <_GLOBAL__sub_I_uart>:
#include "TrafficControl\Timer.h"
#include "TrafficControl\Logic.h"
#include "TrafficControl\LocoPacket.h"
#include "TrafficControl/Wire/src/Wire.h"

UART uart;
     f3a:	8b e6       	ldi	r24, 0x6B	; 107
     f3c:	92 e0       	ldi	r25, 0x02	; 2
     f3e:	0e 94 44 02 	call	0x488	; 0x488 <_ZN4UARTC1Ev>
Timer timer;
     f42:	88 e6       	ldi	r24, 0x68	; 104
     f44:	92 e0       	ldi	r25, 0x02	; 2
     f46:	0e 94 05 02 	call	0x40a	; 0x40a <_ZN5TimerC1Ev>
LocoPacket loco;
     f4a:	80 e5       	ldi	r24, 0x50	; 80
     f4c:	92 e0       	ldi	r25, 0x02	; 2
     f4e:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <_ZN10LocoPacketC1Ev>

00000f52 <_ZL15ina219_writeReghj>:


const uint8_t INA219_ADDR = 0x40;

static void ina219_writeReg(uint8_t reg, uint16_t val) {
     f52:	1f 93       	push	r17
     f54:	cf 93       	push	r28
     f56:	df 93       	push	r29
     f58:	18 2f       	mov	r17, r24
     f5a:	eb 01       	movw	r28, r22
    Wire.beginTransmission(INA219_ADDR);
     f5c:	60 e4       	ldi	r22, 0x40	; 64
     f5e:	8f ef       	ldi	r24, 0xFF	; 255
     f60:	92 e0       	ldi	r25, 0x02	; 2
     f62:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <_ZN7TwoWire17beginTransmissionEh>
    Wire.write(reg);
     f66:	61 2f       	mov	r22, r17
     f68:	8f ef       	ldi	r24, 0xFF	; 255
     f6a:	92 e0       	ldi	r25, 0x02	; 2
     f6c:	0e 94 97 0b 	call	0x172e	; 0x172e <_ZN7TwoWire5writeEh>
    Wire.write((uint8_t)(val >> 8));
     f70:	6d 2f       	mov	r22, r29
     f72:	8f ef       	ldi	r24, 0xFF	; 255
     f74:	92 e0       	ldi	r25, 0x02	; 2
     f76:	0e 94 97 0b 	call	0x172e	; 0x172e <_ZN7TwoWire5writeEh>
    Wire.write((uint8_t)val);
     f7a:	6c 2f       	mov	r22, r28
     f7c:	8f ef       	ldi	r24, 0xFF	; 255
     f7e:	92 e0       	ldi	r25, 0x02	; 2
     f80:	0e 94 97 0b 	call	0x172e	; 0x172e <_ZN7TwoWire5writeEh>
    Wire.endTransmission();
     f84:	8f ef       	ldi	r24, 0xFF	; 255
     f86:	92 e0       	ldi	r25, 0x02	; 2
}
     f88:	df 91       	pop	r29
     f8a:	cf 91       	pop	r28
     f8c:	1f 91       	pop	r17
static void ina219_writeReg(uint8_t reg, uint16_t val) {
    Wire.beginTransmission(INA219_ADDR);
    Wire.write(reg);
    Wire.write((uint8_t)(val >> 8));
    Wire.write((uint8_t)val);
    Wire.endTransmission();
     f8e:	0c 94 6c 0c 	jmp	0x18d8	; 0x18d8 <_ZN7TwoWire15endTransmissionEv>

00000f92 <setup>:
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     f92:	26 e0       	ldi	r18, 0x06	; 6
     f94:	40 e8       	ldi	r20, 0x80	; 128
     f96:	55 e2       	ldi	r21, 0x25	; 37
     f98:	60 e0       	ldi	r22, 0x00	; 0
     f9a:	70 e0       	ldi	r23, 0x00	; 0
     f9c:	85 e5       	ldi	r24, 0x55	; 85
     f9e:	93 e0       	ldi	r25, 0x03	; 3
     fa0:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <_ZN14HardwareSerial5beginEmh>
}


void setup() {
    Serial.begin(9600);
    LocoNet.init(9);
     fa4:	69 e0       	ldi	r22, 0x09	; 9
     fa6:	88 e3       	ldi	r24, 0x38	; 56
     fa8:	91 e0       	ldi	r25, 0x01	; 1
     faa:	0e 94 c8 03 	call	0x790	; 0x790 <_ZN12LocoNetClass4initEh>
    uart.print(PSTR("Test Board %d\n"), ADDR_BOARD);
     fae:	1f 92       	push	r1
     fb0:	1f 92       	push	r1
     fb2:	8d e3       	ldi	r24, 0x3D	; 61
     fb4:	91 e0       	ldi	r25, 0x01	; 1
     fb6:	9f 93       	push	r25
     fb8:	8f 93       	push	r24
     fba:	8b e6       	ldi	r24, 0x6B	; 107
     fbc:	92 e0       	ldi	r25, 0x02	; 2
     fbe:	9f 93       	push	r25
     fc0:	8f 93       	push	r24
     fc2:	0e 94 4b 02 	call	0x496	; 0x496 <_ZN4UART5printEPKcz>
    loco.send_B2_hello();
     fc6:	80 e5       	ldi	r24, 0x50	; 80
     fc8:	92 e0       	ldi	r25, 0x02	; 2
     fca:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <_ZN10LocoPacket13send_B2_helloEv>
    uint16_t v = ((uint16_t)Wire.read() << 8) | Wire.read();
    return v;
}

static void ina219_init() {
    Wire.begin();
     fce:	8f ef       	ldi	r24, 0xFF	; 255
     fd0:	92 e0       	ldi	r25, 0x02	; 2
     fd2:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <_ZN7TwoWire5beginEv>
    // РљРѕРЅС„РёРіСѓСЂР°С†РёСЏ: 32V, 320mV, 12-bit, continuous
    ina219_writeReg(0x00, 0x019F);
     fd6:	6f e9       	ldi	r22, 0x9F	; 159
     fd8:	71 e0       	ldi	r23, 0x01	; 1
     fda:	80 e0       	ldi	r24, 0x00	; 0
     fdc:	0e 94 a9 07 	call	0xf52	; 0xf52 <_ZL15ina219_writeReghj>
    // РљР°Р»РёР±СЂРѕРІРєР° (РїСЂРёРјРµСЂ РґР»СЏ С€СѓРЅС‚Р° 0.1 РћРј Рё РјР°РєСЃ ~3.2Рђ)
    // CAL = 4096 (0x1000) СѓСЃР»РѕРІРЅРѕ; РїРѕРґСЃС‚СЂРѕР№С‚Рµ РїРѕРґ РІР°С€ С€СѓРЅС‚.
    ina219_writeReg(0x05, 0x1000);
     fe0:	0f 90       	pop	r0
     fe2:	0f 90       	pop	r0
     fe4:	0f 90       	pop	r0
     fe6:	0f 90       	pop	r0
     fe8:	0f 90       	pop	r0
     fea:	0f 90       	pop	r0
     fec:	60 e0       	ldi	r22, 0x00	; 0
     fee:	70 e1       	ldi	r23, 0x10	; 16
     ff0:	85 e0       	ldi	r24, 0x05	; 5
     ff2:	0c 94 a9 07 	jmp	0xf52	; 0xf52 <_ZL15ina219_writeReghj>

00000ff6 <_ZL14ina219_readRegh>:
    Wire.write((uint8_t)(val >> 8));
    Wire.write((uint8_t)val);
    Wire.endTransmission();
}

static uint16_t ina219_readReg(uint8_t reg) {
     ff6:	cf 93       	push	r28
     ff8:	c8 2f       	mov	r28, r24
    Wire.beginTransmission(INA219_ADDR);
     ffa:	60 e4       	ldi	r22, 0x40	; 64
     ffc:	8f ef       	ldi	r24, 0xFF	; 255
     ffe:	92 e0       	ldi	r25, 0x02	; 2
    1000:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <_ZN7TwoWire17beginTransmissionEh>
    Wire.write(reg);
    1004:	6c 2f       	mov	r22, r28
    1006:	8f ef       	ldi	r24, 0xFF	; 255
    1008:	92 e0       	ldi	r25, 0x02	; 2
    100a:	0e 94 97 0b 	call	0x172e	; 0x172e <_ZN7TwoWire5writeEh>
    Wire.endTransmission(false);
    100e:	60 e0       	ldi	r22, 0x00	; 0
    1010:	8f ef       	ldi	r24, 0xFF	; 255
    1012:	92 e0       	ldi	r25, 0x02	; 2
    1014:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <_ZN7TwoWire15endTransmissionEh>
    Wire.requestFrom(INA219_ADDR, (uint8_t)2);
    1018:	42 e0       	ldi	r20, 0x02	; 2
    101a:	60 e4       	ldi	r22, 0x40	; 64
    101c:	8f ef       	ldi	r24, 0xFF	; 255
    101e:	92 e0       	ldi	r25, 0x02	; 2
    1020:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <_ZN7TwoWire11requestFromEhh>
    uint16_t v = ((uint16_t)Wire.read() << 8) | Wire.read();
    1024:	8f ef       	ldi	r24, 0xFF	; 255
    1026:	92 e0       	ldi	r25, 0x02	; 2
    1028:	0e 94 10 0b 	call	0x1620	; 0x1620 <_ZN7TwoWire4readEv>
    102c:	c8 2f       	mov	r28, r24
    102e:	8f ef       	ldi	r24, 0xFF	; 255
    1030:	92 e0       	ldi	r25, 0x02	; 2
    1032:	0e 94 10 0b 	call	0x1620	; 0x1620 <_ZN7TwoWire4readEv>
    return v;
    1036:	20 e0       	ldi	r18, 0x00	; 0
    1038:	30 e0       	ldi	r19, 0x00	; 0
    103a:	3c 2f       	mov	r19, r28
}
    103c:	82 2b       	or	r24, r18
    103e:	93 2b       	or	r25, r19
    1040:	cf 91       	pop	r28
    1042:	08 95       	ret

00001044 <loop>:
    uart.print(PSTR("Test Board %d\n"), ADDR_BOARD);
    loco.send_B2_hello();
    ina219_init();
}

void loop() {
    1044:	af 92       	push	r10
    1046:	bf 92       	push	r11
    1048:	cf 92       	push	r12
    104a:	df 92       	push	r13
    104c:	ef 92       	push	r14
    104e:	ff 92       	push	r15
    1050:	0f 93       	push	r16
    1052:	1f 93       	push	r17
    1054:	cf 93       	push	r28
    1056:	df 93       	push	r29
    uart.read();
    1058:	8b e6       	ldi	r24, 0x6B	; 107
    105a:	92 e0       	ldi	r25, 0x02	; 2
    105c:	0e 94 4c 03 	call	0x698	; 0x698 <_ZN4UART4readEv>
    loco.read();
    1060:	80 e5       	ldi	r24, 0x50	; 80
    1062:	92 e0       	ldi	r25, 0x02	; 2
    1064:	0e 94 8b 01 	call	0x316	; 0x316 <_ZN10LocoPacket4readEv>

    if (timer.ena_timer_1Hz) {
    1068:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <timer+0x2>
    106c:	88 23       	and	r24, r24
    106e:	09 f4       	brne	.+2      	; 0x1072 <loop+0x2e>
    1070:	6c c0       	rjmp	.+216    	; 0x114a <loop+0x106>
		uart.print(PSTR("check\n"));
    1072:	86 e3       	ldi	r24, 0x36	; 54
    1074:	91 e0       	ldi	r25, 0x01	; 1
    1076:	9f 93       	push	r25
    1078:	8f 93       	push	r24
    107a:	0b e6       	ldi	r16, 0x6B	; 107
    107c:	12 e0       	ldi	r17, 0x02	; 2
    107e:	1f 93       	push	r17
    1080:	0f 93       	push	r16
    1082:	0e 94 4b 02 	call	0x496	; 0x496 <_ZN4UART5printEPKcz>
        logic_timer_1Hz();
    1086:	0e 94 04 02 	call	0x408	; 0x408 <_Z15logic_timer_1Hzv>
    // CAL = 4096 (0x1000) СѓСЃР»РѕРІРЅРѕ; РїРѕРґСЃС‚СЂРѕР№С‚Рµ РїРѕРґ РІР°С€ С€СѓРЅС‚.
    ina219_writeReg(0x05, 0x1000);
}

static void ina219_readAndPrint() {
    int16_t shunt_raw = (int16_t)ina219_readReg(0x01);      // 10uV/LSB
    108a:	81 e0       	ldi	r24, 0x01	; 1
    108c:	0e 94 fb 07 	call	0xff6	; 0xff6 <_ZL14ina219_readRegh>
    1090:	5c 01       	movw	r10, r24
    uint16_t bus_raw   = ina219_readReg(0x02);              // 4mV/LSB, Р±РёС‚0..2 status
    1092:	82 e0       	ldi	r24, 0x02	; 2
    1094:	0e 94 fb 07 	call	0xff6	; 0xff6 <_ZL14ina219_readRegh>
    1098:	ec 01       	movw	r28, r24
    int16_t power_raw  = (int16_t)ina219_readReg(0x03);     // Р·Р°РІРёСЃРёС‚ РѕС‚ CAL
    109a:	83 e0       	ldi	r24, 0x03	; 3
    109c:	0e 94 fb 07 	call	0xff6	; 0xff6 <_ZL14ina219_readRegh>
    10a0:	6c 01       	movw	r12, r24
    int16_t current_raw= (int16_t)ina219_readReg(0x04);     // Р·Р°РІРёСЃРёС‚ РѕС‚ CAL
    10a2:	84 e0       	ldi	r24, 0x04	; 4
    10a4:	0e 94 fb 07 	call	0xff6	; 0xff6 <_ZL14ina219_readRegh>
    10a8:	7c 01       	movw	r14, r24
    float current_mA = current_raw * 1.0f;
    // Power СЂРµРіРёСЃС‚СЂ РѕР±С‹С‡РЅРѕ 20 * current_LSB
    float power_mW = power_raw * 20.0f * 1.0f;              // РµСЃР»Рё 1mA/LSB

    uart.print(PSTR("INA219: V=%.2fV I=%.1fmA P=%.0fmW Vsh=%.2fmV\n"),
               bus_V, current_mA, power_mW, shunt_mV);
    10aa:	b5 01       	movw	r22, r10
    10ac:	bb 0c       	add	r11, r11
    10ae:	88 0b       	sbc	r24, r24
    10b0:	99 0b       	sbc	r25, r25
    10b2:	0e 94 75 0c 	call	0x18ea	; 0x18ea <__floatsisf>
    10b6:	2a e0       	ldi	r18, 0x0A	; 10
    10b8:	37 ed       	ldi	r19, 0xD7	; 215
    10ba:	43 e2       	ldi	r20, 0x23	; 35
    10bc:	5c e3       	ldi	r21, 0x3C	; 60
    10be:	0e 94 b0 0c 	call	0x1960	; 0x1960 <__mulsf3>
    10c2:	9f 93       	push	r25
    10c4:	8f 93       	push	r24
    10c6:	7f 93       	push	r23
    10c8:	6f 93       	push	r22
    10ca:	b6 01       	movw	r22, r12
    10cc:	dd 0c       	add	r13, r13
    10ce:	88 0b       	sbc	r24, r24
    10d0:	99 0b       	sbc	r25, r25
    10d2:	0e 94 75 0c 	call	0x18ea	; 0x18ea <__floatsisf>
    10d6:	20 e0       	ldi	r18, 0x00	; 0
    10d8:	30 e0       	ldi	r19, 0x00	; 0
    10da:	40 ea       	ldi	r20, 0xA0	; 160
    10dc:	51 e4       	ldi	r21, 0x41	; 65
    10de:	0e 94 b0 0c 	call	0x1960	; 0x1960 <__mulsf3>
    10e2:	9f 93       	push	r25
    10e4:	8f 93       	push	r24
    10e6:	7f 93       	push	r23
    10e8:	6f 93       	push	r22
    10ea:	b7 01       	movw	r22, r14
    10ec:	ff 0c       	add	r15, r15
    10ee:	88 0b       	sbc	r24, r24
    10f0:	99 0b       	sbc	r25, r25
    10f2:	0e 94 75 0c 	call	0x18ea	; 0x18ea <__floatsisf>
    10f6:	9f 93       	push	r25
    10f8:	8f 93       	push	r24
    10fa:	7f 93       	push	r23
    10fc:	6f 93       	push	r22
    10fe:	be 01       	movw	r22, r28
    1100:	83 e0       	ldi	r24, 0x03	; 3
    1102:	76 95       	lsr	r23
    1104:	67 95       	ror	r22
    1106:	8a 95       	dec	r24
    1108:	e1 f7       	brne	.-8      	; 0x1102 <loop+0xbe>
    110a:	80 e0       	ldi	r24, 0x00	; 0
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <__floatunsisf>
    1112:	2f e6       	ldi	r18, 0x6F	; 111
    1114:	32 e1       	ldi	r19, 0x12	; 18
    1116:	43 e8       	ldi	r20, 0x83	; 131
    1118:	5b e3       	ldi	r21, 0x3B	; 59
    111a:	0e 94 b0 0c 	call	0x1960	; 0x1960 <__mulsf3>
    111e:	9f 93       	push	r25
    1120:	8f 93       	push	r24
    1122:	7f 93       	push	r23
    1124:	6f 93       	push	r22
    1126:	88 e0       	ldi	r24, 0x08	; 8
    1128:	91 e0       	ldi	r25, 0x01	; 1
    112a:	9f 93       	push	r25
    112c:	8f 93       	push	r24
    112e:	1f 93       	push	r17
    1130:	0f 93       	push	r16
    1132:	0e 94 4b 02 	call	0x496	; 0x496 <_ZN4UART5printEPKcz>

    if (timer.ena_timer_1Hz) {
		uart.print(PSTR("check\n"));
        logic_timer_1Hz();
        ina219_readAndPrint();
        timer.ena_timer_1Hz = false;
    1136:	10 92 6a 02 	sts	0x026A, r1	; 0x80026a <timer+0x2>
    113a:	8d b7       	in	r24, 0x3d	; 61
    113c:	9e b7       	in	r25, 0x3e	; 62
    113e:	48 96       	adiw	r24, 0x18	; 24
    1140:	0f b6       	in	r0, 0x3f	; 63
    1142:	f8 94       	cli
    1144:	9e bf       	out	0x3e, r25	; 62
    1146:	0f be       	out	0x3f, r0	; 63
    1148:	8d bf       	out	0x3d, r24	; 61
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    114a:	9f ef       	ldi	r25, 0xFF	; 255
    114c:	20 e7       	ldi	r18, 0x70	; 112
    114e:	82 e0       	ldi	r24, 0x02	; 2
    1150:	91 50       	subi	r25, 0x01	; 1
    1152:	20 40       	sbci	r18, 0x00	; 0
    1154:	80 40       	sbci	r24, 0x00	; 0
    1156:	e1 f7       	brne	.-8      	; 0x1150 <loop+0x10c>
    1158:	00 c0       	rjmp	.+0      	; 0x115a <loop+0x116>
    115a:	00 00       	nop
    }
	_delay_ms(100);
    115c:	df 91       	pop	r29
    115e:	cf 91       	pop	r28
    1160:	1f 91       	pop	r17
    1162:	0f 91       	pop	r16
    1164:	ff 90       	pop	r15
    1166:	ef 90       	pop	r14
    1168:	df 90       	pop	r13
    116a:	cf 90       	pop	r12
    116c:	bf 90       	pop	r11
    116e:	af 90       	pop	r10
    1170:	08 95       	ret

00001172 <twi_init>:
 * Output   none
 */
void twi_setTimeoutInMicros(uint32_t timeout, bool reset_with_timeout){
  twi_timed_out_flag = false;
  twi_timeout_us = timeout;
  twi_do_reset_on_timeout = reset_with_timeout;
    1172:	10 92 fe 02 	sts	0x02FE, r1	; 0x8002fe <twi_state>
    1176:	81 e0       	ldi	r24, 0x01	; 1
    1178:	80 93 fc 02 	sts	0x02FC, r24	; 0x8002fc <twi_sendStop>
    117c:	10 92 fb 02 	sts	0x02FB, r1	; 0x8002fb <twi_inRepStart>
    1180:	61 e0       	ldi	r22, 0x01	; 1
    1182:	82 e1       	ldi	r24, 0x12	; 18
    1184:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <digitalWrite>
    1188:	61 e0       	ldi	r22, 0x01	; 1
    118a:	83 e1       	ldi	r24, 0x13	; 19
    118c:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <digitalWrite>
    1190:	e9 eb       	ldi	r30, 0xB9	; 185
    1192:	f0 e0       	ldi	r31, 0x00	; 0
    1194:	80 81       	ld	r24, Z
    1196:	8e 7f       	andi	r24, 0xFE	; 254
    1198:	80 83       	st	Z, r24
    119a:	80 81       	ld	r24, Z
    119c:	8d 7f       	andi	r24, 0xFD	; 253
    119e:	80 83       	st	Z, r24
    11a0:	80 e2       	ldi	r24, 0x20	; 32
    11a2:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
    11a6:	85 e4       	ldi	r24, 0x45	; 69
    11a8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    11ac:	08 95       	ret

000011ae <twi_disable>:
    11ae:	ec eb       	ldi	r30, 0xBC	; 188
    11b0:	f0 e0       	ldi	r31, 0x00	; 0
    11b2:	80 81       	ld	r24, Z
    11b4:	8a 7b       	andi	r24, 0xBA	; 186
    11b6:	80 83       	st	Z, r24
    11b8:	60 e0       	ldi	r22, 0x00	; 0
    11ba:	82 e1       	ldi	r24, 0x12	; 18
    11bc:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <digitalWrite>
    11c0:	60 e0       	ldi	r22, 0x00	; 0
    11c2:	83 e1       	ldi	r24, 0x13	; 19
    11c4:	0c 94 d4 10 	jmp	0x21a8	; 0x21a8 <digitalWrite>

000011c8 <twi_transmit>:
    11c8:	40 91 ae 02 	lds	r20, 0x02AE	; 0x8002ae <twi_txBufferLength>
    11cc:	26 2f       	mov	r18, r22
    11ce:	30 e0       	ldi	r19, 0x00	; 0
    11d0:	24 0f       	add	r18, r20
    11d2:	31 1d       	adc	r19, r1
    11d4:	21 32       	cpi	r18, 0x21	; 33
    11d6:	31 05       	cpc	r19, r1
    11d8:	dc f4       	brge	.+54     	; 0x1210 <twi_transmit+0x48>
    11da:	20 91 fe 02 	lds	r18, 0x02FE	; 0x8002fe <twi_state>
    11de:	24 30       	cpi	r18, 0x04	; 4
    11e0:	c9 f4       	brne	.+50     	; 0x1214 <twi_transmit+0x4c>
    11e2:	fc 01       	movw	r30, r24
    11e4:	80 e0       	ldi	r24, 0x00	; 0
    11e6:	90 e0       	ldi	r25, 0x00	; 0
    11e8:	86 17       	cp	r24, r22
    11ea:	58 f4       	brcc	.+22     	; 0x1202 <twi_transmit+0x3a>
    11ec:	30 91 ae 02 	lds	r19, 0x02AE	; 0x8002ae <twi_txBufferLength>
    11f0:	21 91       	ld	r18, Z+
    11f2:	dc 01       	movw	r26, r24
    11f4:	a1 55       	subi	r26, 0x51	; 81
    11f6:	bd 4f       	sbci	r27, 0xFD	; 253
    11f8:	a3 0f       	add	r26, r19
    11fa:	b1 1d       	adc	r27, r1
    11fc:	2c 93       	st	X, r18
    11fe:	01 96       	adiw	r24, 0x01	; 1
    1200:	f3 cf       	rjmp	.-26     	; 0x11e8 <twi_transmit+0x20>
    1202:	80 91 ae 02 	lds	r24, 0x02AE	; 0x8002ae <twi_txBufferLength>
    1206:	68 0f       	add	r22, r24
    1208:	60 93 ae 02 	sts	0x02AE, r22	; 0x8002ae <twi_txBufferLength>
    120c:	80 e0       	ldi	r24, 0x00	; 0
    120e:	08 95       	ret
    1210:	81 e0       	ldi	r24, 0x01	; 1
    1212:	08 95       	ret
    1214:	82 e0       	ldi	r24, 0x02	; 2
    1216:	08 95       	ret

00001218 <twi_attachSlaveRxEvent>:
    1218:	90 93 f2 02 	sts	0x02F2, r25	; 0x8002f2 <twi_onSlaveReceive+0x1>
    121c:	80 93 f1 02 	sts	0x02F1, r24	; 0x8002f1 <twi_onSlaveReceive>
    1220:	08 95       	ret

00001222 <twi_attachSlaveTxEvent>:
    1222:	90 93 f4 02 	sts	0x02F4, r25	; 0x8002f4 <twi_onSlaveTransmit+0x1>
    1226:	80 93 f3 02 	sts	0x02F3, r24	; 0x8002f3 <twi_onSlaveTransmit>
    122a:	08 95       	ret

0000122c <twi_handleTimeout>:
 * Desc     this gets called whenever a while loop here has lasted longer than
 *          twi_timeout_us microseconds. always sets twi_timed_out_flag
 * Input    reset: true causes this function to reset the twi hardware interface
 * Output   none
 */
void twi_handleTimeout(bool reset){
    122c:	cf 93       	push	r28
    122e:	df 93       	push	r29
  twi_timed_out_flag = true;
    1230:	91 e0       	ldi	r25, 0x01	; 1
    1232:	90 93 f6 02 	sts	0x02F6, r25	; 0x8002f6 <twi_timed_out_flag>

  if (reset) {
    1236:	88 23       	and	r24, r24
    1238:	61 f0       	breq	.+24     	; 0x1252 <twi_handleTimeout+0x26>
    // remember bitrate and address settings
    uint8_t previous_TWBR = TWBR;
    123a:	c0 91 b8 00 	lds	r28, 0x00B8	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
    uint8_t previous_TWAR = TWAR;
    123e:	d0 91 ba 00 	lds	r29, 0x00BA	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>

    // reset the interface
    twi_disable();
    1242:	0e 94 d7 08 	call	0x11ae	; 0x11ae <twi_disable>
    twi_init();
    1246:	0e 94 b9 08 	call	0x1172	; 0x1172 <twi_init>

    // reapply the previous register values
    TWAR = previous_TWAR;
    124a:	d0 93 ba 00 	sts	0x00BA, r29	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>
    TWBR = previous_TWBR;
    124e:	c0 93 b8 00 	sts	0x00B8, r28	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
  }
}
    1252:	df 91       	pop	r29
    1254:	cf 91       	pop	r28
    1256:	08 95       	ret

00001258 <twi_readFrom>:
 *          length: number of bytes to read into array
 *          sendStop: Boolean indicating whether to send a stop at the end
 * Output   number of bytes read
 */
uint8_t twi_readFrom(uint8_t address, uint8_t* data, uint8_t length, uint8_t sendStop)
{
    1258:	4f 92       	push	r4
    125a:	5f 92       	push	r5
    125c:	6f 92       	push	r6
    125e:	7f 92       	push	r7
    1260:	8f 92       	push	r8
    1262:	9f 92       	push	r9
    1264:	af 92       	push	r10
    1266:	bf 92       	push	r11
    1268:	cf 92       	push	r12
    126a:	df 92       	push	r13
    126c:	ef 92       	push	r14
    126e:	ff 92       	push	r15
    1270:	0f 93       	push	r16
    1272:	1f 93       	push	r17
    1274:	cf 93       	push	r28
    1276:	df 93       	push	r29
    1278:	f8 2e       	mov	r15, r24
    127a:	16 2f       	mov	r17, r22
    127c:	07 2f       	mov	r16, r23
    127e:	c4 2f       	mov	r28, r20
    1280:	e2 2e       	mov	r14, r18
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    1282:	41 32       	cpi	r20, 0x21	; 33
    1284:	08 f0       	brcs	.+2      	; 0x1288 <twi_readFrom+0x30>
    1286:	be c0       	rjmp	.+380    	; 0x1404 <twi_readFrom+0x1ac>
    return 0;
  }

  // wait until twi is ready, become master receiver
  uint32_t startMicros = micros();
    1288:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <micros>
    128c:	4b 01       	movw	r8, r22
    128e:	5c 01       	movw	r10, r24
  while(TWI_READY != twi_state){
    1290:	d0 91 fe 02 	lds	r29, 0x02FE	; 0x8002fe <twi_state>
    1294:	dd 23       	and	r29, r29
    1296:	31 f1       	breq	.+76     	; 0x12e4 <twi_readFrom+0x8c>
    if((twi_timeout_us > 0ul) && ((micros() - startMicros) > twi_timeout_us)) {
    1298:	80 91 f7 02 	lds	r24, 0x02F7	; 0x8002f7 <twi_timeout_us>
    129c:	90 91 f8 02 	lds	r25, 0x02F8	; 0x8002f8 <twi_timeout_us+0x1>
    12a0:	a0 91 f9 02 	lds	r26, 0x02F9	; 0x8002f9 <twi_timeout_us+0x2>
    12a4:	b0 91 fa 02 	lds	r27, 0x02FA	; 0x8002fa <twi_timeout_us+0x3>
    12a8:	89 2b       	or	r24, r25
    12aa:	8a 2b       	or	r24, r26
    12ac:	8b 2b       	or	r24, r27
    12ae:	81 f3       	breq	.-32     	; 0x1290 <twi_readFrom+0x38>
    12b0:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <micros>
    12b4:	40 90 f7 02 	lds	r4, 0x02F7	; 0x8002f7 <twi_timeout_us>
    12b8:	50 90 f8 02 	lds	r5, 0x02F8	; 0x8002f8 <twi_timeout_us+0x1>
    12bc:	60 90 f9 02 	lds	r6, 0x02F9	; 0x8002f9 <twi_timeout_us+0x2>
    12c0:	70 90 fa 02 	lds	r7, 0x02FA	; 0x8002fa <twi_timeout_us+0x3>
    12c4:	dc 01       	movw	r26, r24
    12c6:	cb 01       	movw	r24, r22
    12c8:	88 19       	sub	r24, r8
    12ca:	99 09       	sbc	r25, r9
    12cc:	aa 09       	sbc	r26, r10
    12ce:	bb 09       	sbc	r27, r11
    12d0:	48 16       	cp	r4, r24
    12d2:	59 06       	cpc	r5, r25
    12d4:	6a 06       	cpc	r6, r26
    12d6:	7b 06       	cpc	r7, r27
    12d8:	d8 f6       	brcc	.-74     	; 0x1290 <twi_readFrom+0x38>
      twi_handleTimeout(twi_do_reset_on_timeout);
    12da:	80 91 f5 02 	lds	r24, 0x02F5	; 0x8002f5 <twi_do_reset_on_timeout>
    12de:	0e 94 16 09 	call	0x122c	; 0x122c <twi_handleTimeout>
    12e2:	90 c0       	rjmp	.+288    	; 0x1404 <twi_readFrom+0x1ac>
      return 0;
    }
  }
  twi_state = TWI_MRX;
    12e4:	81 e0       	ldi	r24, 0x01	; 1
    12e6:	80 93 fe 02 	sts	0x02FE, r24	; 0x8002fe <twi_state>
  twi_sendStop = sendStop;
    12ea:	e0 92 fc 02 	sts	0x02FC, r14	; 0x8002fc <twi_sendStop>
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
    12ee:	9f ef       	ldi	r25, 0xFF	; 255
    12f0:	90 93 ad 02 	sts	0x02AD, r25	; 0x8002ad <twi_error>

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
    12f4:	10 92 d0 02 	sts	0x02D0, r1	; 0x8002d0 <twi_masterBufferIndex>
  twi_masterBufferLength = length-1;  // This is not intuitive, read on...
    12f8:	9c 0f       	add	r25, r28
    12fa:	90 93 cf 02 	sts	0x02CF, r25	; 0x8002cf <twi_masterBufferLength>
  // Therefor we must actually set NACK when the _next_ to last byte is
  // received, causing that NACK to be sent in response to receiving the last
  // expected byte of data.

  // build sla+w, slave device address + w bit
  twi_slarw = TW_READ;
    12fe:	80 93 fd 02 	sts	0x02FD, r24	; 0x8002fd <twi_slarw>
  twi_slarw |= address << 1;
    1302:	90 91 fd 02 	lds	r25, 0x02FD	; 0x8002fd <twi_slarw>
    1306:	8f 2d       	mov	r24, r15
    1308:	88 0f       	add	r24, r24
    130a:	89 2b       	or	r24, r25
    130c:	80 93 fd 02 	sts	0x02FD, r24	; 0x8002fd <twi_slarw>

  if (true == twi_inRepStart) {
    1310:	80 91 fb 02 	lds	r24, 0x02FB	; 0x8002fb <twi_inRepStart>
    1314:	81 30       	cpi	r24, 0x01	; 1
    1316:	89 f5       	brne	.+98     	; 0x137a <twi_readFrom+0x122>
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent ourselves, and that would really confuse things.
    twi_inRepStart = false;			// remember, we're dealing with an ASYNC ISR
    1318:	10 92 fb 02 	sts	0x02FB, r1	; 0x8002fb <twi_inRepStart>
    startMicros = micros();
    131c:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <micros>
    1320:	6b 01       	movw	r12, r22
    1322:	7c 01       	movw	r14, r24
    do {
      TWDR = twi_slarw;
    1324:	80 91 fd 02 	lds	r24, 0x02FD	; 0x8002fd <twi_slarw>
    1328:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
      if((twi_timeout_us > 0ul) && ((micros() - startMicros) > twi_timeout_us)) {
    132c:	80 91 f7 02 	lds	r24, 0x02F7	; 0x8002f7 <twi_timeout_us>
    1330:	90 91 f8 02 	lds	r25, 0x02F8	; 0x8002f8 <twi_timeout_us+0x1>
    1334:	a0 91 f9 02 	lds	r26, 0x02F9	; 0x8002f9 <twi_timeout_us+0x2>
    1338:	b0 91 fa 02 	lds	r27, 0x02FA	; 0x8002fa <twi_timeout_us+0x3>
    133c:	89 2b       	or	r24, r25
    133e:	8a 2b       	or	r24, r26
    1340:	8b 2b       	or	r24, r27
    1342:	a9 f0       	breq	.+42     	; 0x136e <twi_readFrom+0x116>
    1344:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <micros>
    1348:	80 90 f7 02 	lds	r8, 0x02F7	; 0x8002f7 <twi_timeout_us>
    134c:	90 90 f8 02 	lds	r9, 0x02F8	; 0x8002f8 <twi_timeout_us+0x1>
    1350:	a0 90 f9 02 	lds	r10, 0x02F9	; 0x8002f9 <twi_timeout_us+0x2>
    1354:	b0 90 fa 02 	lds	r11, 0x02FA	; 0x8002fa <twi_timeout_us+0x3>
    1358:	dc 01       	movw	r26, r24
    135a:	cb 01       	movw	r24, r22
    135c:	8c 19       	sub	r24, r12
    135e:	9d 09       	sbc	r25, r13
    1360:	ae 09       	sbc	r26, r14
    1362:	bf 09       	sbc	r27, r15
    1364:	88 16       	cp	r8, r24
    1366:	99 06       	cpc	r9, r25
    1368:	aa 06       	cpc	r10, r26
    136a:	bb 06       	cpc	r11, r27
    136c:	90 f1       	brcs	.+100    	; 0x13d2 <twi_readFrom+0x17a>
        twi_handleTimeout(twi_do_reset_on_timeout);
        return 0;
      }
    } while(TWCR & _BV(TWWC));
    136e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    1372:	83 fd       	sbrc	r24, 3
    1374:	d7 cf       	rjmp	.-82     	; 0x1324 <twi_readFrom+0xcc>
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);	// enable INTs, but not START
    1376:	85 ec       	ldi	r24, 0xC5	; 197
    1378:	01 c0       	rjmp	.+2      	; 0x137c <twi_readFrom+0x124>
  } else {
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
    137a:	85 ee       	ldi	r24, 0xE5	; 229
    137c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  }

  // wait for read operation to complete
  startMicros = micros();
    1380:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <micros>
    1384:	6b 01       	movw	r12, r22
    1386:	7c 01       	movw	r14, r24
  while(TWI_MRX == twi_state){
    1388:	80 91 fe 02 	lds	r24, 0x02FE	; 0x8002fe <twi_state>
    138c:	81 30       	cpi	r24, 0x01	; 1
    138e:	31 f5       	brne	.+76     	; 0x13dc <twi_readFrom+0x184>
    if((twi_timeout_us > 0ul) && ((micros() - startMicros) > twi_timeout_us)) {
    1390:	80 91 f7 02 	lds	r24, 0x02F7	; 0x8002f7 <twi_timeout_us>
    1394:	90 91 f8 02 	lds	r25, 0x02F8	; 0x8002f8 <twi_timeout_us+0x1>
    1398:	a0 91 f9 02 	lds	r26, 0x02F9	; 0x8002f9 <twi_timeout_us+0x2>
    139c:	b0 91 fa 02 	lds	r27, 0x02FA	; 0x8002fa <twi_timeout_us+0x3>
    13a0:	89 2b       	or	r24, r25
    13a2:	8a 2b       	or	r24, r26
    13a4:	8b 2b       	or	r24, r27
    13a6:	81 f3       	breq	.-32     	; 0x1388 <twi_readFrom+0x130>
    13a8:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <micros>
    13ac:	80 90 f7 02 	lds	r8, 0x02F7	; 0x8002f7 <twi_timeout_us>
    13b0:	90 90 f8 02 	lds	r9, 0x02F8	; 0x8002f8 <twi_timeout_us+0x1>
    13b4:	a0 90 f9 02 	lds	r10, 0x02F9	; 0x8002f9 <twi_timeout_us+0x2>
    13b8:	b0 90 fa 02 	lds	r11, 0x02FA	; 0x8002fa <twi_timeout_us+0x3>
    13bc:	dc 01       	movw	r26, r24
    13be:	cb 01       	movw	r24, r22
    13c0:	8c 19       	sub	r24, r12
    13c2:	9d 09       	sbc	r25, r13
    13c4:	ae 09       	sbc	r26, r14
    13c6:	bf 09       	sbc	r27, r15
    13c8:	88 16       	cp	r8, r24
    13ca:	99 06       	cpc	r9, r25
    13cc:	aa 06       	cpc	r10, r26
    13ce:	bb 06       	cpc	r11, r27
    13d0:	d8 f6       	brcc	.-74     	; 0x1388 <twi_readFrom+0x130>
      twi_handleTimeout(twi_do_reset_on_timeout);
    13d2:	80 91 f5 02 	lds	r24, 0x02F5	; 0x8002f5 <twi_do_reset_on_timeout>
    13d6:	0e 94 16 09 	call	0x122c	; 0x122c <twi_handleTimeout>
      return 0;
    13da:	15 c0       	rjmp	.+42     	; 0x1406 <twi_readFrom+0x1ae>
    }
  }

  if (twi_masterBufferIndex < length) {
    13dc:	80 91 d0 02 	lds	r24, 0x02D0	; 0x8002d0 <twi_masterBufferIndex>
    13e0:	8c 17       	cp	r24, r28
    13e2:	10 f4       	brcc	.+4      	; 0x13e8 <twi_readFrom+0x190>
    length = twi_masterBufferIndex;
    13e4:	c0 91 d0 02 	lds	r28, 0x02D0	; 0x8002d0 <twi_masterBufferIndex>
    13e8:	a1 ed       	ldi	r26, 0xD1	; 209
    13ea:	b2 e0       	ldi	r27, 0x02	; 2
    13ec:	91 2f       	mov	r25, r17
  }

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    13ee:	e1 2f       	mov	r30, r17
    13f0:	f0 2f       	mov	r31, r16
    13f2:	8e 2f       	mov	r24, r30
    13f4:	89 1b       	sub	r24, r25
    13f6:	8c 17       	cp	r24, r28
    13f8:	18 f4       	brcc	.+6      	; 0x1400 <twi_readFrom+0x1a8>
    data[i] = twi_masterBuffer[i];
    13fa:	8d 91       	ld	r24, X+
    13fc:	81 93       	st	Z+, r24
    13fe:	f9 cf       	rjmp	.-14     	; 0x13f2 <twi_readFrom+0x19a>
    1400:	dc 2f       	mov	r29, r28
    1402:	01 c0       	rjmp	.+2      	; 0x1406 <twi_readFrom+0x1ae>
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    return 0;
    1404:	d0 e0       	ldi	r29, 0x00	; 0
  for(i = 0; i < length; ++i){
    data[i] = twi_masterBuffer[i];
  }

  return length;
}
    1406:	8d 2f       	mov	r24, r29
    1408:	df 91       	pop	r29
    140a:	cf 91       	pop	r28
    140c:	1f 91       	pop	r17
    140e:	0f 91       	pop	r16
    1410:	ff 90       	pop	r15
    1412:	ef 90       	pop	r14
    1414:	df 90       	pop	r13
    1416:	cf 90       	pop	r12
    1418:	bf 90       	pop	r11
    141a:	af 90       	pop	r10
    141c:	9f 90       	pop	r9
    141e:	8f 90       	pop	r8
    1420:	7f 90       	pop	r7
    1422:	6f 90       	pop	r6
    1424:	5f 90       	pop	r5
    1426:	4f 90       	pop	r4
    1428:	08 95       	ret

0000142a <twi_writeTo>:
 *          3 .. data send, NACK received
 *          4 .. other twi error (lost bus arbitration, bus error, ..)
 *          5 .. timeout
 */
uint8_t twi_writeTo(uint8_t address, uint8_t* data, uint8_t length, uint8_t wait, uint8_t sendStop)
{
    142a:	4f 92       	push	r4
    142c:	5f 92       	push	r5
    142e:	6f 92       	push	r6
    1430:	7f 92       	push	r7
    1432:	8f 92       	push	r8
    1434:	9f 92       	push	r9
    1436:	af 92       	push	r10
    1438:	bf 92       	push	r11
    143a:	cf 92       	push	r12
    143c:	df 92       	push	r13
    143e:	ef 92       	push	r14
    1440:	ff 92       	push	r15
    1442:	0f 93       	push	r16
    1444:	1f 93       	push	r17
    1446:	cf 93       	push	r28
    1448:	df 93       	push	r29
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    144a:	41 32       	cpi	r20, 0x21	; 33
    144c:	08 f0       	brcs	.+2      	; 0x1450 <twi_writeTo+0x26>
    144e:	c6 c0       	rjmp	.+396    	; 0x15dc <twi_writeTo+0x1b2>
    1450:	12 2f       	mov	r17, r18
    1452:	f4 2e       	mov	r15, r20
    1454:	d7 2e       	mov	r13, r23
    1456:	e6 2e       	mov	r14, r22
    1458:	d8 2f       	mov	r29, r24
    return 1;
  }

  // wait until twi is ready, become master transmitter
  uint32_t startMicros = micros();
    145a:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <micros>
    145e:	4b 01       	movw	r8, r22
    1460:	5c 01       	movw	r10, r24
  while(TWI_READY != twi_state){
    1462:	c0 91 fe 02 	lds	r28, 0x02FE	; 0x8002fe <twi_state>
    1466:	cc 23       	and	r28, r28
    1468:	11 f1       	breq	.+68     	; 0x14ae <twi_writeTo+0x84>
    if((twi_timeout_us > 0ul) && ((micros() - startMicros) > twi_timeout_us)) {
    146a:	80 91 f7 02 	lds	r24, 0x02F7	; 0x8002f7 <twi_timeout_us>
    146e:	90 91 f8 02 	lds	r25, 0x02F8	; 0x8002f8 <twi_timeout_us+0x1>
    1472:	a0 91 f9 02 	lds	r26, 0x02F9	; 0x8002f9 <twi_timeout_us+0x2>
    1476:	b0 91 fa 02 	lds	r27, 0x02FA	; 0x8002fa <twi_timeout_us+0x3>
    147a:	89 2b       	or	r24, r25
    147c:	8a 2b       	or	r24, r26
    147e:	8b 2b       	or	r24, r27
    1480:	81 f3       	breq	.-32     	; 0x1462 <twi_writeTo+0x38>
    1482:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <micros>
    1486:	40 90 f7 02 	lds	r4, 0x02F7	; 0x8002f7 <twi_timeout_us>
    148a:	50 90 f8 02 	lds	r5, 0x02F8	; 0x8002f8 <twi_timeout_us+0x1>
    148e:	60 90 f9 02 	lds	r6, 0x02F9	; 0x8002f9 <twi_timeout_us+0x2>
    1492:	70 90 fa 02 	lds	r7, 0x02FA	; 0x8002fa <twi_timeout_us+0x3>
    1496:	dc 01       	movw	r26, r24
    1498:	cb 01       	movw	r24, r22
    149a:	88 19       	sub	r24, r8
    149c:	99 09       	sbc	r25, r9
    149e:	aa 09       	sbc	r26, r10
    14a0:	bb 09       	sbc	r27, r11
    14a2:	48 16       	cp	r4, r24
    14a4:	59 06       	cpc	r5, r25
    14a6:	6a 06       	cpc	r6, r26
    14a8:	7b 06       	cpc	r7, r27
    14aa:	d8 f6       	brcc	.-74     	; 0x1462 <twi_writeTo+0x38>
    14ac:	83 c0       	rjmp	.+262    	; 0x15b4 <twi_writeTo+0x18a>
      twi_handleTimeout(twi_do_reset_on_timeout);
      return (5);
    }
  }
  twi_state = TWI_MTX;
    14ae:	82 e0       	ldi	r24, 0x02	; 2
    14b0:	80 93 fe 02 	sts	0x02FE, r24	; 0x8002fe <twi_state>
  twi_sendStop = sendStop;
    14b4:	00 93 fc 02 	sts	0x02FC, r16	; 0x8002fc <twi_sendStop>
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
    14b8:	8f ef       	ldi	r24, 0xFF	; 255
    14ba:	80 93 ad 02 	sts	0x02AD, r24	; 0x8002ad <twi_error>

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
    14be:	10 92 d0 02 	sts	0x02D0, r1	; 0x8002d0 <twi_masterBufferIndex>
  twi_masterBufferLength = length;
    14c2:	f0 92 cf 02 	sts	0x02CF, r15	; 0x8002cf <twi_masterBufferLength>
    14c6:	9e 2d       	mov	r25, r14
    14c8:	a1 ed       	ldi	r26, 0xD1	; 209
    14ca:	b2 e0       	ldi	r27, 0x02	; 2
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    14cc:	ee 2d       	mov	r30, r14
    14ce:	fd 2d       	mov	r31, r13
    14d0:	8e 2f       	mov	r24, r30
    14d2:	89 1b       	sub	r24, r25
    14d4:	8f 15       	cp	r24, r15
    14d6:	18 f4       	brcc	.+6      	; 0x14de <twi_writeTo+0xb4>
    twi_masterBuffer[i] = data[i];
    14d8:	81 91       	ld	r24, Z+
    14da:	8d 93       	st	X+, r24
    14dc:	f9 cf       	rjmp	.-14     	; 0x14d0 <twi_writeTo+0xa6>
  }
  
  // build sla+w, slave device address + w bit
  twi_slarw = TW_WRITE;
    14de:	10 92 fd 02 	sts	0x02FD, r1	; 0x8002fd <twi_slarw>
  twi_slarw |= address << 1;
    14e2:	90 91 fd 02 	lds	r25, 0x02FD	; 0x8002fd <twi_slarw>
    14e6:	dd 0f       	add	r29, r29
    14e8:	d9 2b       	or	r29, r25
    14ea:	d0 93 fd 02 	sts	0x02FD, r29	; 0x8002fd <twi_slarw>
  
  // if we're in a repeated start, then we've already sent the START
  // in the ISR. Don't do it again.
  //
  if (true == twi_inRepStart) {
    14ee:	80 91 fb 02 	lds	r24, 0x02FB	; 0x8002fb <twi_inRepStart>
    14f2:	81 30       	cpi	r24, 0x01	; 1
    14f4:	89 f5       	brne	.+98     	; 0x1558 <twi_writeTo+0x12e>
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent outselves, and that would really confuse things.
    twi_inRepStart = false;			// remember, we're dealing with an ASYNC ISR
    14f6:	10 92 fb 02 	sts	0x02FB, r1	; 0x8002fb <twi_inRepStart>
    startMicros = micros();
    14fa:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <micros>
    14fe:	6b 01       	movw	r12, r22
    1500:	7c 01       	movw	r14, r24
    do {
      TWDR = twi_slarw;
    1502:	80 91 fd 02 	lds	r24, 0x02FD	; 0x8002fd <twi_slarw>
    1506:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
      if((twi_timeout_us > 0ul) && ((micros() - startMicros) > twi_timeout_us)) {
    150a:	80 91 f7 02 	lds	r24, 0x02F7	; 0x8002f7 <twi_timeout_us>
    150e:	90 91 f8 02 	lds	r25, 0x02F8	; 0x8002f8 <twi_timeout_us+0x1>
    1512:	a0 91 f9 02 	lds	r26, 0x02F9	; 0x8002f9 <twi_timeout_us+0x2>
    1516:	b0 91 fa 02 	lds	r27, 0x02FA	; 0x8002fa <twi_timeout_us+0x3>
    151a:	89 2b       	or	r24, r25
    151c:	8a 2b       	or	r24, r26
    151e:	8b 2b       	or	r24, r27
    1520:	a9 f0       	breq	.+42     	; 0x154c <twi_writeTo+0x122>
    1522:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <micros>
    1526:	80 90 f7 02 	lds	r8, 0x02F7	; 0x8002f7 <twi_timeout_us>
    152a:	90 90 f8 02 	lds	r9, 0x02F8	; 0x8002f8 <twi_timeout_us+0x1>
    152e:	a0 90 f9 02 	lds	r10, 0x02F9	; 0x8002f9 <twi_timeout_us+0x2>
    1532:	b0 90 fa 02 	lds	r11, 0x02FA	; 0x8002fa <twi_timeout_us+0x3>
    1536:	dc 01       	movw	r26, r24
    1538:	cb 01       	movw	r24, r22
    153a:	8c 19       	sub	r24, r12
    153c:	9d 09       	sbc	r25, r13
    153e:	ae 09       	sbc	r26, r14
    1540:	bf 09       	sbc	r27, r15
    1542:	88 16       	cp	r8, r24
    1544:	99 06       	cpc	r9, r25
    1546:	aa 06       	cpc	r10, r26
    1548:	bb 06       	cpc	r11, r27
    154a:	a0 f1       	brcs	.+104    	; 0x15b4 <twi_writeTo+0x18a>
        twi_handleTimeout(twi_do_reset_on_timeout);
        return (5);
      }
    } while(TWCR & _BV(TWWC));
    154c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    1550:	83 fd       	sbrc	r24, 3
    1552:	d7 cf       	rjmp	.-82     	; 0x1502 <twi_writeTo+0xd8>
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);	// enable INTs, but not START
    1554:	85 ec       	ldi	r24, 0xC5	; 197
    1556:	01 c0       	rjmp	.+2      	; 0x155a <twi_writeTo+0x130>
  } else {
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA);	// enable INTs
    1558:	85 ee       	ldi	r24, 0xE5	; 229
    155a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  }

  // wait for write operation to complete
  startMicros = micros();
    155e:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <micros>
    1562:	6b 01       	movw	r12, r22
    1564:	7c 01       	movw	r14, r24
  while(wait && (TWI_MTX == twi_state)){
    1566:	11 23       	and	r17, r17
    1568:	59 f1       	breq	.+86     	; 0x15c0 <twi_writeTo+0x196>
    156a:	80 91 fe 02 	lds	r24, 0x02FE	; 0x8002fe <twi_state>
    156e:	82 30       	cpi	r24, 0x02	; 2
    1570:	39 f5       	brne	.+78     	; 0x15c0 <twi_writeTo+0x196>
    if((twi_timeout_us > 0ul) && ((micros() - startMicros) > twi_timeout_us)) {
    1572:	80 91 f7 02 	lds	r24, 0x02F7	; 0x8002f7 <twi_timeout_us>
    1576:	90 91 f8 02 	lds	r25, 0x02F8	; 0x8002f8 <twi_timeout_us+0x1>
    157a:	a0 91 f9 02 	lds	r26, 0x02F9	; 0x8002f9 <twi_timeout_us+0x2>
    157e:	b0 91 fa 02 	lds	r27, 0x02FA	; 0x8002fa <twi_timeout_us+0x3>
    1582:	89 2b       	or	r24, r25
    1584:	8a 2b       	or	r24, r26
    1586:	8b 2b       	or	r24, r27
    1588:	71 f3       	breq	.-36     	; 0x1566 <twi_writeTo+0x13c>
    158a:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <micros>
    158e:	80 90 f7 02 	lds	r8, 0x02F7	; 0x8002f7 <twi_timeout_us>
    1592:	90 90 f8 02 	lds	r9, 0x02F8	; 0x8002f8 <twi_timeout_us+0x1>
    1596:	a0 90 f9 02 	lds	r10, 0x02F9	; 0x8002f9 <twi_timeout_us+0x2>
    159a:	b0 90 fa 02 	lds	r11, 0x02FA	; 0x8002fa <twi_timeout_us+0x3>
    159e:	dc 01       	movw	r26, r24
    15a0:	cb 01       	movw	r24, r22
    15a2:	8c 19       	sub	r24, r12
    15a4:	9d 09       	sbc	r25, r13
    15a6:	ae 09       	sbc	r26, r14
    15a8:	bf 09       	sbc	r27, r15
    15aa:	88 16       	cp	r8, r24
    15ac:	99 06       	cpc	r9, r25
    15ae:	aa 06       	cpc	r10, r26
    15b0:	bb 06       	cpc	r11, r27
    15b2:	c8 f6       	brcc	.-78     	; 0x1566 <twi_writeTo+0x13c>
      twi_handleTimeout(twi_do_reset_on_timeout);
    15b4:	80 91 f5 02 	lds	r24, 0x02F5	; 0x8002f5 <twi_do_reset_on_timeout>
    15b8:	0e 94 16 09 	call	0x122c	; 0x122c <twi_handleTimeout>
      return (5);
    15bc:	c5 e0       	ldi	r28, 0x05	; 5
    15be:	13 c0       	rjmp	.+38     	; 0x15e6 <twi_writeTo+0x1bc>
    }
  }
  
  if (twi_error == 0xFF)
    15c0:	80 91 ad 02 	lds	r24, 0x02AD	; 0x8002ad <twi_error>
    15c4:	8f 3f       	cpi	r24, 0xFF	; 255
    15c6:	79 f0       	breq	.+30     	; 0x15e6 <twi_writeTo+0x1bc>
    return 0;	// success
  else if (twi_error == TW_MT_SLA_NACK)
    15c8:	80 91 ad 02 	lds	r24, 0x02AD	; 0x8002ad <twi_error>
    15cc:	80 32       	cpi	r24, 0x20	; 32
    15ce:	41 f0       	breq	.+16     	; 0x15e0 <twi_writeTo+0x1b6>
    return 2;	// error: address send, nack received
  else if (twi_error == TW_MT_DATA_NACK)
    15d0:	80 91 ad 02 	lds	r24, 0x02AD	; 0x8002ad <twi_error>
    15d4:	80 33       	cpi	r24, 0x30	; 48
    15d6:	31 f0       	breq	.+12     	; 0x15e4 <twi_writeTo+0x1ba>
    return 3;	// error: data send, nack received
  else
    return 4;	// other twi error
    15d8:	c4 e0       	ldi	r28, 0x04	; 4
    15da:	05 c0       	rjmp	.+10     	; 0x15e6 <twi_writeTo+0x1bc>
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    return 1;
    15dc:	c1 e0       	ldi	r28, 0x01	; 1
    15de:	03 c0       	rjmp	.+6      	; 0x15e6 <twi_writeTo+0x1bc>
  }
  
  if (twi_error == 0xFF)
    return 0;	// success
  else if (twi_error == TW_MT_SLA_NACK)
    return 2;	// error: address send, nack received
    15e0:	c2 e0       	ldi	r28, 0x02	; 2
    15e2:	01 c0       	rjmp	.+2      	; 0x15e6 <twi_writeTo+0x1bc>
  else if (twi_error == TW_MT_DATA_NACK)
    return 3;	// error: data send, nack received
    15e4:	c3 e0       	ldi	r28, 0x03	; 3
  else
    return 4;	// other twi error
}
    15e6:	8c 2f       	mov	r24, r28
    15e8:	df 91       	pop	r29
    15ea:	cf 91       	pop	r28
    15ec:	1f 91       	pop	r17
    15ee:	0f 91       	pop	r16
    15f0:	ff 90       	pop	r15
    15f2:	ef 90       	pop	r14
    15f4:	df 90       	pop	r13
    15f6:	cf 90       	pop	r12
    15f8:	bf 90       	pop	r11
    15fa:	af 90       	pop	r10
    15fc:	9f 90       	pop	r9
    15fe:	8f 90       	pop	r8
    1600:	7f 90       	pop	r7
    1602:	6f 90       	pop	r6
    1604:	5f 90       	pop	r5
    1606:	4f 90       	pop	r4
    1608:	08 95       	ret

0000160a <_ZN5Print17availableForWriteEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    160a:	80 e0       	ldi	r24, 0x00	; 0
    160c:	90 e0       	ldi	r25, 0x00	; 0
    160e:	08 95       	ret

00001610 <_ZN7TwoWire9availableEv>:
    1610:	80 91 33 03 	lds	r24, 0x0333	; 0x800333 <_ZN7TwoWire14rxBufferLengthE>
    1614:	90 e0       	ldi	r25, 0x00	; 0
    1616:	20 91 34 03 	lds	r18, 0x0334	; 0x800334 <_ZN7TwoWire13rxBufferIndexE>
    161a:	82 1b       	sub	r24, r18
    161c:	91 09       	sbc	r25, r1
    161e:	08 95       	ret

00001620 <_ZN7TwoWire4readEv>:
    1620:	90 91 34 03 	lds	r25, 0x0334	; 0x800334 <_ZN7TwoWire13rxBufferIndexE>
    1624:	80 91 33 03 	lds	r24, 0x0333	; 0x800333 <_ZN7TwoWire14rxBufferLengthE>
    1628:	98 17       	cp	r25, r24
    162a:	50 f4       	brcc	.+20     	; 0x1640 <_ZN7TwoWire4readEv+0x20>
    162c:	e9 2f       	mov	r30, r25
    162e:	f0 e0       	ldi	r31, 0x00	; 0
    1630:	eb 5c       	subi	r30, 0xCB	; 203
    1632:	fc 4f       	sbci	r31, 0xFC	; 252
    1634:	20 81       	ld	r18, Z
    1636:	30 e0       	ldi	r19, 0x00	; 0
    1638:	9f 5f       	subi	r25, 0xFF	; 255
    163a:	90 93 34 03 	sts	0x0334, r25	; 0x800334 <_ZN7TwoWire13rxBufferIndexE>
    163e:	02 c0       	rjmp	.+4      	; 0x1644 <_ZN7TwoWire4readEv+0x24>
    1640:	2f ef       	ldi	r18, 0xFF	; 255
    1642:	3f ef       	ldi	r19, 0xFF	; 255
    1644:	c9 01       	movw	r24, r18
    1646:	08 95       	ret

00001648 <_ZN7TwoWire4peekEv>:
    1648:	e0 91 34 03 	lds	r30, 0x0334	; 0x800334 <_ZN7TwoWire13rxBufferIndexE>
    164c:	80 91 33 03 	lds	r24, 0x0333	; 0x800333 <_ZN7TwoWire14rxBufferLengthE>
    1650:	e8 17       	cp	r30, r24
    1652:	30 f4       	brcc	.+12     	; 0x1660 <_ZN7TwoWire4peekEv+0x18>
    1654:	f0 e0       	ldi	r31, 0x00	; 0
    1656:	eb 5c       	subi	r30, 0xCB	; 203
    1658:	fc 4f       	sbci	r31, 0xFC	; 252
    165a:	80 81       	ld	r24, Z
    165c:	90 e0       	ldi	r25, 0x00	; 0
    165e:	08 95       	ret
    1660:	8f ef       	ldi	r24, 0xFF	; 255
    1662:	9f ef       	ldi	r25, 0xFF	; 255
    1664:	08 95       	ret

00001666 <_ZN7TwoWire5flushEv>:
    1666:	08 95       	ret

00001668 <_ZN7TwoWire16onReceiveServiceEPhi>:
    1668:	cf 93       	push	r28
    166a:	df 93       	push	r29
    166c:	ec 01       	movw	r28, r24
    166e:	e0 91 0b 03 	lds	r30, 0x030B	; 0x80030b <_ZN7TwoWire14user_onReceiveE>
    1672:	f0 91 0c 03 	lds	r31, 0x030C	; 0x80030c <_ZN7TwoWire14user_onReceiveE+0x1>
    1676:	30 97       	sbiw	r30, 0x00	; 0
    1678:	f1 f0       	breq	.+60     	; 0x16b6 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    167a:	90 91 34 03 	lds	r25, 0x0334	; 0x800334 <_ZN7TwoWire13rxBufferIndexE>
    167e:	80 91 33 03 	lds	r24, 0x0333	; 0x800333 <_ZN7TwoWire14rxBufferLengthE>
    1682:	98 17       	cp	r25, r24
    1684:	c0 f0       	brcs	.+48     	; 0x16b6 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    1686:	90 e0       	ldi	r25, 0x00	; 0
    1688:	29 2f       	mov	r18, r25
    168a:	30 e0       	ldi	r19, 0x00	; 0
    168c:	26 17       	cp	r18, r22
    168e:	37 07       	cpc	r19, r23
    1690:	54 f4       	brge	.+20     	; 0x16a6 <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    1692:	de 01       	movw	r26, r28
    1694:	a2 0f       	add	r26, r18
    1696:	b3 1f       	adc	r27, r19
    1698:	4c 91       	ld	r20, X
    169a:	d9 01       	movw	r26, r18
    169c:	ab 5c       	subi	r26, 0xCB	; 203
    169e:	bc 4f       	sbci	r27, 0xFC	; 252
    16a0:	4c 93       	st	X, r20
    16a2:	9f 5f       	subi	r25, 0xFF	; 255
    16a4:	f1 cf       	rjmp	.-30     	; 0x1688 <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    16a6:	10 92 34 03 	sts	0x0334, r1	; 0x800334 <_ZN7TwoWire13rxBufferIndexE>
    16aa:	60 93 33 03 	sts	0x0333, r22	; 0x800333 <_ZN7TwoWire14rxBufferLengthE>
    16ae:	cb 01       	movw	r24, r22
    16b0:	df 91       	pop	r29
    16b2:	cf 91       	pop	r28
    16b4:	09 94       	ijmp
    16b6:	df 91       	pop	r29
    16b8:	cf 91       	pop	r28
    16ba:	08 95       	ret

000016bc <_ZN7TwoWire16onRequestServiceEv>:
    16bc:	e0 91 0d 03 	lds	r30, 0x030D	; 0x80030d <_ZN7TwoWire14user_onRequestE>
    16c0:	f0 91 0e 03 	lds	r31, 0x030E	; 0x80030e <_ZN7TwoWire14user_onRequestE+0x1>
    16c4:	30 97       	sbiw	r30, 0x00	; 0
    16c6:	29 f0       	breq	.+10     	; 0x16d2 <_ZN7TwoWire16onRequestServiceEv+0x16>
    16c8:	10 92 11 03 	sts	0x0311, r1	; 0x800311 <_ZN7TwoWire13txBufferIndexE>
    16cc:	10 92 10 03 	sts	0x0310, r1	; 0x800310 <_ZN7TwoWire14txBufferLengthE>
    16d0:	09 94       	ijmp
    16d2:	08 95       	ret

000016d4 <_ZN7TwoWire5writeEPKhj>:
    16d4:	cf 92       	push	r12
    16d6:	df 92       	push	r13
    16d8:	ef 92       	push	r14
    16da:	ff 92       	push	r15
    16dc:	0f 93       	push	r16
    16de:	1f 93       	push	r17
    16e0:	cf 93       	push	r28
    16e2:	df 93       	push	r29
    16e4:	7c 01       	movw	r14, r24
    16e6:	cb 01       	movw	r24, r22
    16e8:	8a 01       	movw	r16, r20
    16ea:	20 91 0f 03 	lds	r18, 0x030F	; 0x80030f <_ZN7TwoWire12transmittingE>
    16ee:	22 23       	and	r18, r18
    16f0:	89 f0       	breq	.+34     	; 0x1714 <_ZN7TwoWire5writeEPKhj+0x40>
    16f2:	eb 01       	movw	r28, r22
    16f4:	6b 01       	movw	r12, r22
    16f6:	c4 0e       	add	r12, r20
    16f8:	d5 1e       	adc	r13, r21
    16fa:	cc 15       	cp	r28, r12
    16fc:	dd 05       	cpc	r29, r13
    16fe:	69 f0       	breq	.+26     	; 0x171a <_ZN7TwoWire5writeEPKhj+0x46>
    1700:	69 91       	ld	r22, Y+
    1702:	d7 01       	movw	r26, r14
    1704:	ed 91       	ld	r30, X+
    1706:	fc 91       	ld	r31, X
    1708:	01 90       	ld	r0, Z+
    170a:	f0 81       	ld	r31, Z
    170c:	e0 2d       	mov	r30, r0
    170e:	c7 01       	movw	r24, r14
    1710:	09 95       	icall
    1712:	f3 cf       	rjmp	.-26     	; 0x16fa <_ZN7TwoWire5writeEPKhj+0x26>
    1714:	64 2f       	mov	r22, r20
    1716:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <twi_transmit>
    171a:	c8 01       	movw	r24, r16
    171c:	df 91       	pop	r29
    171e:	cf 91       	pop	r28
    1720:	1f 91       	pop	r17
    1722:	0f 91       	pop	r16
    1724:	ff 90       	pop	r15
    1726:	ef 90       	pop	r14
    1728:	df 90       	pop	r13
    172a:	cf 90       	pop	r12
    172c:	08 95       	ret

0000172e <_ZN7TwoWire5writeEh>:
    172e:	cf 93       	push	r28
    1730:	df 93       	push	r29
    1732:	1f 92       	push	r1
    1734:	cd b7       	in	r28, 0x3d	; 61
    1736:	de b7       	in	r29, 0x3e	; 62
    1738:	69 83       	std	Y+1, r22	; 0x01
    173a:	20 91 0f 03 	lds	r18, 0x030F	; 0x80030f <_ZN7TwoWire12transmittingE>
    173e:	22 23       	and	r18, r18
    1740:	d1 f0       	breq	.+52     	; 0x1776 <_ZN7TwoWire5writeEh+0x48>
    1742:	20 91 10 03 	lds	r18, 0x0310	; 0x800310 <_ZN7TwoWire14txBufferLengthE>
    1746:	20 32       	cpi	r18, 0x20	; 32
    1748:	40 f0       	brcs	.+16     	; 0x175a <_ZN7TwoWire5writeEh+0x2c>
    174a:	21 e0       	ldi	r18, 0x01	; 1
    174c:	30 e0       	ldi	r19, 0x00	; 0
    174e:	fc 01       	movw	r30, r24
    1750:	33 83       	std	Z+3, r19	; 0x03
    1752:	22 83       	std	Z+2, r18	; 0x02
    1754:	80 e0       	ldi	r24, 0x00	; 0
    1756:	90 e0       	ldi	r25, 0x00	; 0
    1758:	15 c0       	rjmp	.+42     	; 0x1784 <_ZN7TwoWire5writeEh+0x56>
    175a:	80 91 11 03 	lds	r24, 0x0311	; 0x800311 <_ZN7TwoWire13txBufferIndexE>
    175e:	e8 2f       	mov	r30, r24
    1760:	f0 e0       	ldi	r31, 0x00	; 0
    1762:	ee 5e       	subi	r30, 0xEE	; 238
    1764:	fc 4f       	sbci	r31, 0xFC	; 252
    1766:	99 81       	ldd	r25, Y+1	; 0x01
    1768:	90 83       	st	Z, r25
    176a:	8f 5f       	subi	r24, 0xFF	; 255
    176c:	80 93 11 03 	sts	0x0311, r24	; 0x800311 <_ZN7TwoWire13txBufferIndexE>
    1770:	80 93 10 03 	sts	0x0310, r24	; 0x800310 <_ZN7TwoWire14txBufferLengthE>
    1774:	05 c0       	rjmp	.+10     	; 0x1780 <_ZN7TwoWire5writeEh+0x52>
    1776:	61 e0       	ldi	r22, 0x01	; 1
    1778:	ce 01       	movw	r24, r28
    177a:	01 96       	adiw	r24, 0x01	; 1
    177c:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <twi_transmit>
    1780:	81 e0       	ldi	r24, 0x01	; 1
    1782:	90 e0       	ldi	r25, 0x00	; 0
    1784:	0f 90       	pop	r0
    1786:	df 91       	pop	r29
    1788:	cf 91       	pop	r28
    178a:	08 95       	ret

0000178c <_ZN7TwoWireC1Ev>:
    178c:	fc 01       	movw	r30, r24
    178e:	13 82       	std	Z+3, r1	; 0x03
    1790:	12 82       	std	Z+2, r1	; 0x02
    1792:	88 ee       	ldi	r24, 0xE8	; 232
    1794:	93 e0       	ldi	r25, 0x03	; 3
    1796:	a0 e0       	ldi	r26, 0x00	; 0
    1798:	b0 e0       	ldi	r27, 0x00	; 0
    179a:	84 83       	std	Z+4, r24	; 0x04
    179c:	95 83       	std	Z+5, r25	; 0x05
    179e:	a6 83       	std	Z+6, r26	; 0x06
    17a0:	b7 83       	std	Z+7, r27	; 0x07
    17a2:	87 e1       	ldi	r24, 0x17	; 23
    17a4:	91 e0       	ldi	r25, 0x01	; 1
    17a6:	91 83       	std	Z+1, r25	; 0x01
    17a8:	80 83       	st	Z, r24
    17aa:	08 95       	ret

000017ac <_ZN7TwoWire5beginEv>:
    17ac:	10 92 34 03 	sts	0x0334, r1	; 0x800334 <_ZN7TwoWire13rxBufferIndexE>
    17b0:	10 92 33 03 	sts	0x0333, r1	; 0x800333 <_ZN7TwoWire14rxBufferLengthE>
    17b4:	10 92 11 03 	sts	0x0311, r1	; 0x800311 <_ZN7TwoWire13txBufferIndexE>
    17b8:	10 92 10 03 	sts	0x0310, r1	; 0x800310 <_ZN7TwoWire14txBufferLengthE>
    17bc:	0e 94 b9 08 	call	0x1172	; 0x1172 <twi_init>
    17c0:	8e e5       	ldi	r24, 0x5E	; 94
    17c2:	9b e0       	ldi	r25, 0x0B	; 11
    17c4:	0e 94 11 09 	call	0x1222	; 0x1222 <twi_attachSlaveTxEvent>
    17c8:	84 e3       	ldi	r24, 0x34	; 52
    17ca:	9b e0       	ldi	r25, 0x0B	; 11
    17cc:	0c 94 0c 09 	jmp	0x1218	; 0x1218 <twi_attachSlaveRxEvent>

000017d0 <_ZN7TwoWire17beginTransmissionEh>:
    17d0:	81 e0       	ldi	r24, 0x01	; 1
    17d2:	80 93 0f 03 	sts	0x030F, r24	; 0x80030f <_ZN7TwoWire12transmittingE>
    17d6:	60 93 32 03 	sts	0x0332, r22	; 0x800332 <_ZN7TwoWire9txAddressE>
    17da:	10 92 11 03 	sts	0x0311, r1	; 0x800311 <_ZN7TwoWire13txBufferIndexE>
    17de:	10 92 10 03 	sts	0x0310, r1	; 0x800310 <_ZN7TwoWire14txBufferLengthE>
    17e2:	08 95       	ret

000017e4 <_ZN7TwoWire15endTransmissionEh>:
    17e4:	0f 93       	push	r16
    17e6:	06 2f       	mov	r16, r22
    17e8:	21 e0       	ldi	r18, 0x01	; 1
    17ea:	40 91 10 03 	lds	r20, 0x0310	; 0x800310 <_ZN7TwoWire14txBufferLengthE>
    17ee:	62 e1       	ldi	r22, 0x12	; 18
    17f0:	73 e0       	ldi	r23, 0x03	; 3
    17f2:	80 91 32 03 	lds	r24, 0x0332	; 0x800332 <_ZN7TwoWire9txAddressE>
    17f6:	0e 94 15 0a 	call	0x142a	; 0x142a <twi_writeTo>
    17fa:	10 92 11 03 	sts	0x0311, r1	; 0x800311 <_ZN7TwoWire13txBufferIndexE>
    17fe:	10 92 10 03 	sts	0x0310, r1	; 0x800310 <_ZN7TwoWire14txBufferLengthE>
    1802:	10 92 0f 03 	sts	0x030F, r1	; 0x80030f <_ZN7TwoWire12transmittingE>
    1806:	0f 91       	pop	r16
    1808:	08 95       	ret

0000180a <_ZN7TwoWire11requestFromEhhmhh>:
    180a:	4f 92       	push	r4
    180c:	5f 92       	push	r5
    180e:	6f 92       	push	r6
    1810:	7f 92       	push	r7
    1812:	af 92       	push	r10
    1814:	bf 92       	push	r11
    1816:	cf 92       	push	r12
    1818:	ef 92       	push	r14
    181a:	ff 92       	push	r15
    181c:	0f 93       	push	r16
    181e:	1f 93       	push	r17
    1820:	cf 93       	push	r28
    1822:	df 93       	push	r29
    1824:	5c 01       	movw	r10, r24
    1826:	f6 2e       	mov	r15, r22
    1828:	d4 2f       	mov	r29, r20
    182a:	28 01       	movw	r4, r16
    182c:	39 01       	movw	r6, r18
    182e:	ee 20       	and	r14, r14
    1830:	21 f1       	breq	.+72     	; 0x187a <_ZN7TwoWire11requestFromEhhmhh+0x70>
    1832:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <_ZN7TwoWire17beginTransmissionEh>
    1836:	ce 2d       	mov	r28, r14
    1838:	c4 30       	cpi	r28, 0x04	; 4
    183a:	08 f0       	brcs	.+2      	; 0x183e <_ZN7TwoWire11requestFromEhhmhh+0x34>
    183c:	c3 e0       	ldi	r28, 0x03	; 3
    183e:	c1 50       	subi	r28, 0x01	; 1
    1840:	c0 f0       	brcs	.+48     	; 0x1872 <_ZN7TwoWire11requestFromEhhmhh+0x68>
    1842:	28 e0       	ldi	r18, 0x08	; 8
    1844:	c2 9f       	mul	r28, r18
    1846:	c0 01       	movw	r24, r0
    1848:	11 24       	eor	r1, r1
    184a:	a3 01       	movw	r20, r6
    184c:	92 01       	movw	r18, r4
    184e:	04 c0       	rjmp	.+8      	; 0x1858 <_ZN7TwoWire11requestFromEhhmhh+0x4e>
    1850:	56 95       	lsr	r21
    1852:	47 95       	ror	r20
    1854:	37 95       	ror	r19
    1856:	27 95       	ror	r18
    1858:	8a 95       	dec	r24
    185a:	d2 f7       	brpl	.-12     	; 0x1850 <_ZN7TwoWire11requestFromEhhmhh+0x46>
    185c:	ca 01       	movw	r24, r20
    185e:	b9 01       	movw	r22, r18
    1860:	d5 01       	movw	r26, r10
    1862:	ed 91       	ld	r30, X+
    1864:	fc 91       	ld	r31, X
    1866:	01 90       	ld	r0, Z+
    1868:	f0 81       	ld	r31, Z
    186a:	e0 2d       	mov	r30, r0
    186c:	c5 01       	movw	r24, r10
    186e:	09 95       	icall
    1870:	e6 cf       	rjmp	.-52     	; 0x183e <_ZN7TwoWire11requestFromEhhmhh+0x34>
    1872:	60 e0       	ldi	r22, 0x00	; 0
    1874:	c5 01       	movw	r24, r10
    1876:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <_ZN7TwoWire15endTransmissionEh>
    187a:	4d 2f       	mov	r20, r29
    187c:	d1 32       	cpi	r29, 0x21	; 33
    187e:	08 f0       	brcs	.+2      	; 0x1882 <_ZN7TwoWire11requestFromEhhmhh+0x78>
    1880:	40 e2       	ldi	r20, 0x20	; 32
    1882:	2c 2d       	mov	r18, r12
    1884:	65 e3       	ldi	r22, 0x35	; 53
    1886:	73 e0       	ldi	r23, 0x03	; 3
    1888:	8f 2d       	mov	r24, r15
    188a:	0e 94 2c 09 	call	0x1258	; 0x1258 <twi_readFrom>
    188e:	10 92 34 03 	sts	0x0334, r1	; 0x800334 <_ZN7TwoWire13rxBufferIndexE>
    1892:	80 93 33 03 	sts	0x0333, r24	; 0x800333 <_ZN7TwoWire14rxBufferLengthE>
    1896:	df 91       	pop	r29
    1898:	cf 91       	pop	r28
    189a:	1f 91       	pop	r17
    189c:	0f 91       	pop	r16
    189e:	ff 90       	pop	r15
    18a0:	ef 90       	pop	r14
    18a2:	cf 90       	pop	r12
    18a4:	bf 90       	pop	r11
    18a6:	af 90       	pop	r10
    18a8:	7f 90       	pop	r7
    18aa:	6f 90       	pop	r6
    18ac:	5f 90       	pop	r5
    18ae:	4f 90       	pop	r4
    18b0:	08 95       	ret

000018b2 <_ZN7TwoWire11requestFromEhhh>:
    18b2:	cf 92       	push	r12
    18b4:	ef 92       	push	r14
    18b6:	0f 93       	push	r16
    18b8:	1f 93       	push	r17
    18ba:	c2 2e       	mov	r12, r18
    18bc:	e1 2c       	mov	r14, r1
    18be:	00 e0       	ldi	r16, 0x00	; 0
    18c0:	10 e0       	ldi	r17, 0x00	; 0
    18c2:	98 01       	movw	r18, r16
    18c4:	0e 94 05 0c 	call	0x180a	; 0x180a <_ZN7TwoWire11requestFromEhhmhh>
    18c8:	1f 91       	pop	r17
    18ca:	0f 91       	pop	r16
    18cc:	ef 90       	pop	r14
    18ce:	cf 90       	pop	r12
    18d0:	08 95       	ret

000018d2 <_ZN7TwoWire11requestFromEhh>:
    18d2:	21 e0       	ldi	r18, 0x01	; 1
    18d4:	0c 94 59 0c 	jmp	0x18b2	; 0x18b2 <_ZN7TwoWire11requestFromEhhh>

000018d8 <_ZN7TwoWire15endTransmissionEv>:
    18d8:	61 e0       	ldi	r22, 0x01	; 1
    18da:	0c 94 f2 0b 	jmp	0x17e4	; 0x17e4 <_ZN7TwoWire15endTransmissionEh>

000018de <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    18de:	8f ef       	ldi	r24, 0xFF	; 255
    18e0:	92 e0       	ldi	r25, 0x02	; 2
    18e2:	0c 94 c6 0b 	jmp	0x178c	; 0x178c <_ZN7TwoWireC1Ev>

000018e6 <__floatunsisf>:
    18e6:	e8 94       	clt
    18e8:	09 c0       	rjmp	.+18     	; 0x18fc <__floatsisf+0x12>

000018ea <__floatsisf>:
    18ea:	97 fb       	bst	r25, 7
    18ec:	3e f4       	brtc	.+14     	; 0x18fc <__floatsisf+0x12>
    18ee:	90 95       	com	r25
    18f0:	80 95       	com	r24
    18f2:	70 95       	com	r23
    18f4:	61 95       	neg	r22
    18f6:	7f 4f       	sbci	r23, 0xFF	; 255
    18f8:	8f 4f       	sbci	r24, 0xFF	; 255
    18fa:	9f 4f       	sbci	r25, 0xFF	; 255
    18fc:	99 23       	and	r25, r25
    18fe:	a9 f0       	breq	.+42     	; 0x192a <__floatsisf+0x40>
    1900:	f9 2f       	mov	r31, r25
    1902:	96 e9       	ldi	r25, 0x96	; 150
    1904:	bb 27       	eor	r27, r27
    1906:	93 95       	inc	r25
    1908:	f6 95       	lsr	r31
    190a:	87 95       	ror	r24
    190c:	77 95       	ror	r23
    190e:	67 95       	ror	r22
    1910:	b7 95       	ror	r27
    1912:	f1 11       	cpse	r31, r1
    1914:	f8 cf       	rjmp	.-16     	; 0x1906 <__floatsisf+0x1c>
    1916:	fa f4       	brpl	.+62     	; 0x1956 <__floatsisf+0x6c>
    1918:	bb 0f       	add	r27, r27
    191a:	11 f4       	brne	.+4      	; 0x1920 <__floatsisf+0x36>
    191c:	60 ff       	sbrs	r22, 0
    191e:	1b c0       	rjmp	.+54     	; 0x1956 <__floatsisf+0x6c>
    1920:	6f 5f       	subi	r22, 0xFF	; 255
    1922:	7f 4f       	sbci	r23, 0xFF	; 255
    1924:	8f 4f       	sbci	r24, 0xFF	; 255
    1926:	9f 4f       	sbci	r25, 0xFF	; 255
    1928:	16 c0       	rjmp	.+44     	; 0x1956 <__floatsisf+0x6c>
    192a:	88 23       	and	r24, r24
    192c:	11 f0       	breq	.+4      	; 0x1932 <__floatsisf+0x48>
    192e:	96 e9       	ldi	r25, 0x96	; 150
    1930:	11 c0       	rjmp	.+34     	; 0x1954 <__floatsisf+0x6a>
    1932:	77 23       	and	r23, r23
    1934:	21 f0       	breq	.+8      	; 0x193e <__floatsisf+0x54>
    1936:	9e e8       	ldi	r25, 0x8E	; 142
    1938:	87 2f       	mov	r24, r23
    193a:	76 2f       	mov	r23, r22
    193c:	05 c0       	rjmp	.+10     	; 0x1948 <__floatsisf+0x5e>
    193e:	66 23       	and	r22, r22
    1940:	71 f0       	breq	.+28     	; 0x195e <__floatsisf+0x74>
    1942:	96 e8       	ldi	r25, 0x86	; 134
    1944:	86 2f       	mov	r24, r22
    1946:	70 e0       	ldi	r23, 0x00	; 0
    1948:	60 e0       	ldi	r22, 0x00	; 0
    194a:	2a f0       	brmi	.+10     	; 0x1956 <__floatsisf+0x6c>
    194c:	9a 95       	dec	r25
    194e:	66 0f       	add	r22, r22
    1950:	77 1f       	adc	r23, r23
    1952:	88 1f       	adc	r24, r24
    1954:	da f7       	brpl	.-10     	; 0x194c <__floatsisf+0x62>
    1956:	88 0f       	add	r24, r24
    1958:	96 95       	lsr	r25
    195a:	87 95       	ror	r24
    195c:	97 f9       	bld	r25, 7
    195e:	08 95       	ret

00001960 <__mulsf3>:
    1960:	0e 94 c3 0c 	call	0x1986	; 0x1986 <__mulsf3x>
    1964:	0c 94 34 0d 	jmp	0x1a68	; 0x1a68 <__fp_round>
    1968:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <__fp_pscA>
    196c:	38 f0       	brcs	.+14     	; 0x197c <__mulsf3+0x1c>
    196e:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <__fp_pscB>
    1972:	20 f0       	brcs	.+8      	; 0x197c <__mulsf3+0x1c>
    1974:	95 23       	and	r25, r21
    1976:	11 f0       	breq	.+4      	; 0x197c <__mulsf3+0x1c>
    1978:	0c 94 1d 0d 	jmp	0x1a3a	; 0x1a3a <__fp_inf>
    197c:	0c 94 23 0d 	jmp	0x1a46	; 0x1a46 <__fp_nan>
    1980:	11 24       	eor	r1, r1
    1982:	0c 94 68 0d 	jmp	0x1ad0	; 0x1ad0 <__fp_szero>

00001986 <__mulsf3x>:
    1986:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <__fp_split3>
    198a:	70 f3       	brcs	.-36     	; 0x1968 <__mulsf3+0x8>

0000198c <__mulsf3_pse>:
    198c:	95 9f       	mul	r25, r21
    198e:	c1 f3       	breq	.-16     	; 0x1980 <__mulsf3+0x20>
    1990:	95 0f       	add	r25, r21
    1992:	50 e0       	ldi	r21, 0x00	; 0
    1994:	55 1f       	adc	r21, r21
    1996:	62 9f       	mul	r22, r18
    1998:	f0 01       	movw	r30, r0
    199a:	72 9f       	mul	r23, r18
    199c:	bb 27       	eor	r27, r27
    199e:	f0 0d       	add	r31, r0
    19a0:	b1 1d       	adc	r27, r1
    19a2:	63 9f       	mul	r22, r19
    19a4:	aa 27       	eor	r26, r26
    19a6:	f0 0d       	add	r31, r0
    19a8:	b1 1d       	adc	r27, r1
    19aa:	aa 1f       	adc	r26, r26
    19ac:	64 9f       	mul	r22, r20
    19ae:	66 27       	eor	r22, r22
    19b0:	b0 0d       	add	r27, r0
    19b2:	a1 1d       	adc	r26, r1
    19b4:	66 1f       	adc	r22, r22
    19b6:	82 9f       	mul	r24, r18
    19b8:	22 27       	eor	r18, r18
    19ba:	b0 0d       	add	r27, r0
    19bc:	a1 1d       	adc	r26, r1
    19be:	62 1f       	adc	r22, r18
    19c0:	73 9f       	mul	r23, r19
    19c2:	b0 0d       	add	r27, r0
    19c4:	a1 1d       	adc	r26, r1
    19c6:	62 1f       	adc	r22, r18
    19c8:	83 9f       	mul	r24, r19
    19ca:	a0 0d       	add	r26, r0
    19cc:	61 1d       	adc	r22, r1
    19ce:	22 1f       	adc	r18, r18
    19d0:	74 9f       	mul	r23, r20
    19d2:	33 27       	eor	r19, r19
    19d4:	a0 0d       	add	r26, r0
    19d6:	61 1d       	adc	r22, r1
    19d8:	23 1f       	adc	r18, r19
    19da:	84 9f       	mul	r24, r20
    19dc:	60 0d       	add	r22, r0
    19de:	21 1d       	adc	r18, r1
    19e0:	82 2f       	mov	r24, r18
    19e2:	76 2f       	mov	r23, r22
    19e4:	6a 2f       	mov	r22, r26
    19e6:	11 24       	eor	r1, r1
    19e8:	9f 57       	subi	r25, 0x7F	; 127
    19ea:	50 40       	sbci	r21, 0x00	; 0
    19ec:	9a f0       	brmi	.+38     	; 0x1a14 <__mulsf3_pse+0x88>
    19ee:	f1 f0       	breq	.+60     	; 0x1a2c <__mulsf3_pse+0xa0>
    19f0:	88 23       	and	r24, r24
    19f2:	4a f0       	brmi	.+18     	; 0x1a06 <__mulsf3_pse+0x7a>
    19f4:	ee 0f       	add	r30, r30
    19f6:	ff 1f       	adc	r31, r31
    19f8:	bb 1f       	adc	r27, r27
    19fa:	66 1f       	adc	r22, r22
    19fc:	77 1f       	adc	r23, r23
    19fe:	88 1f       	adc	r24, r24
    1a00:	91 50       	subi	r25, 0x01	; 1
    1a02:	50 40       	sbci	r21, 0x00	; 0
    1a04:	a9 f7       	brne	.-22     	; 0x19f0 <__mulsf3_pse+0x64>
    1a06:	9e 3f       	cpi	r25, 0xFE	; 254
    1a08:	51 05       	cpc	r21, r1
    1a0a:	80 f0       	brcs	.+32     	; 0x1a2c <__mulsf3_pse+0xa0>
    1a0c:	0c 94 1d 0d 	jmp	0x1a3a	; 0x1a3a <__fp_inf>
    1a10:	0c 94 68 0d 	jmp	0x1ad0	; 0x1ad0 <__fp_szero>
    1a14:	5f 3f       	cpi	r21, 0xFF	; 255
    1a16:	e4 f3       	brlt	.-8      	; 0x1a10 <__mulsf3_pse+0x84>
    1a18:	98 3e       	cpi	r25, 0xE8	; 232
    1a1a:	d4 f3       	brlt	.-12     	; 0x1a10 <__mulsf3_pse+0x84>
    1a1c:	86 95       	lsr	r24
    1a1e:	77 95       	ror	r23
    1a20:	67 95       	ror	r22
    1a22:	b7 95       	ror	r27
    1a24:	f7 95       	ror	r31
    1a26:	e7 95       	ror	r30
    1a28:	9f 5f       	subi	r25, 0xFF	; 255
    1a2a:	c1 f7       	brne	.-16     	; 0x1a1c <__mulsf3_pse+0x90>
    1a2c:	fe 2b       	or	r31, r30
    1a2e:	88 0f       	add	r24, r24
    1a30:	91 1d       	adc	r25, r1
    1a32:	96 95       	lsr	r25
    1a34:	87 95       	ror	r24
    1a36:	97 f9       	bld	r25, 7
    1a38:	08 95       	ret

00001a3a <__fp_inf>:
    1a3a:	97 f9       	bld	r25, 7
    1a3c:	9f 67       	ori	r25, 0x7F	; 127
    1a3e:	80 e8       	ldi	r24, 0x80	; 128
    1a40:	70 e0       	ldi	r23, 0x00	; 0
    1a42:	60 e0       	ldi	r22, 0x00	; 0
    1a44:	08 95       	ret

00001a46 <__fp_nan>:
    1a46:	9f ef       	ldi	r25, 0xFF	; 255
    1a48:	80 ec       	ldi	r24, 0xC0	; 192
    1a4a:	08 95       	ret

00001a4c <__fp_pscA>:
    1a4c:	00 24       	eor	r0, r0
    1a4e:	0a 94       	dec	r0
    1a50:	16 16       	cp	r1, r22
    1a52:	17 06       	cpc	r1, r23
    1a54:	18 06       	cpc	r1, r24
    1a56:	09 06       	cpc	r0, r25
    1a58:	08 95       	ret

00001a5a <__fp_pscB>:
    1a5a:	00 24       	eor	r0, r0
    1a5c:	0a 94       	dec	r0
    1a5e:	12 16       	cp	r1, r18
    1a60:	13 06       	cpc	r1, r19
    1a62:	14 06       	cpc	r1, r20
    1a64:	05 06       	cpc	r0, r21
    1a66:	08 95       	ret

00001a68 <__fp_round>:
    1a68:	09 2e       	mov	r0, r25
    1a6a:	03 94       	inc	r0
    1a6c:	00 0c       	add	r0, r0
    1a6e:	11 f4       	brne	.+4      	; 0x1a74 <__fp_round+0xc>
    1a70:	88 23       	and	r24, r24
    1a72:	52 f0       	brmi	.+20     	; 0x1a88 <__fp_round+0x20>
    1a74:	bb 0f       	add	r27, r27
    1a76:	40 f4       	brcc	.+16     	; 0x1a88 <__fp_round+0x20>
    1a78:	bf 2b       	or	r27, r31
    1a7a:	11 f4       	brne	.+4      	; 0x1a80 <__fp_round+0x18>
    1a7c:	60 ff       	sbrs	r22, 0
    1a7e:	04 c0       	rjmp	.+8      	; 0x1a88 <__fp_round+0x20>
    1a80:	6f 5f       	subi	r22, 0xFF	; 255
    1a82:	7f 4f       	sbci	r23, 0xFF	; 255
    1a84:	8f 4f       	sbci	r24, 0xFF	; 255
    1a86:	9f 4f       	sbci	r25, 0xFF	; 255
    1a88:	08 95       	ret

00001a8a <__fp_split3>:
    1a8a:	57 fd       	sbrc	r21, 7
    1a8c:	90 58       	subi	r25, 0x80	; 128
    1a8e:	44 0f       	add	r20, r20
    1a90:	55 1f       	adc	r21, r21
    1a92:	59 f0       	breq	.+22     	; 0x1aaa <__fp_splitA+0x10>
    1a94:	5f 3f       	cpi	r21, 0xFF	; 255
    1a96:	71 f0       	breq	.+28     	; 0x1ab4 <__fp_splitA+0x1a>
    1a98:	47 95       	ror	r20

00001a9a <__fp_splitA>:
    1a9a:	88 0f       	add	r24, r24
    1a9c:	97 fb       	bst	r25, 7
    1a9e:	99 1f       	adc	r25, r25
    1aa0:	61 f0       	breq	.+24     	; 0x1aba <__fp_splitA+0x20>
    1aa2:	9f 3f       	cpi	r25, 0xFF	; 255
    1aa4:	79 f0       	breq	.+30     	; 0x1ac4 <__fp_splitA+0x2a>
    1aa6:	87 95       	ror	r24
    1aa8:	08 95       	ret
    1aaa:	12 16       	cp	r1, r18
    1aac:	13 06       	cpc	r1, r19
    1aae:	14 06       	cpc	r1, r20
    1ab0:	55 1f       	adc	r21, r21
    1ab2:	f2 cf       	rjmp	.-28     	; 0x1a98 <__fp_split3+0xe>
    1ab4:	46 95       	lsr	r20
    1ab6:	f1 df       	rcall	.-30     	; 0x1a9a <__fp_splitA>
    1ab8:	08 c0       	rjmp	.+16     	; 0x1aca <__fp_splitA+0x30>
    1aba:	16 16       	cp	r1, r22
    1abc:	17 06       	cpc	r1, r23
    1abe:	18 06       	cpc	r1, r24
    1ac0:	99 1f       	adc	r25, r25
    1ac2:	f1 cf       	rjmp	.-30     	; 0x1aa6 <__fp_splitA+0xc>
    1ac4:	86 95       	lsr	r24
    1ac6:	71 05       	cpc	r23, r1
    1ac8:	61 05       	cpc	r22, r1
    1aca:	08 94       	sec
    1acc:	08 95       	ret

00001ace <__fp_zero>:
    1ace:	e8 94       	clt

00001ad0 <__fp_szero>:
    1ad0:	bb 27       	eor	r27, r27
    1ad2:	66 27       	eor	r22, r22
    1ad4:	77 27       	eor	r23, r23
    1ad6:	cb 01       	movw	r24, r22
    1ad8:	97 f9       	bld	r25, 7
    1ada:	08 95       	ret

00001adc <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    1adc:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    1ade:	91 8d       	ldd	r25, Z+25	; 0x19
    1ae0:	22 8d       	ldd	r18, Z+26	; 0x1a
    1ae2:	89 2f       	mov	r24, r25
    1ae4:	90 e0       	ldi	r25, 0x00	; 0
    1ae6:	80 5c       	subi	r24, 0xC0	; 192
    1ae8:	9f 4f       	sbci	r25, 0xFF	; 255
    1aea:	82 1b       	sub	r24, r18
    1aec:	91 09       	sbc	r25, r1
}
    1aee:	8f 73       	andi	r24, 0x3F	; 63
    1af0:	99 27       	eor	r25, r25
    1af2:	08 95       	ret

00001af4 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    1af4:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    1af6:	91 8d       	ldd	r25, Z+25	; 0x19
    1af8:	82 8d       	ldd	r24, Z+26	; 0x1a
    1afa:	98 17       	cp	r25, r24
    1afc:	31 f0       	breq	.+12     	; 0x1b0a <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    1afe:	82 8d       	ldd	r24, Z+26	; 0x1a
    1b00:	e8 0f       	add	r30, r24
    1b02:	f1 1d       	adc	r31, r1
    1b04:	85 8d       	ldd	r24, Z+29	; 0x1d
    1b06:	90 e0       	ldi	r25, 0x00	; 0
    1b08:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1b0a:	8f ef       	ldi	r24, 0xFF	; 255
    1b0c:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    1b0e:	08 95       	ret

00001b10 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    1b10:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    1b12:	91 8d       	ldd	r25, Z+25	; 0x19
    1b14:	82 8d       	ldd	r24, Z+26	; 0x1a
    1b16:	98 17       	cp	r25, r24
    1b18:	61 f0       	breq	.+24     	; 0x1b32 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    1b1a:	82 8d       	ldd	r24, Z+26	; 0x1a
    1b1c:	df 01       	movw	r26, r30
    1b1e:	a8 0f       	add	r26, r24
    1b20:	b1 1d       	adc	r27, r1
    1b22:	5d 96       	adiw	r26, 0x1d	; 29
    1b24:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    1b26:	92 8d       	ldd	r25, Z+26	; 0x1a
    1b28:	9f 5f       	subi	r25, 0xFF	; 255
    1b2a:	9f 73       	andi	r25, 0x3F	; 63
    1b2c:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    1b2e:	90 e0       	ldi	r25, 0x00	; 0
    1b30:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1b32:	8f ef       	ldi	r24, 0xFF	; 255
    1b34:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    1b36:	08 95       	ret

00001b38 <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    1b38:	fc 01       	movw	r30, r24
    1b3a:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
    1b3c:	44 8d       	ldd	r20, Z+28	; 0x1c
    1b3e:	25 2f       	mov	r18, r21
    1b40:	30 e0       	ldi	r19, 0x00	; 0
    1b42:	84 2f       	mov	r24, r20
    1b44:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    1b46:	82 1b       	sub	r24, r18
    1b48:	93 0b       	sbc	r25, r19
    1b4a:	54 17       	cp	r21, r20
    1b4c:	10 f0       	brcs	.+4      	; 0x1b52 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    1b4e:	cf 96       	adiw	r24, 0x3f	; 63
    1b50:	08 95       	ret
  return tail - head - 1;
    1b52:	01 97       	sbiw	r24, 0x01	; 1
}
    1b54:	08 95       	ret

00001b56 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    1b56:	83 e1       	ldi	r24, 0x13	; 19
    1b58:	9f e0       	ldi	r25, 0x0F	; 15
    1b5a:	89 2b       	or	r24, r25
    1b5c:	41 f0       	breq	.+16     	; 0x1b6e <_Z14serialEventRunv+0x18>
    1b5e:	80 e0       	ldi	r24, 0x00	; 0
    1b60:	90 e0       	ldi	r25, 0x00	; 0
    1b62:	89 2b       	or	r24, r25
    1b64:	21 f0       	breq	.+8      	; 0x1b6e <_Z14serialEventRunv+0x18>
    1b66:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <_Z17Serial0_availablev>
    1b6a:	81 11       	cpse	r24, r1
    1b6c:	0d c0       	rjmp	.+26     	; 0x1b88 <_Z14serialEventRunv+0x32>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    1b6e:	80 e0       	ldi	r24, 0x00	; 0
    1b70:	90 e0       	ldi	r25, 0x00	; 0
    1b72:	89 2b       	or	r24, r25
    1b74:	71 f0       	breq	.+28     	; 0x1b92 <_Z14serialEventRunv+0x3c>
    1b76:	80 e0       	ldi	r24, 0x00	; 0
    1b78:	90 e0       	ldi	r25, 0x00	; 0
    1b7a:	89 2b       	or	r24, r25
    1b7c:	51 f0       	breq	.+20     	; 0x1b92 <_Z14serialEventRunv+0x3c>
    1b7e:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    1b82:	81 11       	cpse	r24, r1
    1b84:	04 c0       	rjmp	.+8      	; 0x1b8e <_Z14serialEventRunv+0x38>
    1b86:	08 95       	ret
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    1b88:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    1b8c:	f0 cf       	rjmp	.-32     	; 0x1b6e <_Z14serialEventRunv+0x18>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    1b8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    1b92:	08 95       	ret

00001b94 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    1b94:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    1b96:	84 8d       	ldd	r24, Z+28	; 0x1c
    1b98:	df 01       	movw	r26, r30
    1b9a:	a8 0f       	add	r26, r24
    1b9c:	b1 1d       	adc	r27, r1
    1b9e:	a3 5a       	subi	r26, 0xA3	; 163
    1ba0:	bf 4f       	sbci	r27, 0xFF	; 255
    1ba2:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    1ba4:	84 8d       	ldd	r24, Z+28	; 0x1c
    1ba6:	90 e0       	ldi	r25, 0x00	; 0
    1ba8:	01 96       	adiw	r24, 0x01	; 1
    1baa:	8f 73       	andi	r24, 0x3F	; 63
    1bac:	99 27       	eor	r25, r25
    1bae:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    1bb0:	a6 89       	ldd	r26, Z+22	; 0x16
    1bb2:	b7 89       	ldd	r27, Z+23	; 0x17
    1bb4:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    1bb6:	a0 89       	ldd	r26, Z+16	; 0x10
    1bb8:	b1 89       	ldd	r27, Z+17	; 0x11
    1bba:	8c 91       	ld	r24, X
    1bbc:	83 70       	andi	r24, 0x03	; 3
    1bbe:	80 64       	ori	r24, 0x40	; 64
    1bc0:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    1bc2:	93 8d       	ldd	r25, Z+27	; 0x1b
    1bc4:	84 8d       	ldd	r24, Z+28	; 0x1c
    1bc6:	98 13       	cpse	r25, r24
    1bc8:	06 c0       	rjmp	.+12     	; 0x1bd6 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    1bca:	02 88       	ldd	r0, Z+18	; 0x12
    1bcc:	f3 89       	ldd	r31, Z+19	; 0x13
    1bce:	e0 2d       	mov	r30, r0
    1bd0:	80 81       	ld	r24, Z
    1bd2:	8f 7d       	andi	r24, 0xDF	; 223
    1bd4:	80 83       	st	Z, r24
    1bd6:	08 95       	ret

00001bd8 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    1bd8:	ef 92       	push	r14
    1bda:	ff 92       	push	r15
    1bdc:	0f 93       	push	r16
    1bde:	1f 93       	push	r17
    1be0:	cf 93       	push	r28
    1be2:	df 93       	push	r29
    1be4:	ec 01       	movw	r28, r24
  _written = true;
    1be6:	81 e0       	ldi	r24, 0x01	; 1
    1be8:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    1bea:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1bec:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1bee:	98 13       	cpse	r25, r24
    1bf0:	05 c0       	rjmp	.+10     	; 0x1bfc <_ZN14HardwareSerial5writeEh+0x24>
    1bf2:	e8 89       	ldd	r30, Y+16	; 0x10
    1bf4:	f9 89       	ldd	r31, Y+17	; 0x11
    1bf6:	80 81       	ld	r24, Z
    1bf8:	85 fd       	sbrc	r24, 5
    1bfa:	26 c0       	rjmp	.+76     	; 0x1c48 <_ZN14HardwareSerial5writeEh+0x70>
    1bfc:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    1bfe:	0b 8d       	ldd	r16, Y+27	; 0x1b
    1c00:	10 e0       	ldi	r17, 0x00	; 0
    1c02:	0f 5f       	subi	r16, 0xFF	; 255
    1c04:	1f 4f       	sbci	r17, 0xFF	; 255
    1c06:	0f 73       	andi	r16, 0x3F	; 63
    1c08:	11 27       	eor	r17, r17
    1c0a:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    1c0c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1c0e:	e8 12       	cpse	r14, r24
    1c10:	0c c0       	rjmp	.+24     	; 0x1c2a <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    1c12:	0f b6       	in	r0, 0x3f	; 63
    1c14:	07 fc       	sbrc	r0, 7
    1c16:	fa cf       	rjmp	.-12     	; 0x1c0c <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    1c18:	e8 89       	ldd	r30, Y+16	; 0x10
    1c1a:	f9 89       	ldd	r31, Y+17	; 0x11
    1c1c:	80 81       	ld	r24, Z
    1c1e:	85 ff       	sbrs	r24, 5
    1c20:	f5 cf       	rjmp	.-22     	; 0x1c0c <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    1c22:	ce 01       	movw	r24, r28
    1c24:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1c28:	f1 cf       	rjmp	.-30     	; 0x1c0c <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    1c2a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c2c:	fe 01       	movw	r30, r28
    1c2e:	e8 0f       	add	r30, r24
    1c30:	f1 1d       	adc	r31, r1
    1c32:	e3 5a       	subi	r30, 0xA3	; 163
    1c34:	ff 4f       	sbci	r31, 0xFF	; 255
    1c36:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    1c38:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1c3a:	f8 94       	cli
    _tx_buffer_head = i;
    1c3c:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
    1c3e:	ea 89       	ldd	r30, Y+18	; 0x12
    1c40:	fb 89       	ldd	r31, Y+19	; 0x13
    1c42:	80 81       	ld	r24, Z
    1c44:	80 62       	ori	r24, 0x20	; 32
    1c46:	0a c0       	rjmp	.+20     	; 0x1c5c <_ZN14HardwareSerial5writeEh+0x84>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    1c48:	9f b7       	in	r25, 0x3f	; 63
    1c4a:	f8 94       	cli
      *_udr = c;
    1c4c:	ee 89       	ldd	r30, Y+22	; 0x16
    1c4e:	ff 89       	ldd	r31, Y+23	; 0x17
    1c50:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    1c52:	e8 89       	ldd	r30, Y+16	; 0x10
    1c54:	f9 89       	ldd	r31, Y+17	; 0x11
    1c56:	80 81       	ld	r24, Z
    1c58:	83 70       	andi	r24, 0x03	; 3
    1c5a:	80 64       	ori	r24, 0x40	; 64
    1c5c:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1c5e:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
    1c60:	81 e0       	ldi	r24, 0x01	; 1
    1c62:	90 e0       	ldi	r25, 0x00	; 0
    1c64:	df 91       	pop	r29
    1c66:	cf 91       	pop	r28
    1c68:	1f 91       	pop	r17
    1c6a:	0f 91       	pop	r16
    1c6c:	ff 90       	pop	r15
    1c6e:	ef 90       	pop	r14
    1c70:	08 95       	ret

00001c72 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    1c72:	cf 93       	push	r28
    1c74:	df 93       	push	r29
    1c76:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    1c78:	88 8d       	ldd	r24, Y+24	; 0x18
    1c7a:	88 23       	and	r24, r24
    1c7c:	c9 f0       	breq	.+50     	; 0x1cb0 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    1c7e:	ea 89       	ldd	r30, Y+18	; 0x12
    1c80:	fb 89       	ldd	r31, Y+19	; 0x13
    1c82:	80 81       	ld	r24, Z
    1c84:	85 fd       	sbrc	r24, 5
    1c86:	05 c0       	rjmp	.+10     	; 0x1c92 <_ZN14HardwareSerial5flushEv+0x20>
    1c88:	a8 89       	ldd	r26, Y+16	; 0x10
    1c8a:	b9 89       	ldd	r27, Y+17	; 0x11
    1c8c:	8c 91       	ld	r24, X
    1c8e:	86 fd       	sbrc	r24, 6
    1c90:	0f c0       	rjmp	.+30     	; 0x1cb0 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    1c92:	0f b6       	in	r0, 0x3f	; 63
    1c94:	07 fc       	sbrc	r0, 7
    1c96:	f5 cf       	rjmp	.-22     	; 0x1c82 <_ZN14HardwareSerial5flushEv+0x10>
    1c98:	80 81       	ld	r24, Z
    1c9a:	85 ff       	sbrs	r24, 5
    1c9c:	f2 cf       	rjmp	.-28     	; 0x1c82 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    1c9e:	a8 89       	ldd	r26, Y+16	; 0x10
    1ca0:	b9 89       	ldd	r27, Y+17	; 0x11
    1ca2:	8c 91       	ld	r24, X
    1ca4:	85 ff       	sbrs	r24, 5
    1ca6:	ed cf       	rjmp	.-38     	; 0x1c82 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    1ca8:	ce 01       	movw	r24, r28
    1caa:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1cae:	e7 cf       	rjmp	.-50     	; 0x1c7e <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    1cb0:	df 91       	pop	r29
    1cb2:	cf 91       	pop	r28
    1cb4:	08 95       	ret

00001cb6 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    1cb6:	cf 92       	push	r12
    1cb8:	df 92       	push	r13
    1cba:	ef 92       	push	r14
    1cbc:	ff 92       	push	r15
    1cbe:	1f 93       	push	r17
    1cc0:	cf 93       	push	r28
    1cc2:	df 93       	push	r29
    1cc4:	ec 01       	movw	r28, r24
    1cc6:	6a 01       	movw	r12, r20
    1cc8:	7b 01       	movw	r14, r22
    1cca:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    1ccc:	60 e8       	ldi	r22, 0x80	; 128
    1cce:	74 e8       	ldi	r23, 0x84	; 132
    1cd0:	8e e1       	ldi	r24, 0x1E	; 30
    1cd2:	90 e0       	ldi	r25, 0x00	; 0
    1cd4:	a7 01       	movw	r20, r14
    1cd6:	96 01       	movw	r18, r12
    1cd8:	0e 94 03 11 	call	0x2206	; 0x2206 <__udivmodsi4>
    1cdc:	da 01       	movw	r26, r20
    1cde:	c9 01       	movw	r24, r18
    1ce0:	01 97       	sbiw	r24, 0x01	; 1
    1ce2:	a1 09       	sbc	r26, r1
    1ce4:	b1 09       	sbc	r27, r1
    1ce6:	b6 95       	lsr	r27
    1ce8:	a7 95       	ror	r26
    1cea:	97 95       	ror	r25
    1cec:	87 95       	ror	r24
    1cee:	9c 01       	movw	r18, r24
  *_ucsra = 1 << U2X0;
    1cf0:	e8 89       	ldd	r30, Y+16	; 0x10
    1cf2:	f9 89       	ldd	r31, Y+17	; 0x11
    1cf4:	82 e0       	ldi	r24, 0x02	; 2
    1cf6:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1cf8:	21 15       	cp	r18, r1
    1cfa:	80 e1       	ldi	r24, 0x10	; 16
    1cfc:	38 07       	cpc	r19, r24
    1cfe:	a8 f0       	brcs	.+42     	; 0x1d2a <_ZN14HardwareSerial5beginEmh+0x74>
  {
    *_ucsra = 0;
    1d00:	e8 89       	ldd	r30, Y+16	; 0x10
    1d02:	f9 89       	ldd	r31, Y+17	; 0x11
    1d04:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    1d06:	60 e4       	ldi	r22, 0x40	; 64
    1d08:	72 e4       	ldi	r23, 0x42	; 66
    1d0a:	8f e0       	ldi	r24, 0x0F	; 15
    1d0c:	90 e0       	ldi	r25, 0x00	; 0
    1d0e:	a7 01       	movw	r20, r14
    1d10:	96 01       	movw	r18, r12
    1d12:	0e 94 03 11 	call	0x2206	; 0x2206 <__udivmodsi4>
    1d16:	da 01       	movw	r26, r20
    1d18:	c9 01       	movw	r24, r18
    1d1a:	01 97       	sbiw	r24, 0x01	; 1
    1d1c:	a1 09       	sbc	r26, r1
    1d1e:	b1 09       	sbc	r27, r1
    1d20:	b6 95       	lsr	r27
    1d22:	a7 95       	ror	r26
    1d24:	97 95       	ror	r25
    1d26:	87 95       	ror	r24
    1d28:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    1d2a:	ec 85       	ldd	r30, Y+12	; 0x0c
    1d2c:	fd 85       	ldd	r31, Y+13	; 0x0d
    1d2e:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    1d30:	ee 85       	ldd	r30, Y+14	; 0x0e
    1d32:	ff 85       	ldd	r31, Y+15	; 0x0f
    1d34:	20 83       	st	Z, r18

  _written = false;
    1d36:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    1d38:	ec 89       	ldd	r30, Y+20	; 0x14
    1d3a:	fd 89       	ldd	r31, Y+21	; 0x15
    1d3c:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    1d3e:	ea 89       	ldd	r30, Y+18	; 0x12
    1d40:	fb 89       	ldd	r31, Y+19	; 0x13
    1d42:	80 81       	ld	r24, Z
    1d44:	80 61       	ori	r24, 0x10	; 16
    1d46:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    1d48:	ea 89       	ldd	r30, Y+18	; 0x12
    1d4a:	fb 89       	ldd	r31, Y+19	; 0x13
    1d4c:	80 81       	ld	r24, Z
    1d4e:	88 60       	ori	r24, 0x08	; 8
    1d50:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    1d52:	ea 89       	ldd	r30, Y+18	; 0x12
    1d54:	fb 89       	ldd	r31, Y+19	; 0x13
    1d56:	80 81       	ld	r24, Z
    1d58:	80 68       	ori	r24, 0x80	; 128
    1d5a:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    1d5c:	ea 89       	ldd	r30, Y+18	; 0x12
    1d5e:	fb 89       	ldd	r31, Y+19	; 0x13
    1d60:	80 81       	ld	r24, Z
    1d62:	8f 7d       	andi	r24, 0xDF	; 223
    1d64:	80 83       	st	Z, r24
}
    1d66:	df 91       	pop	r29
    1d68:	cf 91       	pop	r28
    1d6a:	1f 91       	pop	r17
    1d6c:	ff 90       	pop	r15
    1d6e:	ef 90       	pop	r14
    1d70:	df 90       	pop	r13
    1d72:	cf 90       	pop	r12
    1d74:	08 95       	ret

00001d76 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    1d76:	1f 92       	push	r1
    1d78:	0f 92       	push	r0
    1d7a:	0f b6       	in	r0, 0x3f	; 63
    1d7c:	0f 92       	push	r0
    1d7e:	11 24       	eor	r1, r1
    1d80:	2f 93       	push	r18
    1d82:	8f 93       	push	r24
    1d84:	9f 93       	push	r25
    1d86:	ef 93       	push	r30
    1d88:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    1d8a:	e0 91 65 03 	lds	r30, 0x0365	; 0x800365 <Serial+0x10>
    1d8e:	f0 91 66 03 	lds	r31, 0x0366	; 0x800366 <Serial+0x11>
    1d92:	80 81       	ld	r24, Z
    1d94:	e0 91 6b 03 	lds	r30, 0x036B	; 0x80036b <Serial+0x16>
    1d98:	f0 91 6c 03 	lds	r31, 0x036C	; 0x80036c <Serial+0x17>
    1d9c:	82 fd       	sbrc	r24, 2
    1d9e:	12 c0       	rjmp	.+36     	; 0x1dc4 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    1da0:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    1da2:	80 91 6e 03 	lds	r24, 0x036E	; 0x80036e <Serial+0x19>
    1da6:	8f 5f       	subi	r24, 0xFF	; 255
    1da8:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    1daa:	20 91 6f 03 	lds	r18, 0x036F	; 0x80036f <Serial+0x1a>
    1dae:	82 17       	cp	r24, r18
    1db0:	51 f0       	breq	.+20     	; 0x1dc6 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    1db2:	e0 91 6e 03 	lds	r30, 0x036E	; 0x80036e <Serial+0x19>
    1db6:	f0 e0       	ldi	r31, 0x00	; 0
    1db8:	eb 5a       	subi	r30, 0xAB	; 171
    1dba:	fc 4f       	sbci	r31, 0xFC	; 252
    1dbc:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    1dbe:	80 93 6e 03 	sts	0x036E, r24	; 0x80036e <Serial+0x19>
    1dc2:	01 c0       	rjmp	.+2      	; 0x1dc6 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    1dc4:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    1dc6:	ff 91       	pop	r31
    1dc8:	ef 91       	pop	r30
    1dca:	9f 91       	pop	r25
    1dcc:	8f 91       	pop	r24
    1dce:	2f 91       	pop	r18
    1dd0:	0f 90       	pop	r0
    1dd2:	0f be       	out	0x3f, r0	; 63
    1dd4:	0f 90       	pop	r0
    1dd6:	1f 90       	pop	r1
    1dd8:	18 95       	reti

00001dda <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    1dda:	1f 92       	push	r1
    1ddc:	0f 92       	push	r0
    1dde:	0f b6       	in	r0, 0x3f	; 63
    1de0:	0f 92       	push	r0
    1de2:	11 24       	eor	r1, r1
    1de4:	2f 93       	push	r18
    1de6:	3f 93       	push	r19
    1de8:	4f 93       	push	r20
    1dea:	5f 93       	push	r21
    1dec:	6f 93       	push	r22
    1dee:	7f 93       	push	r23
    1df0:	8f 93       	push	r24
    1df2:	9f 93       	push	r25
    1df4:	af 93       	push	r26
    1df6:	bf 93       	push	r27
    1df8:	ef 93       	push	r30
    1dfa:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    1dfc:	85 e5       	ldi	r24, 0x55	; 85
    1dfe:	93 e0       	ldi	r25, 0x03	; 3
    1e00:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    1e04:	ff 91       	pop	r31
    1e06:	ef 91       	pop	r30
    1e08:	bf 91       	pop	r27
    1e0a:	af 91       	pop	r26
    1e0c:	9f 91       	pop	r25
    1e0e:	8f 91       	pop	r24
    1e10:	7f 91       	pop	r23
    1e12:	6f 91       	pop	r22
    1e14:	5f 91       	pop	r21
    1e16:	4f 91       	pop	r20
    1e18:	3f 91       	pop	r19
    1e1a:	2f 91       	pop	r18
    1e1c:	0f 90       	pop	r0
    1e1e:	0f be       	out	0x3f, r0	; 63
    1e20:	0f 90       	pop	r0
    1e22:	1f 90       	pop	r1
    1e24:	18 95       	reti

00001e26 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    1e26:	85 e5       	ldi	r24, 0x55	; 85
    1e28:	93 e0       	ldi	r25, 0x03	; 3
    1e2a:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <_ZN14HardwareSerial9availableEv>
    1e2e:	21 e0       	ldi	r18, 0x01	; 1
    1e30:	89 2b       	or	r24, r25
    1e32:	09 f4       	brne	.+2      	; 0x1e36 <_Z17Serial0_availablev+0x10>
    1e34:	20 e0       	ldi	r18, 0x00	; 0
}
    1e36:	82 2f       	mov	r24, r18
    1e38:	08 95       	ret

00001e3a <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    1e3a:	e5 e5       	ldi	r30, 0x55	; 85
    1e3c:	f3 e0       	ldi	r31, 0x03	; 3
    1e3e:	13 82       	std	Z+3, r1	; 0x03
    1e40:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    1e42:	88 ee       	ldi	r24, 0xE8	; 232
    1e44:	93 e0       	ldi	r25, 0x03	; 3
    1e46:	a0 e0       	ldi	r26, 0x00	; 0
    1e48:	b0 e0       	ldi	r27, 0x00	; 0
    1e4a:	84 83       	std	Z+4, r24	; 0x04
    1e4c:	95 83       	std	Z+5, r25	; 0x05
    1e4e:	a6 83       	std	Z+6, r26	; 0x06
    1e50:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    1e52:	89 e2       	ldi	r24, 0x29	; 41
    1e54:	91 e0       	ldi	r25, 0x01	; 1
    1e56:	91 83       	std	Z+1, r25	; 0x01
    1e58:	80 83       	st	Z, r24
    1e5a:	85 ec       	ldi	r24, 0xC5	; 197
    1e5c:	90 e0       	ldi	r25, 0x00	; 0
    1e5e:	95 87       	std	Z+13, r25	; 0x0d
    1e60:	84 87       	std	Z+12, r24	; 0x0c
    1e62:	84 ec       	ldi	r24, 0xC4	; 196
    1e64:	90 e0       	ldi	r25, 0x00	; 0
    1e66:	97 87       	std	Z+15, r25	; 0x0f
    1e68:	86 87       	std	Z+14, r24	; 0x0e
    1e6a:	80 ec       	ldi	r24, 0xC0	; 192
    1e6c:	90 e0       	ldi	r25, 0x00	; 0
    1e6e:	91 8b       	std	Z+17, r25	; 0x11
    1e70:	80 8b       	std	Z+16, r24	; 0x10
    1e72:	81 ec       	ldi	r24, 0xC1	; 193
    1e74:	90 e0       	ldi	r25, 0x00	; 0
    1e76:	93 8b       	std	Z+19, r25	; 0x13
    1e78:	82 8b       	std	Z+18, r24	; 0x12
    1e7a:	82 ec       	ldi	r24, 0xC2	; 194
    1e7c:	90 e0       	ldi	r25, 0x00	; 0
    1e7e:	95 8b       	std	Z+21, r25	; 0x15
    1e80:	84 8b       	std	Z+20, r24	; 0x14
    1e82:	86 ec       	ldi	r24, 0xC6	; 198
    1e84:	90 e0       	ldi	r25, 0x00	; 0
    1e86:	97 8b       	std	Z+23, r25	; 0x17
    1e88:	86 8b       	std	Z+22, r24	; 0x16
    1e8a:	11 8e       	std	Z+25, r1	; 0x19
    1e8c:	12 8e       	std	Z+26, r1	; 0x1a
    1e8e:	13 8e       	std	Z+27, r1	; 0x1b
    1e90:	14 8e       	std	Z+28, r1	; 0x1c
    1e92:	08 95       	ret

00001e94 <initVariant>:
    1e94:	08 95       	ret

00001e96 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    1e96:	0e 94 0a 10 	call	0x2014	; 0x2014 <init>

	initVariant();
    1e9a:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    1e9e:	0e 94 c9 07 	call	0xf92	; 0xf92 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    1ea2:	cb ea       	ldi	r28, 0xAB	; 171
    1ea4:	dd e0       	ldi	r29, 0x0D	; 13
#endif
	
	setup();
    
	for (;;) {
		loop();
    1ea6:	0e 94 22 08 	call	0x1044	; 0x1044 <loop>
		if (serialEventRun) serialEventRun();
    1eaa:	20 97       	sbiw	r28, 0x00	; 0
    1eac:	e1 f3       	breq	.-8      	; 0x1ea6 <main+0x10>
    1eae:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <_Z14serialEventRunv>
    1eb2:	f9 cf       	rjmp	.-14     	; 0x1ea6 <main+0x10>

00001eb4 <_ZN5Print5writeEPKhj>:
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
    virtual size_t write(const uint8_t *buffer, size_t size);
    size_t write(const char *buffer, size_t size) {
      return write((const uint8_t *)buffer, size);
    1eb4:	cf 92       	push	r12
    1eb6:	df 92       	push	r13
    1eb8:	ef 92       	push	r14
    1eba:	ff 92       	push	r15
    1ebc:	0f 93       	push	r16
    1ebe:	1f 93       	push	r17
    1ec0:	cf 93       	push	r28
    1ec2:	df 93       	push	r29
    1ec4:	6c 01       	movw	r12, r24
    1ec6:	7a 01       	movw	r14, r20
    1ec8:	8b 01       	movw	r16, r22
    1eca:	c0 e0       	ldi	r28, 0x00	; 0
    1ecc:	d0 e0       	ldi	r29, 0x00	; 0
    1ece:	ce 15       	cp	r28, r14
    1ed0:	df 05       	cpc	r29, r15
    1ed2:	81 f0       	breq	.+32     	; 0x1ef4 <_ZN5Print5writeEPKhj+0x40>
    1ed4:	d8 01       	movw	r26, r16
    1ed6:	6d 91       	ld	r22, X+
    1ed8:	8d 01       	movw	r16, r26
    1eda:	d6 01       	movw	r26, r12
    1edc:	ed 91       	ld	r30, X+
    1ede:	fc 91       	ld	r31, X
    1ee0:	01 90       	ld	r0, Z+
    1ee2:	f0 81       	ld	r31, Z
    1ee4:	e0 2d       	mov	r30, r0
    1ee6:	c6 01       	movw	r24, r12
    1ee8:	09 95       	icall
    1eea:	89 2b       	or	r24, r25
    1eec:	11 f0       	breq	.+4      	; 0x1ef2 <_ZN5Print5writeEPKhj+0x3e>
    1eee:	21 96       	adiw	r28, 0x01	; 1
    1ef0:	ee cf       	rjmp	.-36     	; 0x1ece <_ZN5Print5writeEPKhj+0x1a>
    1ef2:	7e 01       	movw	r14, r28
    1ef4:	c7 01       	movw	r24, r14
    1ef6:	df 91       	pop	r29
    1ef8:	cf 91       	pop	r28
    1efa:	1f 91       	pop	r17
    1efc:	0f 91       	pop	r16
    1efe:	ff 90       	pop	r15
    1f00:	ef 90       	pop	r14
    1f02:	df 90       	pop	r13
    1f04:	cf 90       	pop	r12
    1f06:	08 95       	ret

00001f08 <_ZN5Print5writeEPKc>:
    1f08:	61 15       	cp	r22, r1
    1f0a:	71 05       	cpc	r23, r1
    1f0c:	79 f0       	breq	.+30     	; 0x1f2c <_ZN5Print5writeEPKc+0x24>
    1f0e:	fb 01       	movw	r30, r22
    1f10:	01 90       	ld	r0, Z+
    1f12:	00 20       	and	r0, r0
    1f14:	e9 f7       	brne	.-6      	; 0x1f10 <_ZN5Print5writeEPKc+0x8>
    1f16:	31 97       	sbiw	r30, 0x01	; 1
    1f18:	af 01       	movw	r20, r30
    1f1a:	46 1b       	sub	r20, r22
    1f1c:	57 0b       	sbc	r21, r23
    1f1e:	dc 01       	movw	r26, r24
    1f20:	ed 91       	ld	r30, X+
    1f22:	fc 91       	ld	r31, X
    1f24:	02 80       	ldd	r0, Z+2	; 0x02
    1f26:	f3 81       	ldd	r31, Z+3	; 0x03
    1f28:	e0 2d       	mov	r30, r0
    1f2a:	09 94       	ijmp
    1f2c:	80 e0       	ldi	r24, 0x00	; 0
    1f2e:	90 e0       	ldi	r25, 0x00	; 0
    1f30:	08 95       	ret

00001f32 <_ZN5Print5printEPKc>:
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    1f32:	0c 94 84 0f 	jmp	0x1f08	; 0x1f08 <_ZN5Print5writeEPKc>

00001f36 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    1f36:	1f 92       	push	r1
    1f38:	0f 92       	push	r0
    1f3a:	0f b6       	in	r0, 0x3f	; 63
    1f3c:	0f 92       	push	r0
    1f3e:	11 24       	eor	r1, r1
    1f40:	2f 93       	push	r18
    1f42:	3f 93       	push	r19
    1f44:	8f 93       	push	r24
    1f46:	9f 93       	push	r25
    1f48:	af 93       	push	r26
    1f4a:	bf 93       	push	r27
    1f4c:	80 91 f3 03 	lds	r24, 0x03F3	; 0x8003f3 <timer0_millis>
    1f50:	90 91 f4 03 	lds	r25, 0x03F4	; 0x8003f4 <timer0_millis+0x1>
    1f54:	a0 91 f5 03 	lds	r26, 0x03F5	; 0x8003f5 <timer0_millis+0x2>
    1f58:	b0 91 f6 03 	lds	r27, 0x03F6	; 0x8003f6 <timer0_millis+0x3>
    1f5c:	30 91 f2 03 	lds	r19, 0x03F2	; 0x8003f2 <timer0_fract>
    1f60:	26 e0       	ldi	r18, 0x06	; 6
    1f62:	23 0f       	add	r18, r19
    1f64:	2d 37       	cpi	r18, 0x7D	; 125
    1f66:	20 f4       	brcc	.+8      	; 0x1f70 <__vector_16+0x3a>
    1f68:	02 96       	adiw	r24, 0x02	; 2
    1f6a:	a1 1d       	adc	r26, r1
    1f6c:	b1 1d       	adc	r27, r1
    1f6e:	05 c0       	rjmp	.+10     	; 0x1f7a <__vector_16+0x44>
    1f70:	29 e8       	ldi	r18, 0x89	; 137
    1f72:	23 0f       	add	r18, r19
    1f74:	03 96       	adiw	r24, 0x03	; 3
    1f76:	a1 1d       	adc	r26, r1
    1f78:	b1 1d       	adc	r27, r1
    1f7a:	20 93 f2 03 	sts	0x03F2, r18	; 0x8003f2 <timer0_fract>
    1f7e:	80 93 f3 03 	sts	0x03F3, r24	; 0x8003f3 <timer0_millis>
    1f82:	90 93 f4 03 	sts	0x03F4, r25	; 0x8003f4 <timer0_millis+0x1>
    1f86:	a0 93 f5 03 	sts	0x03F5, r26	; 0x8003f5 <timer0_millis+0x2>
    1f8a:	b0 93 f6 03 	sts	0x03F6, r27	; 0x8003f6 <timer0_millis+0x3>
    1f8e:	80 91 f7 03 	lds	r24, 0x03F7	; 0x8003f7 <timer0_overflow_count>
    1f92:	90 91 f8 03 	lds	r25, 0x03F8	; 0x8003f8 <timer0_overflow_count+0x1>
    1f96:	a0 91 f9 03 	lds	r26, 0x03F9	; 0x8003f9 <timer0_overflow_count+0x2>
    1f9a:	b0 91 fa 03 	lds	r27, 0x03FA	; 0x8003fa <timer0_overflow_count+0x3>
    1f9e:	01 96       	adiw	r24, 0x01	; 1
    1fa0:	a1 1d       	adc	r26, r1
    1fa2:	b1 1d       	adc	r27, r1
    1fa4:	80 93 f7 03 	sts	0x03F7, r24	; 0x8003f7 <timer0_overflow_count>
    1fa8:	90 93 f8 03 	sts	0x03F8, r25	; 0x8003f8 <timer0_overflow_count+0x1>
    1fac:	a0 93 f9 03 	sts	0x03F9, r26	; 0x8003f9 <timer0_overflow_count+0x2>
    1fb0:	b0 93 fa 03 	sts	0x03FA, r27	; 0x8003fa <timer0_overflow_count+0x3>
    1fb4:	bf 91       	pop	r27
    1fb6:	af 91       	pop	r26
    1fb8:	9f 91       	pop	r25
    1fba:	8f 91       	pop	r24
    1fbc:	3f 91       	pop	r19
    1fbe:	2f 91       	pop	r18
    1fc0:	0f 90       	pop	r0
    1fc2:	0f be       	out	0x3f, r0	; 63
    1fc4:	0f 90       	pop	r0
    1fc6:	1f 90       	pop	r1
    1fc8:	18 95       	reti

00001fca <micros>:
    1fca:	3f b7       	in	r19, 0x3f	; 63
    1fcc:	f8 94       	cli
    1fce:	80 91 f7 03 	lds	r24, 0x03F7	; 0x8003f7 <timer0_overflow_count>
    1fd2:	90 91 f8 03 	lds	r25, 0x03F8	; 0x8003f8 <timer0_overflow_count+0x1>
    1fd6:	a0 91 f9 03 	lds	r26, 0x03F9	; 0x8003f9 <timer0_overflow_count+0x2>
    1fda:	b0 91 fa 03 	lds	r27, 0x03FA	; 0x8003fa <timer0_overflow_count+0x3>
    1fde:	26 b5       	in	r18, 0x26	; 38
    1fe0:	a8 9b       	sbis	0x15, 0	; 21
    1fe2:	05 c0       	rjmp	.+10     	; 0x1fee <micros+0x24>
    1fe4:	2f 3f       	cpi	r18, 0xFF	; 255
    1fe6:	19 f0       	breq	.+6      	; 0x1fee <micros+0x24>
    1fe8:	01 96       	adiw	r24, 0x01	; 1
    1fea:	a1 1d       	adc	r26, r1
    1fec:	b1 1d       	adc	r27, r1
    1fee:	3f bf       	out	0x3f, r19	; 63
    1ff0:	ba 2f       	mov	r27, r26
    1ff2:	a9 2f       	mov	r26, r25
    1ff4:	98 2f       	mov	r25, r24
    1ff6:	88 27       	eor	r24, r24
    1ff8:	82 0f       	add	r24, r18
    1ffa:	91 1d       	adc	r25, r1
    1ffc:	a1 1d       	adc	r26, r1
    1ffe:	b1 1d       	adc	r27, r1
    2000:	bc 01       	movw	r22, r24
    2002:	cd 01       	movw	r24, r26
    2004:	43 e0       	ldi	r20, 0x03	; 3
    2006:	66 0f       	add	r22, r22
    2008:	77 1f       	adc	r23, r23
    200a:	88 1f       	adc	r24, r24
    200c:	99 1f       	adc	r25, r25
    200e:	4a 95       	dec	r20
    2010:	d1 f7       	brne	.-12     	; 0x2006 <micros+0x3c>
    2012:	08 95       	ret

00002014 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    2014:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    2016:	84 b5       	in	r24, 0x24	; 36
    2018:	82 60       	ori	r24, 0x02	; 2
    201a:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    201c:	84 b5       	in	r24, 0x24	; 36
    201e:	81 60       	ori	r24, 0x01	; 1
    2020:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    2022:	85 b5       	in	r24, 0x25	; 37
    2024:	82 60       	ori	r24, 0x02	; 2
    2026:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    2028:	85 b5       	in	r24, 0x25	; 37
    202a:	81 60       	ori	r24, 0x01	; 1
    202c:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    202e:	ee e6       	ldi	r30, 0x6E	; 110
    2030:	f0 e0       	ldi	r31, 0x00	; 0
    2032:	80 81       	ld	r24, Z
    2034:	81 60       	ori	r24, 0x01	; 1
    2036:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    2038:	e1 e8       	ldi	r30, 0x81	; 129
    203a:	f0 e0       	ldi	r31, 0x00	; 0
    203c:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    203e:	80 81       	ld	r24, Z
    2040:	82 60       	ori	r24, 0x02	; 2
    2042:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    2044:	80 81       	ld	r24, Z
    2046:	81 60       	ori	r24, 0x01	; 1
    2048:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    204a:	e0 e8       	ldi	r30, 0x80	; 128
    204c:	f0 e0       	ldi	r31, 0x00	; 0
    204e:	80 81       	ld	r24, Z
    2050:	81 60       	ori	r24, 0x01	; 1
    2052:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    2054:	e1 eb       	ldi	r30, 0xB1	; 177
    2056:	f0 e0       	ldi	r31, 0x00	; 0
    2058:	80 81       	ld	r24, Z
    205a:	84 60       	ori	r24, 0x04	; 4
    205c:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    205e:	e0 eb       	ldi	r30, 0xB0	; 176
    2060:	f0 e0       	ldi	r31, 0x00	; 0
    2062:	80 81       	ld	r24, Z
    2064:	81 60       	ori	r24, 0x01	; 1
    2066:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    2068:	e1 e9       	ldi	r30, 0x91	; 145
    206a:	f0 e0       	ldi	r31, 0x00	; 0
    206c:	80 81       	ld	r24, Z
    206e:	82 60       	ori	r24, 0x02	; 2
    2070:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
    2072:	80 81       	ld	r24, Z
    2074:	81 60       	ori	r24, 0x01	; 1
    2076:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    2078:	e0 e9       	ldi	r30, 0x90	; 144
    207a:	f0 e0       	ldi	r31, 0x00	; 0
    207c:	80 81       	ld	r24, Z
    207e:	81 60       	ori	r24, 0x01	; 1
    2080:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
    2082:	e1 ea       	ldi	r30, 0xA1	; 161
    2084:	f0 e0       	ldi	r31, 0x00	; 0
    2086:	80 81       	ld	r24, Z
    2088:	82 60       	ori	r24, 0x02	; 2
    208a:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
    208c:	80 81       	ld	r24, Z
    208e:	81 60       	ori	r24, 0x01	; 1
    2090:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
    2092:	e0 ea       	ldi	r30, 0xA0	; 160
    2094:	f0 e0       	ldi	r31, 0x00	; 0
    2096:	80 81       	ld	r24, Z
    2098:	81 60       	ori	r24, 0x01	; 1
    209a:	80 83       	st	Z, r24
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
		sbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#elif F_CPU >= 8000000 // 8 MHz / 64 = 125 KHz
		sbi(ADCSRA, ADPS2);
    209c:	ea e7       	ldi	r30, 0x7A	; 122
    209e:	f0 e0       	ldi	r31, 0x00	; 0
    20a0:	80 81       	ld	r24, Z
    20a2:	84 60       	ori	r24, 0x04	; 4
    20a4:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    20a6:	80 81       	ld	r24, Z
    20a8:	82 60       	ori	r24, 0x02	; 2
    20aa:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS0);
    20ac:	80 81       	ld	r24, Z
    20ae:	8e 7f       	andi	r24, 0xFE	; 254
    20b0:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    20b2:	80 81       	ld	r24, Z
    20b4:	80 68       	ori	r24, 0x80	; 128
    20b6:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    20b8:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    20bc:	08 95       	ret

000020be <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    20be:	90 e0       	ldi	r25, 0x00	; 0
    20c0:	fc 01       	movw	r30, r24
    20c2:	31 97       	sbiw	r30, 0x01	; 1
    20c4:	ed 30       	cpi	r30, 0x0D	; 13
    20c6:	f1 05       	cpc	r31, r1
    20c8:	90 f5       	brcc	.+100    	; 0x212e <turnOffPWM+0x70>
    20ca:	e6 5a       	subi	r30, 0xA6	; 166
    20cc:	ff 4f       	sbci	r31, 0xFF	; 255
    20ce:	0c 94 25 11 	jmp	0x224a	; 0x224a <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    20d2:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    20d6:	8f 77       	andi	r24, 0x7F	; 127
    20d8:	03 c0       	rjmp	.+6      	; 0x20e0 <turnOffPWM+0x22>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    20da:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    20de:	8f 7d       	andi	r24, 0xDF	; 223
    20e0:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    20e4:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    20e6:	84 b5       	in	r24, 0x24	; 36
    20e8:	8f 77       	andi	r24, 0x7F	; 127
    20ea:	02 c0       	rjmp	.+4      	; 0x20f0 <turnOffPWM+0x32>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    20ec:	84 b5       	in	r24, 0x24	; 36
    20ee:	8f 7d       	andi	r24, 0xDF	; 223
    20f0:	84 bd       	out	0x24, r24	; 36
    20f2:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    20f4:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    20f8:	8f 77       	andi	r24, 0x7F	; 127
    20fa:	03 c0       	rjmp	.+6      	; 0x2102 <turnOffPWM+0x44>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    20fc:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    2100:	8f 7d       	andi	r24, 0xDF	; 223
    2102:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    2106:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
    2108:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7f8090>
    210c:	8f 77       	andi	r24, 0x7F	; 127
    210e:	03 c0       	rjmp	.+6      	; 0x2116 <turnOffPWM+0x58>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    2110:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7f8090>
    2114:	8f 7d       	andi	r24, 0xDF	; 223
    2116:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7f8090>
    211a:	08 95       	ret
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
    211c:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7f80a0>
    2120:	8f 77       	andi	r24, 0x7F	; 127
    2122:	03 c0       	rjmp	.+6      	; 0x212a <turnOffPWM+0x6c>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
    2124:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7f80a0>
    2128:	8f 7d       	andi	r24, 0xDF	; 223
    212a:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7f80a0>
    212e:	08 95       	ret

00002130 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    2130:	cf 93       	push	r28
    2132:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    2134:	90 e0       	ldi	r25, 0x00	; 0
    2136:	fc 01       	movw	r30, r24
    2138:	e0 5a       	subi	r30, 0xA0	; 160
    213a:	fe 4f       	sbci	r31, 0xFE	; 254
    213c:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    213e:	fc 01       	movw	r30, r24
    2140:	ec 58       	subi	r30, 0x8C	; 140
    2142:	fe 4f       	sbci	r31, 0xFE	; 254
    2144:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    2146:	88 23       	and	r24, r24
    2148:	61 f1       	breq	.+88     	; 0x21a2 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    214a:	90 e0       	ldi	r25, 0x00	; 0
    214c:	88 0f       	add	r24, r24
    214e:	99 1f       	adc	r25, r25
    2150:	fc 01       	movw	r30, r24
    2152:	ee 56       	subi	r30, 0x6E	; 110
    2154:	fe 4f       	sbci	r31, 0xFE	; 254
    2156:	c5 91       	lpm	r28, Z+
    2158:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    215a:	fc 01       	movw	r30, r24
    215c:	e8 57       	subi	r30, 0x78	; 120
    215e:	fe 4f       	sbci	r31, 0xFE	; 254
    2160:	a5 91       	lpm	r26, Z+
    2162:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    2164:	61 11       	cpse	r22, r1
    2166:	09 c0       	rjmp	.+18     	; 0x217a <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    2168:	9f b7       	in	r25, 0x3f	; 63
                cli();
    216a:	f8 94       	cli
		*reg &= ~bit;
    216c:	88 81       	ld	r24, Y
    216e:	20 95       	com	r18
    2170:	82 23       	and	r24, r18
    2172:	88 83       	st	Y, r24
		*out &= ~bit;
    2174:	ec 91       	ld	r30, X
    2176:	2e 23       	and	r18, r30
    2178:	0b c0       	rjmp	.+22     	; 0x2190 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    217a:	62 30       	cpi	r22, 0x02	; 2
    217c:	61 f4       	brne	.+24     	; 0x2196 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    217e:	9f b7       	in	r25, 0x3f	; 63
                cli();
    2180:	f8 94       	cli
		*reg &= ~bit;
    2182:	88 81       	ld	r24, Y
    2184:	32 2f       	mov	r19, r18
    2186:	30 95       	com	r19
    2188:	83 23       	and	r24, r19
    218a:	88 83       	st	Y, r24
		*out |= bit;
    218c:	ec 91       	ld	r30, X
    218e:	2e 2b       	or	r18, r30
    2190:	2c 93       	st	X, r18
		SREG = oldSREG;
    2192:	9f bf       	out	0x3f, r25	; 63
    2194:	06 c0       	rjmp	.+12     	; 0x21a2 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    2196:	8f b7       	in	r24, 0x3f	; 63
                cli();
    2198:	f8 94       	cli
		*reg |= bit;
    219a:	e8 81       	ld	r30, Y
    219c:	2e 2b       	or	r18, r30
    219e:	28 83       	st	Y, r18
		SREG = oldSREG;
    21a0:	8f bf       	out	0x3f, r24	; 63
	}
}
    21a2:	df 91       	pop	r29
    21a4:	cf 91       	pop	r28
    21a6:	08 95       	ret

000021a8 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    21a8:	1f 93       	push	r17
    21aa:	cf 93       	push	r28
    21ac:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    21ae:	28 2f       	mov	r18, r24
    21b0:	30 e0       	ldi	r19, 0x00	; 0
    21b2:	f9 01       	movw	r30, r18
    21b4:	e4 5b       	subi	r30, 0xB4	; 180
    21b6:	fe 4f       	sbci	r31, 0xFE	; 254
    21b8:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    21ba:	f9 01       	movw	r30, r18
    21bc:	e0 5a       	subi	r30, 0xA0	; 160
    21be:	fe 4f       	sbci	r31, 0xFE	; 254
    21c0:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    21c2:	f9 01       	movw	r30, r18
    21c4:	ec 58       	subi	r30, 0x8C	; 140
    21c6:	fe 4f       	sbci	r31, 0xFE	; 254
    21c8:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    21ca:	cc 23       	and	r28, r28
    21cc:	c1 f0       	breq	.+48     	; 0x21fe <digitalWrite+0x56>
    21ce:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    21d0:	81 11       	cpse	r24, r1
    21d2:	0e 94 5f 10 	call	0x20be	; 0x20be <turnOffPWM>

	out = portOutputRegister(port);
    21d6:	ec 2f       	mov	r30, r28
    21d8:	f0 e0       	ldi	r31, 0x00	; 0
    21da:	ee 0f       	add	r30, r30
    21dc:	ff 1f       	adc	r31, r31
    21de:	e8 57       	subi	r30, 0x78	; 120
    21e0:	fe 4f       	sbci	r31, 0xFE	; 254
    21e2:	a5 91       	lpm	r26, Z+
    21e4:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    21e6:	9f b7       	in	r25, 0x3f	; 63
	cli();
    21e8:	f8 94       	cli

	if (val == LOW) {
    21ea:	11 11       	cpse	r17, r1
    21ec:	04 c0       	rjmp	.+8      	; 0x21f6 <digitalWrite+0x4e>
		*out &= ~bit;
    21ee:	8c 91       	ld	r24, X
    21f0:	d0 95       	com	r29
    21f2:	d8 23       	and	r29, r24
    21f4:	02 c0       	rjmp	.+4      	; 0x21fa <digitalWrite+0x52>
	} else {
		*out |= bit;
    21f6:	ec 91       	ld	r30, X
    21f8:	de 2b       	or	r29, r30
    21fa:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    21fc:	9f bf       	out	0x3f, r25	; 63
}
    21fe:	df 91       	pop	r29
    2200:	cf 91       	pop	r28
    2202:	1f 91       	pop	r17
    2204:	08 95       	ret

00002206 <__udivmodsi4>:
    2206:	a1 e2       	ldi	r26, 0x21	; 33
    2208:	1a 2e       	mov	r1, r26
    220a:	aa 1b       	sub	r26, r26
    220c:	bb 1b       	sub	r27, r27
    220e:	fd 01       	movw	r30, r26
    2210:	0d c0       	rjmp	.+26     	; 0x222c <__udivmodsi4_ep>

00002212 <__udivmodsi4_loop>:
    2212:	aa 1f       	adc	r26, r26
    2214:	bb 1f       	adc	r27, r27
    2216:	ee 1f       	adc	r30, r30
    2218:	ff 1f       	adc	r31, r31
    221a:	a2 17       	cp	r26, r18
    221c:	b3 07       	cpc	r27, r19
    221e:	e4 07       	cpc	r30, r20
    2220:	f5 07       	cpc	r31, r21
    2222:	20 f0       	brcs	.+8      	; 0x222c <__udivmodsi4_ep>
    2224:	a2 1b       	sub	r26, r18
    2226:	b3 0b       	sbc	r27, r19
    2228:	e4 0b       	sbc	r30, r20
    222a:	f5 0b       	sbc	r31, r21

0000222c <__udivmodsi4_ep>:
    222c:	66 1f       	adc	r22, r22
    222e:	77 1f       	adc	r23, r23
    2230:	88 1f       	adc	r24, r24
    2232:	99 1f       	adc	r25, r25
    2234:	1a 94       	dec	r1
    2236:	69 f7       	brne	.-38     	; 0x2212 <__udivmodsi4_loop>
    2238:	60 95       	com	r22
    223a:	70 95       	com	r23
    223c:	80 95       	com	r24
    223e:	90 95       	com	r25
    2240:	9b 01       	movw	r18, r22
    2242:	ac 01       	movw	r20, r24
    2244:	bd 01       	movw	r22, r26
    2246:	cf 01       	movw	r24, r30
    2248:	08 95       	ret

0000224a <__tablejump2__>:
    224a:	ee 0f       	add	r30, r30
    224c:	ff 1f       	adc	r31, r31
    224e:	05 90       	lpm	r0, Z+
    2250:	f4 91       	lpm	r31, Z
    2252:	e0 2d       	mov	r30, r0
    2254:	09 94       	ijmp

00002256 <malloc>:
    2256:	0f 93       	push	r16
    2258:	1f 93       	push	r17
    225a:	cf 93       	push	r28
    225c:	df 93       	push	r29
    225e:	82 30       	cpi	r24, 0x02	; 2
    2260:	91 05       	cpc	r25, r1
    2262:	10 f4       	brcc	.+4      	; 0x2268 <malloc+0x12>
    2264:	82 e0       	ldi	r24, 0x02	; 2
    2266:	90 e0       	ldi	r25, 0x00	; 0
    2268:	e0 91 fd 03 	lds	r30, 0x03FD	; 0x8003fd <__flp>
    226c:	f0 91 fe 03 	lds	r31, 0x03FE	; 0x8003fe <__flp+0x1>
    2270:	20 e0       	ldi	r18, 0x00	; 0
    2272:	30 e0       	ldi	r19, 0x00	; 0
    2274:	a0 e0       	ldi	r26, 0x00	; 0
    2276:	b0 e0       	ldi	r27, 0x00	; 0
    2278:	30 97       	sbiw	r30, 0x00	; 0
    227a:	19 f1       	breq	.+70     	; 0x22c2 <malloc+0x6c>
    227c:	40 81       	ld	r20, Z
    227e:	51 81       	ldd	r21, Z+1	; 0x01
    2280:	02 81       	ldd	r16, Z+2	; 0x02
    2282:	13 81       	ldd	r17, Z+3	; 0x03
    2284:	48 17       	cp	r20, r24
    2286:	59 07       	cpc	r21, r25
    2288:	c8 f0       	brcs	.+50     	; 0x22bc <malloc+0x66>
    228a:	84 17       	cp	r24, r20
    228c:	95 07       	cpc	r25, r21
    228e:	69 f4       	brne	.+26     	; 0x22aa <malloc+0x54>
    2290:	10 97       	sbiw	r26, 0x00	; 0
    2292:	31 f0       	breq	.+12     	; 0x22a0 <malloc+0x4a>
    2294:	12 96       	adiw	r26, 0x02	; 2
    2296:	0c 93       	st	X, r16
    2298:	12 97       	sbiw	r26, 0x02	; 2
    229a:	13 96       	adiw	r26, 0x03	; 3
    229c:	1c 93       	st	X, r17
    229e:	27 c0       	rjmp	.+78     	; 0x22ee <malloc+0x98>
    22a0:	00 93 fd 03 	sts	0x03FD, r16	; 0x8003fd <__flp>
    22a4:	10 93 fe 03 	sts	0x03FE, r17	; 0x8003fe <__flp+0x1>
    22a8:	22 c0       	rjmp	.+68     	; 0x22ee <malloc+0x98>
    22aa:	21 15       	cp	r18, r1
    22ac:	31 05       	cpc	r19, r1
    22ae:	19 f0       	breq	.+6      	; 0x22b6 <malloc+0x60>
    22b0:	42 17       	cp	r20, r18
    22b2:	53 07       	cpc	r21, r19
    22b4:	18 f4       	brcc	.+6      	; 0x22bc <malloc+0x66>
    22b6:	9a 01       	movw	r18, r20
    22b8:	bd 01       	movw	r22, r26
    22ba:	ef 01       	movw	r28, r30
    22bc:	df 01       	movw	r26, r30
    22be:	f8 01       	movw	r30, r16
    22c0:	db cf       	rjmp	.-74     	; 0x2278 <malloc+0x22>
    22c2:	21 15       	cp	r18, r1
    22c4:	31 05       	cpc	r19, r1
    22c6:	f9 f0       	breq	.+62     	; 0x2306 <malloc+0xb0>
    22c8:	28 1b       	sub	r18, r24
    22ca:	39 0b       	sbc	r19, r25
    22cc:	24 30       	cpi	r18, 0x04	; 4
    22ce:	31 05       	cpc	r19, r1
    22d0:	80 f4       	brcc	.+32     	; 0x22f2 <malloc+0x9c>
    22d2:	8a 81       	ldd	r24, Y+2	; 0x02
    22d4:	9b 81       	ldd	r25, Y+3	; 0x03
    22d6:	61 15       	cp	r22, r1
    22d8:	71 05       	cpc	r23, r1
    22da:	21 f0       	breq	.+8      	; 0x22e4 <malloc+0x8e>
    22dc:	fb 01       	movw	r30, r22
    22de:	93 83       	std	Z+3, r25	; 0x03
    22e0:	82 83       	std	Z+2, r24	; 0x02
    22e2:	04 c0       	rjmp	.+8      	; 0x22ec <malloc+0x96>
    22e4:	90 93 fe 03 	sts	0x03FE, r25	; 0x8003fe <__flp+0x1>
    22e8:	80 93 fd 03 	sts	0x03FD, r24	; 0x8003fd <__flp>
    22ec:	fe 01       	movw	r30, r28
    22ee:	32 96       	adiw	r30, 0x02	; 2
    22f0:	44 c0       	rjmp	.+136    	; 0x237a <malloc+0x124>
    22f2:	fe 01       	movw	r30, r28
    22f4:	e2 0f       	add	r30, r18
    22f6:	f3 1f       	adc	r31, r19
    22f8:	81 93       	st	Z+, r24
    22fa:	91 93       	st	Z+, r25
    22fc:	22 50       	subi	r18, 0x02	; 2
    22fe:	31 09       	sbc	r19, r1
    2300:	39 83       	std	Y+1, r19	; 0x01
    2302:	28 83       	st	Y, r18
    2304:	3a c0       	rjmp	.+116    	; 0x237a <malloc+0x124>
    2306:	20 91 fb 03 	lds	r18, 0x03FB	; 0x8003fb <__brkval>
    230a:	30 91 fc 03 	lds	r19, 0x03FC	; 0x8003fc <__brkval+0x1>
    230e:	23 2b       	or	r18, r19
    2310:	41 f4       	brne	.+16     	; 0x2322 <malloc+0xcc>
    2312:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    2316:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    231a:	30 93 fc 03 	sts	0x03FC, r19	; 0x8003fc <__brkval+0x1>
    231e:	20 93 fb 03 	sts	0x03FB, r18	; 0x8003fb <__brkval>
    2322:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    2326:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    232a:	21 15       	cp	r18, r1
    232c:	31 05       	cpc	r19, r1
    232e:	41 f4       	brne	.+16     	; 0x2340 <malloc+0xea>
    2330:	2d b7       	in	r18, 0x3d	; 61
    2332:	3e b7       	in	r19, 0x3e	; 62
    2334:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    2338:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    233c:	24 1b       	sub	r18, r20
    233e:	35 0b       	sbc	r19, r21
    2340:	e0 91 fb 03 	lds	r30, 0x03FB	; 0x8003fb <__brkval>
    2344:	f0 91 fc 03 	lds	r31, 0x03FC	; 0x8003fc <__brkval+0x1>
    2348:	e2 17       	cp	r30, r18
    234a:	f3 07       	cpc	r31, r19
    234c:	a0 f4       	brcc	.+40     	; 0x2376 <malloc+0x120>
    234e:	2e 1b       	sub	r18, r30
    2350:	3f 0b       	sbc	r19, r31
    2352:	28 17       	cp	r18, r24
    2354:	39 07       	cpc	r19, r25
    2356:	78 f0       	brcs	.+30     	; 0x2376 <malloc+0x120>
    2358:	ac 01       	movw	r20, r24
    235a:	4e 5f       	subi	r20, 0xFE	; 254
    235c:	5f 4f       	sbci	r21, 0xFF	; 255
    235e:	24 17       	cp	r18, r20
    2360:	35 07       	cpc	r19, r21
    2362:	48 f0       	brcs	.+18     	; 0x2376 <malloc+0x120>
    2364:	4e 0f       	add	r20, r30
    2366:	5f 1f       	adc	r21, r31
    2368:	50 93 fc 03 	sts	0x03FC, r21	; 0x8003fc <__brkval+0x1>
    236c:	40 93 fb 03 	sts	0x03FB, r20	; 0x8003fb <__brkval>
    2370:	81 93       	st	Z+, r24
    2372:	91 93       	st	Z+, r25
    2374:	02 c0       	rjmp	.+4      	; 0x237a <malloc+0x124>
    2376:	e0 e0       	ldi	r30, 0x00	; 0
    2378:	f0 e0       	ldi	r31, 0x00	; 0
    237a:	cf 01       	movw	r24, r30
    237c:	df 91       	pop	r29
    237e:	cf 91       	pop	r28
    2380:	1f 91       	pop	r17
    2382:	0f 91       	pop	r16
    2384:	08 95       	ret

00002386 <free>:
    2386:	cf 93       	push	r28
    2388:	df 93       	push	r29
    238a:	00 97       	sbiw	r24, 0x00	; 0
    238c:	09 f4       	brne	.+2      	; 0x2390 <free+0xa>
    238e:	81 c0       	rjmp	.+258    	; 0x2492 <free+0x10c>
    2390:	fc 01       	movw	r30, r24
    2392:	32 97       	sbiw	r30, 0x02	; 2
    2394:	13 82       	std	Z+3, r1	; 0x03
    2396:	12 82       	std	Z+2, r1	; 0x02
    2398:	a0 91 fd 03 	lds	r26, 0x03FD	; 0x8003fd <__flp>
    239c:	b0 91 fe 03 	lds	r27, 0x03FE	; 0x8003fe <__flp+0x1>
    23a0:	10 97       	sbiw	r26, 0x00	; 0
    23a2:	81 f4       	brne	.+32     	; 0x23c4 <free+0x3e>
    23a4:	20 81       	ld	r18, Z
    23a6:	31 81       	ldd	r19, Z+1	; 0x01
    23a8:	82 0f       	add	r24, r18
    23aa:	93 1f       	adc	r25, r19
    23ac:	20 91 fb 03 	lds	r18, 0x03FB	; 0x8003fb <__brkval>
    23b0:	30 91 fc 03 	lds	r19, 0x03FC	; 0x8003fc <__brkval+0x1>
    23b4:	28 17       	cp	r18, r24
    23b6:	39 07       	cpc	r19, r25
    23b8:	51 f5       	brne	.+84     	; 0x240e <free+0x88>
    23ba:	f0 93 fc 03 	sts	0x03FC, r31	; 0x8003fc <__brkval+0x1>
    23be:	e0 93 fb 03 	sts	0x03FB, r30	; 0x8003fb <__brkval>
    23c2:	67 c0       	rjmp	.+206    	; 0x2492 <free+0x10c>
    23c4:	ed 01       	movw	r28, r26
    23c6:	20 e0       	ldi	r18, 0x00	; 0
    23c8:	30 e0       	ldi	r19, 0x00	; 0
    23ca:	ce 17       	cp	r28, r30
    23cc:	df 07       	cpc	r29, r31
    23ce:	40 f4       	brcc	.+16     	; 0x23e0 <free+0x5a>
    23d0:	4a 81       	ldd	r20, Y+2	; 0x02
    23d2:	5b 81       	ldd	r21, Y+3	; 0x03
    23d4:	9e 01       	movw	r18, r28
    23d6:	41 15       	cp	r20, r1
    23d8:	51 05       	cpc	r21, r1
    23da:	f1 f0       	breq	.+60     	; 0x2418 <free+0x92>
    23dc:	ea 01       	movw	r28, r20
    23de:	f5 cf       	rjmp	.-22     	; 0x23ca <free+0x44>
    23e0:	d3 83       	std	Z+3, r29	; 0x03
    23e2:	c2 83       	std	Z+2, r28	; 0x02
    23e4:	40 81       	ld	r20, Z
    23e6:	51 81       	ldd	r21, Z+1	; 0x01
    23e8:	84 0f       	add	r24, r20
    23ea:	95 1f       	adc	r25, r21
    23ec:	c8 17       	cp	r28, r24
    23ee:	d9 07       	cpc	r29, r25
    23f0:	59 f4       	brne	.+22     	; 0x2408 <free+0x82>
    23f2:	88 81       	ld	r24, Y
    23f4:	99 81       	ldd	r25, Y+1	; 0x01
    23f6:	84 0f       	add	r24, r20
    23f8:	95 1f       	adc	r25, r21
    23fa:	02 96       	adiw	r24, 0x02	; 2
    23fc:	91 83       	std	Z+1, r25	; 0x01
    23fe:	80 83       	st	Z, r24
    2400:	8a 81       	ldd	r24, Y+2	; 0x02
    2402:	9b 81       	ldd	r25, Y+3	; 0x03
    2404:	93 83       	std	Z+3, r25	; 0x03
    2406:	82 83       	std	Z+2, r24	; 0x02
    2408:	21 15       	cp	r18, r1
    240a:	31 05       	cpc	r19, r1
    240c:	29 f4       	brne	.+10     	; 0x2418 <free+0x92>
    240e:	f0 93 fe 03 	sts	0x03FE, r31	; 0x8003fe <__flp+0x1>
    2412:	e0 93 fd 03 	sts	0x03FD, r30	; 0x8003fd <__flp>
    2416:	3d c0       	rjmp	.+122    	; 0x2492 <free+0x10c>
    2418:	e9 01       	movw	r28, r18
    241a:	fb 83       	std	Y+3, r31	; 0x03
    241c:	ea 83       	std	Y+2, r30	; 0x02
    241e:	49 91       	ld	r20, Y+
    2420:	59 91       	ld	r21, Y+
    2422:	c4 0f       	add	r28, r20
    2424:	d5 1f       	adc	r29, r21
    2426:	ec 17       	cp	r30, r28
    2428:	fd 07       	cpc	r31, r29
    242a:	61 f4       	brne	.+24     	; 0x2444 <free+0xbe>
    242c:	80 81       	ld	r24, Z
    242e:	91 81       	ldd	r25, Z+1	; 0x01
    2430:	84 0f       	add	r24, r20
    2432:	95 1f       	adc	r25, r21
    2434:	02 96       	adiw	r24, 0x02	; 2
    2436:	e9 01       	movw	r28, r18
    2438:	99 83       	std	Y+1, r25	; 0x01
    243a:	88 83       	st	Y, r24
    243c:	82 81       	ldd	r24, Z+2	; 0x02
    243e:	93 81       	ldd	r25, Z+3	; 0x03
    2440:	9b 83       	std	Y+3, r25	; 0x03
    2442:	8a 83       	std	Y+2, r24	; 0x02
    2444:	e0 e0       	ldi	r30, 0x00	; 0
    2446:	f0 e0       	ldi	r31, 0x00	; 0
    2448:	12 96       	adiw	r26, 0x02	; 2
    244a:	8d 91       	ld	r24, X+
    244c:	9c 91       	ld	r25, X
    244e:	13 97       	sbiw	r26, 0x03	; 3
    2450:	00 97       	sbiw	r24, 0x00	; 0
    2452:	19 f0       	breq	.+6      	; 0x245a <free+0xd4>
    2454:	fd 01       	movw	r30, r26
    2456:	dc 01       	movw	r26, r24
    2458:	f7 cf       	rjmp	.-18     	; 0x2448 <free+0xc2>
    245a:	8d 91       	ld	r24, X+
    245c:	9c 91       	ld	r25, X
    245e:	11 97       	sbiw	r26, 0x01	; 1
    2460:	9d 01       	movw	r18, r26
    2462:	2e 5f       	subi	r18, 0xFE	; 254
    2464:	3f 4f       	sbci	r19, 0xFF	; 255
    2466:	82 0f       	add	r24, r18
    2468:	93 1f       	adc	r25, r19
    246a:	20 91 fb 03 	lds	r18, 0x03FB	; 0x8003fb <__brkval>
    246e:	30 91 fc 03 	lds	r19, 0x03FC	; 0x8003fc <__brkval+0x1>
    2472:	28 17       	cp	r18, r24
    2474:	39 07       	cpc	r19, r25
    2476:	69 f4       	brne	.+26     	; 0x2492 <free+0x10c>
    2478:	30 97       	sbiw	r30, 0x00	; 0
    247a:	29 f4       	brne	.+10     	; 0x2486 <free+0x100>
    247c:	10 92 fe 03 	sts	0x03FE, r1	; 0x8003fe <__flp+0x1>
    2480:	10 92 fd 03 	sts	0x03FD, r1	; 0x8003fd <__flp>
    2484:	02 c0       	rjmp	.+4      	; 0x248a <free+0x104>
    2486:	13 82       	std	Z+3, r1	; 0x03
    2488:	12 82       	std	Z+2, r1	; 0x02
    248a:	b0 93 fc 03 	sts	0x03FC, r27	; 0x8003fc <__brkval+0x1>
    248e:	a0 93 fb 03 	sts	0x03FB, r26	; 0x8003fb <__brkval>
    2492:	df 91       	pop	r29
    2494:	cf 91       	pop	r28
    2496:	08 95       	ret

00002498 <atoi>:
    2498:	fc 01       	movw	r30, r24
    249a:	88 27       	eor	r24, r24
    249c:	99 27       	eor	r25, r25
    249e:	e8 94       	clt
    24a0:	21 91       	ld	r18, Z+
    24a2:	20 32       	cpi	r18, 0x20	; 32
    24a4:	e9 f3       	breq	.-6      	; 0x24a0 <atoi+0x8>
    24a6:	29 30       	cpi	r18, 0x09	; 9
    24a8:	10 f0       	brcs	.+4      	; 0x24ae <atoi+0x16>
    24aa:	2e 30       	cpi	r18, 0x0E	; 14
    24ac:	c8 f3       	brcs	.-14     	; 0x24a0 <atoi+0x8>
    24ae:	2b 32       	cpi	r18, 0x2B	; 43
    24b0:	41 f0       	breq	.+16     	; 0x24c2 <atoi+0x2a>
    24b2:	2d 32       	cpi	r18, 0x2D	; 45
    24b4:	39 f4       	brne	.+14     	; 0x24c4 <atoi+0x2c>
    24b6:	68 94       	set
    24b8:	04 c0       	rjmp	.+8      	; 0x24c2 <atoi+0x2a>
    24ba:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <__mulhi_const_10>
    24be:	82 0f       	add	r24, r18
    24c0:	91 1d       	adc	r25, r1
    24c2:	21 91       	ld	r18, Z+
    24c4:	20 53       	subi	r18, 0x30	; 48
    24c6:	2a 30       	cpi	r18, 0x0A	; 10
    24c8:	c0 f3       	brcs	.-16     	; 0x24ba <atoi+0x22>
    24ca:	1e f4       	brtc	.+6      	; 0x24d2 <atoi+0x3a>
    24cc:	90 95       	com	r25
    24ce:	81 95       	neg	r24
    24d0:	9f 4f       	sbci	r25, 0xFF	; 255
    24d2:	08 95       	ret

000024d4 <memmove>:
    24d4:	68 17       	cp	r22, r24
    24d6:	79 07       	cpc	r23, r25
    24d8:	68 f4       	brcc	.+26     	; 0x24f4 <memmove+0x20>
    24da:	fb 01       	movw	r30, r22
    24dc:	dc 01       	movw	r26, r24
    24de:	e4 0f       	add	r30, r20
    24e0:	f5 1f       	adc	r31, r21
    24e2:	a4 0f       	add	r26, r20
    24e4:	b5 1f       	adc	r27, r21
    24e6:	02 c0       	rjmp	.+4      	; 0x24ec <memmove+0x18>
    24e8:	02 90       	ld	r0, -Z
    24ea:	0e 92       	st	-X, r0
    24ec:	41 50       	subi	r20, 0x01	; 1
    24ee:	50 40       	sbci	r21, 0x00	; 0
    24f0:	d8 f7       	brcc	.-10     	; 0x24e8 <memmove+0x14>
    24f2:	08 95       	ret
    24f4:	0c 94 9c 14 	jmp	0x2938	; 0x2938 <memcpy>

000024f8 <__mulhi_const_10>:
    24f8:	7a e0       	ldi	r23, 0x0A	; 10
    24fa:	97 9f       	mul	r25, r23
    24fc:	90 2d       	mov	r25, r0
    24fe:	87 9f       	mul	r24, r23
    2500:	80 2d       	mov	r24, r0
    2502:	91 0d       	add	r25, r1
    2504:	11 24       	eor	r1, r1
    2506:	08 95       	ret

00002508 <vsnprintf_P>:
    2508:	ae e0       	ldi	r26, 0x0E	; 14
    250a:	b0 e0       	ldi	r27, 0x00	; 0
    250c:	ea e8       	ldi	r30, 0x8A	; 138
    250e:	f2 e1       	ldi	r31, 0x12	; 18
    2510:	0c 94 58 15 	jmp	0x2ab0	; 0x2ab0 <__prologue_saves__+0x1c>
    2514:	8c 01       	movw	r16, r24
    2516:	fa 01       	movw	r30, r20
    2518:	8e e0       	ldi	r24, 0x0E	; 14
    251a:	8c 83       	std	Y+4, r24	; 0x04
    251c:	1a 83       	std	Y+2, r17	; 0x02
    251e:	09 83       	std	Y+1, r16	; 0x01
    2520:	77 ff       	sbrs	r23, 7
    2522:	02 c0       	rjmp	.+4      	; 0x2528 <vsnprintf_P+0x20>
    2524:	60 e0       	ldi	r22, 0x00	; 0
    2526:	70 e8       	ldi	r23, 0x80	; 128
    2528:	cb 01       	movw	r24, r22
    252a:	01 97       	sbiw	r24, 0x01	; 1
    252c:	9e 83       	std	Y+6, r25	; 0x06
    252e:	8d 83       	std	Y+5, r24	; 0x05
    2530:	a9 01       	movw	r20, r18
    2532:	bf 01       	movw	r22, r30
    2534:	ce 01       	movw	r24, r28
    2536:	01 96       	adiw	r24, 0x01	; 1
    2538:	0e 94 b0 12 	call	0x2560	; 0x2560 <vfprintf>
    253c:	4d 81       	ldd	r20, Y+5	; 0x05
    253e:	5e 81       	ldd	r21, Y+6	; 0x06
    2540:	57 fd       	sbrc	r21, 7
    2542:	0a c0       	rjmp	.+20     	; 0x2558 <vsnprintf_P+0x50>
    2544:	2f 81       	ldd	r18, Y+7	; 0x07
    2546:	38 85       	ldd	r19, Y+8	; 0x08
    2548:	42 17       	cp	r20, r18
    254a:	53 07       	cpc	r21, r19
    254c:	0c f4       	brge	.+2      	; 0x2550 <vsnprintf_P+0x48>
    254e:	9a 01       	movw	r18, r20
    2550:	f8 01       	movw	r30, r16
    2552:	e2 0f       	add	r30, r18
    2554:	f3 1f       	adc	r31, r19
    2556:	10 82       	st	Z, r1
    2558:	2e 96       	adiw	r28, 0x0e	; 14
    255a:	e4 e0       	ldi	r30, 0x04	; 4
    255c:	0c 94 74 15 	jmp	0x2ae8	; 0x2ae8 <__epilogue_restores__+0x1c>

00002560 <vfprintf>:
    2560:	ab e0       	ldi	r26, 0x0B	; 11
    2562:	b0 e0       	ldi	r27, 0x00	; 0
    2564:	e6 eb       	ldi	r30, 0xB6	; 182
    2566:	f2 e1       	ldi	r31, 0x12	; 18
    2568:	0c 94 4a 15 	jmp	0x2a94	; 0x2a94 <__prologue_saves__>
    256c:	6c 01       	movw	r12, r24
    256e:	7b 01       	movw	r14, r22
    2570:	8a 01       	movw	r16, r20
    2572:	fc 01       	movw	r30, r24
    2574:	17 82       	std	Z+7, r1	; 0x07
    2576:	16 82       	std	Z+6, r1	; 0x06
    2578:	83 81       	ldd	r24, Z+3	; 0x03
    257a:	81 ff       	sbrs	r24, 1
    257c:	cc c1       	rjmp	.+920    	; 0x2916 <vfprintf+0x3b6>
    257e:	ce 01       	movw	r24, r28
    2580:	01 96       	adiw	r24, 0x01	; 1
    2582:	3c 01       	movw	r6, r24
    2584:	f6 01       	movw	r30, r12
    2586:	93 81       	ldd	r25, Z+3	; 0x03
    2588:	f7 01       	movw	r30, r14
    258a:	93 fd       	sbrc	r25, 3
    258c:	85 91       	lpm	r24, Z+
    258e:	93 ff       	sbrs	r25, 3
    2590:	81 91       	ld	r24, Z+
    2592:	7f 01       	movw	r14, r30
    2594:	88 23       	and	r24, r24
    2596:	09 f4       	brne	.+2      	; 0x259a <vfprintf+0x3a>
    2598:	ba c1       	rjmp	.+884    	; 0x290e <vfprintf+0x3ae>
    259a:	85 32       	cpi	r24, 0x25	; 37
    259c:	39 f4       	brne	.+14     	; 0x25ac <vfprintf+0x4c>
    259e:	93 fd       	sbrc	r25, 3
    25a0:	85 91       	lpm	r24, Z+
    25a2:	93 ff       	sbrs	r25, 3
    25a4:	81 91       	ld	r24, Z+
    25a6:	7f 01       	movw	r14, r30
    25a8:	85 32       	cpi	r24, 0x25	; 37
    25aa:	29 f4       	brne	.+10     	; 0x25b6 <vfprintf+0x56>
    25ac:	b6 01       	movw	r22, r12
    25ae:	90 e0       	ldi	r25, 0x00	; 0
    25b0:	0e 94 b0 14 	call	0x2960	; 0x2960 <fputc>
    25b4:	e7 cf       	rjmp	.-50     	; 0x2584 <vfprintf+0x24>
    25b6:	91 2c       	mov	r9, r1
    25b8:	21 2c       	mov	r2, r1
    25ba:	31 2c       	mov	r3, r1
    25bc:	ff e1       	ldi	r31, 0x1F	; 31
    25be:	f3 15       	cp	r31, r3
    25c0:	d8 f0       	brcs	.+54     	; 0x25f8 <vfprintf+0x98>
    25c2:	8b 32       	cpi	r24, 0x2B	; 43
    25c4:	79 f0       	breq	.+30     	; 0x25e4 <vfprintf+0x84>
    25c6:	38 f4       	brcc	.+14     	; 0x25d6 <vfprintf+0x76>
    25c8:	80 32       	cpi	r24, 0x20	; 32
    25ca:	79 f0       	breq	.+30     	; 0x25ea <vfprintf+0x8a>
    25cc:	83 32       	cpi	r24, 0x23	; 35
    25ce:	a1 f4       	brne	.+40     	; 0x25f8 <vfprintf+0x98>
    25d0:	23 2d       	mov	r18, r3
    25d2:	20 61       	ori	r18, 0x10	; 16
    25d4:	1d c0       	rjmp	.+58     	; 0x2610 <vfprintf+0xb0>
    25d6:	8d 32       	cpi	r24, 0x2D	; 45
    25d8:	61 f0       	breq	.+24     	; 0x25f2 <vfprintf+0x92>
    25da:	80 33       	cpi	r24, 0x30	; 48
    25dc:	69 f4       	brne	.+26     	; 0x25f8 <vfprintf+0x98>
    25de:	23 2d       	mov	r18, r3
    25e0:	21 60       	ori	r18, 0x01	; 1
    25e2:	16 c0       	rjmp	.+44     	; 0x2610 <vfprintf+0xb0>
    25e4:	83 2d       	mov	r24, r3
    25e6:	82 60       	ori	r24, 0x02	; 2
    25e8:	38 2e       	mov	r3, r24
    25ea:	e3 2d       	mov	r30, r3
    25ec:	e4 60       	ori	r30, 0x04	; 4
    25ee:	3e 2e       	mov	r3, r30
    25f0:	2a c0       	rjmp	.+84     	; 0x2646 <vfprintf+0xe6>
    25f2:	f3 2d       	mov	r31, r3
    25f4:	f8 60       	ori	r31, 0x08	; 8
    25f6:	1d c0       	rjmp	.+58     	; 0x2632 <vfprintf+0xd2>
    25f8:	37 fc       	sbrc	r3, 7
    25fa:	2d c0       	rjmp	.+90     	; 0x2656 <vfprintf+0xf6>
    25fc:	20 ed       	ldi	r18, 0xD0	; 208
    25fe:	28 0f       	add	r18, r24
    2600:	2a 30       	cpi	r18, 0x0A	; 10
    2602:	40 f0       	brcs	.+16     	; 0x2614 <vfprintf+0xb4>
    2604:	8e 32       	cpi	r24, 0x2E	; 46
    2606:	b9 f4       	brne	.+46     	; 0x2636 <vfprintf+0xd6>
    2608:	36 fc       	sbrc	r3, 6
    260a:	81 c1       	rjmp	.+770    	; 0x290e <vfprintf+0x3ae>
    260c:	23 2d       	mov	r18, r3
    260e:	20 64       	ori	r18, 0x40	; 64
    2610:	32 2e       	mov	r3, r18
    2612:	19 c0       	rjmp	.+50     	; 0x2646 <vfprintf+0xe6>
    2614:	36 fe       	sbrs	r3, 6
    2616:	06 c0       	rjmp	.+12     	; 0x2624 <vfprintf+0xc4>
    2618:	8a e0       	ldi	r24, 0x0A	; 10
    261a:	98 9e       	mul	r9, r24
    261c:	20 0d       	add	r18, r0
    261e:	11 24       	eor	r1, r1
    2620:	92 2e       	mov	r9, r18
    2622:	11 c0       	rjmp	.+34     	; 0x2646 <vfprintf+0xe6>
    2624:	ea e0       	ldi	r30, 0x0A	; 10
    2626:	2e 9e       	mul	r2, r30
    2628:	20 0d       	add	r18, r0
    262a:	11 24       	eor	r1, r1
    262c:	22 2e       	mov	r2, r18
    262e:	f3 2d       	mov	r31, r3
    2630:	f0 62       	ori	r31, 0x20	; 32
    2632:	3f 2e       	mov	r3, r31
    2634:	08 c0       	rjmp	.+16     	; 0x2646 <vfprintf+0xe6>
    2636:	8c 36       	cpi	r24, 0x6C	; 108
    2638:	21 f4       	brne	.+8      	; 0x2642 <vfprintf+0xe2>
    263a:	83 2d       	mov	r24, r3
    263c:	80 68       	ori	r24, 0x80	; 128
    263e:	38 2e       	mov	r3, r24
    2640:	02 c0       	rjmp	.+4      	; 0x2646 <vfprintf+0xe6>
    2642:	88 36       	cpi	r24, 0x68	; 104
    2644:	41 f4       	brne	.+16     	; 0x2656 <vfprintf+0xf6>
    2646:	f7 01       	movw	r30, r14
    2648:	93 fd       	sbrc	r25, 3
    264a:	85 91       	lpm	r24, Z+
    264c:	93 ff       	sbrs	r25, 3
    264e:	81 91       	ld	r24, Z+
    2650:	7f 01       	movw	r14, r30
    2652:	81 11       	cpse	r24, r1
    2654:	b3 cf       	rjmp	.-154    	; 0x25bc <vfprintf+0x5c>
    2656:	98 2f       	mov	r25, r24
    2658:	9f 7d       	andi	r25, 0xDF	; 223
    265a:	95 54       	subi	r25, 0x45	; 69
    265c:	93 30       	cpi	r25, 0x03	; 3
    265e:	28 f4       	brcc	.+10     	; 0x266a <vfprintf+0x10a>
    2660:	0c 5f       	subi	r16, 0xFC	; 252
    2662:	1f 4f       	sbci	r17, 0xFF	; 255
    2664:	9f e3       	ldi	r25, 0x3F	; 63
    2666:	99 83       	std	Y+1, r25	; 0x01
    2668:	0d c0       	rjmp	.+26     	; 0x2684 <vfprintf+0x124>
    266a:	83 36       	cpi	r24, 0x63	; 99
    266c:	31 f0       	breq	.+12     	; 0x267a <vfprintf+0x11a>
    266e:	83 37       	cpi	r24, 0x73	; 115
    2670:	71 f0       	breq	.+28     	; 0x268e <vfprintf+0x12e>
    2672:	83 35       	cpi	r24, 0x53	; 83
    2674:	09 f0       	breq	.+2      	; 0x2678 <vfprintf+0x118>
    2676:	59 c0       	rjmp	.+178    	; 0x272a <vfprintf+0x1ca>
    2678:	21 c0       	rjmp	.+66     	; 0x26bc <vfprintf+0x15c>
    267a:	f8 01       	movw	r30, r16
    267c:	80 81       	ld	r24, Z
    267e:	89 83       	std	Y+1, r24	; 0x01
    2680:	0e 5f       	subi	r16, 0xFE	; 254
    2682:	1f 4f       	sbci	r17, 0xFF	; 255
    2684:	88 24       	eor	r8, r8
    2686:	83 94       	inc	r8
    2688:	91 2c       	mov	r9, r1
    268a:	53 01       	movw	r10, r6
    268c:	13 c0       	rjmp	.+38     	; 0x26b4 <vfprintf+0x154>
    268e:	28 01       	movw	r4, r16
    2690:	f2 e0       	ldi	r31, 0x02	; 2
    2692:	4f 0e       	add	r4, r31
    2694:	51 1c       	adc	r5, r1
    2696:	f8 01       	movw	r30, r16
    2698:	a0 80       	ld	r10, Z
    269a:	b1 80       	ldd	r11, Z+1	; 0x01
    269c:	36 fe       	sbrs	r3, 6
    269e:	03 c0       	rjmp	.+6      	; 0x26a6 <vfprintf+0x146>
    26a0:	69 2d       	mov	r22, r9
    26a2:	70 e0       	ldi	r23, 0x00	; 0
    26a4:	02 c0       	rjmp	.+4      	; 0x26aa <vfprintf+0x14a>
    26a6:	6f ef       	ldi	r22, 0xFF	; 255
    26a8:	7f ef       	ldi	r23, 0xFF	; 255
    26aa:	c5 01       	movw	r24, r10
    26ac:	0e 94 a5 14 	call	0x294a	; 0x294a <strnlen>
    26b0:	4c 01       	movw	r8, r24
    26b2:	82 01       	movw	r16, r4
    26b4:	f3 2d       	mov	r31, r3
    26b6:	ff 77       	andi	r31, 0x7F	; 127
    26b8:	3f 2e       	mov	r3, r31
    26ba:	16 c0       	rjmp	.+44     	; 0x26e8 <vfprintf+0x188>
    26bc:	28 01       	movw	r4, r16
    26be:	22 e0       	ldi	r18, 0x02	; 2
    26c0:	42 0e       	add	r4, r18
    26c2:	51 1c       	adc	r5, r1
    26c4:	f8 01       	movw	r30, r16
    26c6:	a0 80       	ld	r10, Z
    26c8:	b1 80       	ldd	r11, Z+1	; 0x01
    26ca:	36 fe       	sbrs	r3, 6
    26cc:	03 c0       	rjmp	.+6      	; 0x26d4 <vfprintf+0x174>
    26ce:	69 2d       	mov	r22, r9
    26d0:	70 e0       	ldi	r23, 0x00	; 0
    26d2:	02 c0       	rjmp	.+4      	; 0x26d8 <vfprintf+0x178>
    26d4:	6f ef       	ldi	r22, 0xFF	; 255
    26d6:	7f ef       	ldi	r23, 0xFF	; 255
    26d8:	c5 01       	movw	r24, r10
    26da:	0e 94 91 14 	call	0x2922	; 0x2922 <strnlen_P>
    26de:	4c 01       	movw	r8, r24
    26e0:	f3 2d       	mov	r31, r3
    26e2:	f0 68       	ori	r31, 0x80	; 128
    26e4:	3f 2e       	mov	r3, r31
    26e6:	82 01       	movw	r16, r4
    26e8:	33 fc       	sbrc	r3, 3
    26ea:	1b c0       	rjmp	.+54     	; 0x2722 <vfprintf+0x1c2>
    26ec:	82 2d       	mov	r24, r2
    26ee:	90 e0       	ldi	r25, 0x00	; 0
    26f0:	88 16       	cp	r8, r24
    26f2:	99 06       	cpc	r9, r25
    26f4:	b0 f4       	brcc	.+44     	; 0x2722 <vfprintf+0x1c2>
    26f6:	b6 01       	movw	r22, r12
    26f8:	80 e2       	ldi	r24, 0x20	; 32
    26fa:	90 e0       	ldi	r25, 0x00	; 0
    26fc:	0e 94 b0 14 	call	0x2960	; 0x2960 <fputc>
    2700:	2a 94       	dec	r2
    2702:	f4 cf       	rjmp	.-24     	; 0x26ec <vfprintf+0x18c>
    2704:	f5 01       	movw	r30, r10
    2706:	37 fc       	sbrc	r3, 7
    2708:	85 91       	lpm	r24, Z+
    270a:	37 fe       	sbrs	r3, 7
    270c:	81 91       	ld	r24, Z+
    270e:	5f 01       	movw	r10, r30
    2710:	b6 01       	movw	r22, r12
    2712:	90 e0       	ldi	r25, 0x00	; 0
    2714:	0e 94 b0 14 	call	0x2960	; 0x2960 <fputc>
    2718:	21 10       	cpse	r2, r1
    271a:	2a 94       	dec	r2
    271c:	21 e0       	ldi	r18, 0x01	; 1
    271e:	82 1a       	sub	r8, r18
    2720:	91 08       	sbc	r9, r1
    2722:	81 14       	cp	r8, r1
    2724:	91 04       	cpc	r9, r1
    2726:	71 f7       	brne	.-36     	; 0x2704 <vfprintf+0x1a4>
    2728:	e8 c0       	rjmp	.+464    	; 0x28fa <vfprintf+0x39a>
    272a:	84 36       	cpi	r24, 0x64	; 100
    272c:	11 f0       	breq	.+4      	; 0x2732 <vfprintf+0x1d2>
    272e:	89 36       	cpi	r24, 0x69	; 105
    2730:	41 f5       	brne	.+80     	; 0x2782 <vfprintf+0x222>
    2732:	f8 01       	movw	r30, r16
    2734:	37 fe       	sbrs	r3, 7
    2736:	07 c0       	rjmp	.+14     	; 0x2746 <vfprintf+0x1e6>
    2738:	60 81       	ld	r22, Z
    273a:	71 81       	ldd	r23, Z+1	; 0x01
    273c:	82 81       	ldd	r24, Z+2	; 0x02
    273e:	93 81       	ldd	r25, Z+3	; 0x03
    2740:	0c 5f       	subi	r16, 0xFC	; 252
    2742:	1f 4f       	sbci	r17, 0xFF	; 255
    2744:	08 c0       	rjmp	.+16     	; 0x2756 <vfprintf+0x1f6>
    2746:	60 81       	ld	r22, Z
    2748:	71 81       	ldd	r23, Z+1	; 0x01
    274a:	07 2e       	mov	r0, r23
    274c:	00 0c       	add	r0, r0
    274e:	88 0b       	sbc	r24, r24
    2750:	99 0b       	sbc	r25, r25
    2752:	0e 5f       	subi	r16, 0xFE	; 254
    2754:	1f 4f       	sbci	r17, 0xFF	; 255
    2756:	f3 2d       	mov	r31, r3
    2758:	ff 76       	andi	r31, 0x6F	; 111
    275a:	3f 2e       	mov	r3, r31
    275c:	97 ff       	sbrs	r25, 7
    275e:	09 c0       	rjmp	.+18     	; 0x2772 <vfprintf+0x212>
    2760:	90 95       	com	r25
    2762:	80 95       	com	r24
    2764:	70 95       	com	r23
    2766:	61 95       	neg	r22
    2768:	7f 4f       	sbci	r23, 0xFF	; 255
    276a:	8f 4f       	sbci	r24, 0xFF	; 255
    276c:	9f 4f       	sbci	r25, 0xFF	; 255
    276e:	f0 68       	ori	r31, 0x80	; 128
    2770:	3f 2e       	mov	r3, r31
    2772:	2a e0       	ldi	r18, 0x0A	; 10
    2774:	30 e0       	ldi	r19, 0x00	; 0
    2776:	a3 01       	movw	r20, r6
    2778:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <__ultoa_invert>
    277c:	88 2e       	mov	r8, r24
    277e:	86 18       	sub	r8, r6
    2780:	45 c0       	rjmp	.+138    	; 0x280c <vfprintf+0x2ac>
    2782:	85 37       	cpi	r24, 0x75	; 117
    2784:	31 f4       	brne	.+12     	; 0x2792 <vfprintf+0x232>
    2786:	23 2d       	mov	r18, r3
    2788:	2f 7e       	andi	r18, 0xEF	; 239
    278a:	b2 2e       	mov	r11, r18
    278c:	2a e0       	ldi	r18, 0x0A	; 10
    278e:	30 e0       	ldi	r19, 0x00	; 0
    2790:	25 c0       	rjmp	.+74     	; 0x27dc <vfprintf+0x27c>
    2792:	93 2d       	mov	r25, r3
    2794:	99 7f       	andi	r25, 0xF9	; 249
    2796:	b9 2e       	mov	r11, r25
    2798:	8f 36       	cpi	r24, 0x6F	; 111
    279a:	c1 f0       	breq	.+48     	; 0x27cc <vfprintf+0x26c>
    279c:	18 f4       	brcc	.+6      	; 0x27a4 <vfprintf+0x244>
    279e:	88 35       	cpi	r24, 0x58	; 88
    27a0:	79 f0       	breq	.+30     	; 0x27c0 <vfprintf+0x260>
    27a2:	b5 c0       	rjmp	.+362    	; 0x290e <vfprintf+0x3ae>
    27a4:	80 37       	cpi	r24, 0x70	; 112
    27a6:	19 f0       	breq	.+6      	; 0x27ae <vfprintf+0x24e>
    27a8:	88 37       	cpi	r24, 0x78	; 120
    27aa:	21 f0       	breq	.+8      	; 0x27b4 <vfprintf+0x254>
    27ac:	b0 c0       	rjmp	.+352    	; 0x290e <vfprintf+0x3ae>
    27ae:	e9 2f       	mov	r30, r25
    27b0:	e0 61       	ori	r30, 0x10	; 16
    27b2:	be 2e       	mov	r11, r30
    27b4:	b4 fe       	sbrs	r11, 4
    27b6:	0d c0       	rjmp	.+26     	; 0x27d2 <vfprintf+0x272>
    27b8:	fb 2d       	mov	r31, r11
    27ba:	f4 60       	ori	r31, 0x04	; 4
    27bc:	bf 2e       	mov	r11, r31
    27be:	09 c0       	rjmp	.+18     	; 0x27d2 <vfprintf+0x272>
    27c0:	34 fe       	sbrs	r3, 4
    27c2:	0a c0       	rjmp	.+20     	; 0x27d8 <vfprintf+0x278>
    27c4:	29 2f       	mov	r18, r25
    27c6:	26 60       	ori	r18, 0x06	; 6
    27c8:	b2 2e       	mov	r11, r18
    27ca:	06 c0       	rjmp	.+12     	; 0x27d8 <vfprintf+0x278>
    27cc:	28 e0       	ldi	r18, 0x08	; 8
    27ce:	30 e0       	ldi	r19, 0x00	; 0
    27d0:	05 c0       	rjmp	.+10     	; 0x27dc <vfprintf+0x27c>
    27d2:	20 e1       	ldi	r18, 0x10	; 16
    27d4:	30 e0       	ldi	r19, 0x00	; 0
    27d6:	02 c0       	rjmp	.+4      	; 0x27dc <vfprintf+0x27c>
    27d8:	20 e1       	ldi	r18, 0x10	; 16
    27da:	32 e0       	ldi	r19, 0x02	; 2
    27dc:	f8 01       	movw	r30, r16
    27de:	b7 fe       	sbrs	r11, 7
    27e0:	07 c0       	rjmp	.+14     	; 0x27f0 <vfprintf+0x290>
    27e2:	60 81       	ld	r22, Z
    27e4:	71 81       	ldd	r23, Z+1	; 0x01
    27e6:	82 81       	ldd	r24, Z+2	; 0x02
    27e8:	93 81       	ldd	r25, Z+3	; 0x03
    27ea:	0c 5f       	subi	r16, 0xFC	; 252
    27ec:	1f 4f       	sbci	r17, 0xFF	; 255
    27ee:	06 c0       	rjmp	.+12     	; 0x27fc <vfprintf+0x29c>
    27f0:	60 81       	ld	r22, Z
    27f2:	71 81       	ldd	r23, Z+1	; 0x01
    27f4:	80 e0       	ldi	r24, 0x00	; 0
    27f6:	90 e0       	ldi	r25, 0x00	; 0
    27f8:	0e 5f       	subi	r16, 0xFE	; 254
    27fa:	1f 4f       	sbci	r17, 0xFF	; 255
    27fc:	a3 01       	movw	r20, r6
    27fe:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <__ultoa_invert>
    2802:	88 2e       	mov	r8, r24
    2804:	86 18       	sub	r8, r6
    2806:	fb 2d       	mov	r31, r11
    2808:	ff 77       	andi	r31, 0x7F	; 127
    280a:	3f 2e       	mov	r3, r31
    280c:	36 fe       	sbrs	r3, 6
    280e:	0d c0       	rjmp	.+26     	; 0x282a <vfprintf+0x2ca>
    2810:	23 2d       	mov	r18, r3
    2812:	2e 7f       	andi	r18, 0xFE	; 254
    2814:	a2 2e       	mov	r10, r18
    2816:	89 14       	cp	r8, r9
    2818:	58 f4       	brcc	.+22     	; 0x2830 <vfprintf+0x2d0>
    281a:	34 fe       	sbrs	r3, 4
    281c:	0b c0       	rjmp	.+22     	; 0x2834 <vfprintf+0x2d4>
    281e:	32 fc       	sbrc	r3, 2
    2820:	09 c0       	rjmp	.+18     	; 0x2834 <vfprintf+0x2d4>
    2822:	83 2d       	mov	r24, r3
    2824:	8e 7e       	andi	r24, 0xEE	; 238
    2826:	a8 2e       	mov	r10, r24
    2828:	05 c0       	rjmp	.+10     	; 0x2834 <vfprintf+0x2d4>
    282a:	b8 2c       	mov	r11, r8
    282c:	a3 2c       	mov	r10, r3
    282e:	03 c0       	rjmp	.+6      	; 0x2836 <vfprintf+0x2d6>
    2830:	b8 2c       	mov	r11, r8
    2832:	01 c0       	rjmp	.+2      	; 0x2836 <vfprintf+0x2d6>
    2834:	b9 2c       	mov	r11, r9
    2836:	a4 fe       	sbrs	r10, 4
    2838:	0f c0       	rjmp	.+30     	; 0x2858 <vfprintf+0x2f8>
    283a:	fe 01       	movw	r30, r28
    283c:	e8 0d       	add	r30, r8
    283e:	f1 1d       	adc	r31, r1
    2840:	80 81       	ld	r24, Z
    2842:	80 33       	cpi	r24, 0x30	; 48
    2844:	21 f4       	brne	.+8      	; 0x284e <vfprintf+0x2ee>
    2846:	9a 2d       	mov	r25, r10
    2848:	99 7e       	andi	r25, 0xE9	; 233
    284a:	a9 2e       	mov	r10, r25
    284c:	09 c0       	rjmp	.+18     	; 0x2860 <vfprintf+0x300>
    284e:	a2 fe       	sbrs	r10, 2
    2850:	06 c0       	rjmp	.+12     	; 0x285e <vfprintf+0x2fe>
    2852:	b3 94       	inc	r11
    2854:	b3 94       	inc	r11
    2856:	04 c0       	rjmp	.+8      	; 0x2860 <vfprintf+0x300>
    2858:	8a 2d       	mov	r24, r10
    285a:	86 78       	andi	r24, 0x86	; 134
    285c:	09 f0       	breq	.+2      	; 0x2860 <vfprintf+0x300>
    285e:	b3 94       	inc	r11
    2860:	a3 fc       	sbrc	r10, 3
    2862:	11 c0       	rjmp	.+34     	; 0x2886 <vfprintf+0x326>
    2864:	a0 fe       	sbrs	r10, 0
    2866:	06 c0       	rjmp	.+12     	; 0x2874 <vfprintf+0x314>
    2868:	b2 14       	cp	r11, r2
    286a:	88 f4       	brcc	.+34     	; 0x288e <vfprintf+0x32e>
    286c:	28 0c       	add	r2, r8
    286e:	92 2c       	mov	r9, r2
    2870:	9b 18       	sub	r9, r11
    2872:	0e c0       	rjmp	.+28     	; 0x2890 <vfprintf+0x330>
    2874:	b2 14       	cp	r11, r2
    2876:	60 f4       	brcc	.+24     	; 0x2890 <vfprintf+0x330>
    2878:	b6 01       	movw	r22, r12
    287a:	80 e2       	ldi	r24, 0x20	; 32
    287c:	90 e0       	ldi	r25, 0x00	; 0
    287e:	0e 94 b0 14 	call	0x2960	; 0x2960 <fputc>
    2882:	b3 94       	inc	r11
    2884:	f7 cf       	rjmp	.-18     	; 0x2874 <vfprintf+0x314>
    2886:	b2 14       	cp	r11, r2
    2888:	18 f4       	brcc	.+6      	; 0x2890 <vfprintf+0x330>
    288a:	2b 18       	sub	r2, r11
    288c:	02 c0       	rjmp	.+4      	; 0x2892 <vfprintf+0x332>
    288e:	98 2c       	mov	r9, r8
    2890:	21 2c       	mov	r2, r1
    2892:	a4 fe       	sbrs	r10, 4
    2894:	10 c0       	rjmp	.+32     	; 0x28b6 <vfprintf+0x356>
    2896:	b6 01       	movw	r22, r12
    2898:	80 e3       	ldi	r24, 0x30	; 48
    289a:	90 e0       	ldi	r25, 0x00	; 0
    289c:	0e 94 b0 14 	call	0x2960	; 0x2960 <fputc>
    28a0:	a2 fe       	sbrs	r10, 2
    28a2:	17 c0       	rjmp	.+46     	; 0x28d2 <vfprintf+0x372>
    28a4:	a1 fc       	sbrc	r10, 1
    28a6:	03 c0       	rjmp	.+6      	; 0x28ae <vfprintf+0x34e>
    28a8:	88 e7       	ldi	r24, 0x78	; 120
    28aa:	90 e0       	ldi	r25, 0x00	; 0
    28ac:	02 c0       	rjmp	.+4      	; 0x28b2 <vfprintf+0x352>
    28ae:	88 e5       	ldi	r24, 0x58	; 88
    28b0:	90 e0       	ldi	r25, 0x00	; 0
    28b2:	b6 01       	movw	r22, r12
    28b4:	0c c0       	rjmp	.+24     	; 0x28ce <vfprintf+0x36e>
    28b6:	8a 2d       	mov	r24, r10
    28b8:	86 78       	andi	r24, 0x86	; 134
    28ba:	59 f0       	breq	.+22     	; 0x28d2 <vfprintf+0x372>
    28bc:	a1 fe       	sbrs	r10, 1
    28be:	02 c0       	rjmp	.+4      	; 0x28c4 <vfprintf+0x364>
    28c0:	8b e2       	ldi	r24, 0x2B	; 43
    28c2:	01 c0       	rjmp	.+2      	; 0x28c6 <vfprintf+0x366>
    28c4:	80 e2       	ldi	r24, 0x20	; 32
    28c6:	a7 fc       	sbrc	r10, 7
    28c8:	8d e2       	ldi	r24, 0x2D	; 45
    28ca:	b6 01       	movw	r22, r12
    28cc:	90 e0       	ldi	r25, 0x00	; 0
    28ce:	0e 94 b0 14 	call	0x2960	; 0x2960 <fputc>
    28d2:	89 14       	cp	r8, r9
    28d4:	38 f4       	brcc	.+14     	; 0x28e4 <vfprintf+0x384>
    28d6:	b6 01       	movw	r22, r12
    28d8:	80 e3       	ldi	r24, 0x30	; 48
    28da:	90 e0       	ldi	r25, 0x00	; 0
    28dc:	0e 94 b0 14 	call	0x2960	; 0x2960 <fputc>
    28e0:	9a 94       	dec	r9
    28e2:	f7 cf       	rjmp	.-18     	; 0x28d2 <vfprintf+0x372>
    28e4:	8a 94       	dec	r8
    28e6:	f3 01       	movw	r30, r6
    28e8:	e8 0d       	add	r30, r8
    28ea:	f1 1d       	adc	r31, r1
    28ec:	80 81       	ld	r24, Z
    28ee:	b6 01       	movw	r22, r12
    28f0:	90 e0       	ldi	r25, 0x00	; 0
    28f2:	0e 94 b0 14 	call	0x2960	; 0x2960 <fputc>
    28f6:	81 10       	cpse	r8, r1
    28f8:	f5 cf       	rjmp	.-22     	; 0x28e4 <vfprintf+0x384>
    28fa:	22 20       	and	r2, r2
    28fc:	09 f4       	brne	.+2      	; 0x2900 <vfprintf+0x3a0>
    28fe:	42 ce       	rjmp	.-892    	; 0x2584 <vfprintf+0x24>
    2900:	b6 01       	movw	r22, r12
    2902:	80 e2       	ldi	r24, 0x20	; 32
    2904:	90 e0       	ldi	r25, 0x00	; 0
    2906:	0e 94 b0 14 	call	0x2960	; 0x2960 <fputc>
    290a:	2a 94       	dec	r2
    290c:	f6 cf       	rjmp	.-20     	; 0x28fa <vfprintf+0x39a>
    290e:	f6 01       	movw	r30, r12
    2910:	86 81       	ldd	r24, Z+6	; 0x06
    2912:	97 81       	ldd	r25, Z+7	; 0x07
    2914:	02 c0       	rjmp	.+4      	; 0x291a <vfprintf+0x3ba>
    2916:	8f ef       	ldi	r24, 0xFF	; 255
    2918:	9f ef       	ldi	r25, 0xFF	; 255
    291a:	2b 96       	adiw	r28, 0x0b	; 11
    291c:	e2 e1       	ldi	r30, 0x12	; 18
    291e:	0c 94 66 15 	jmp	0x2acc	; 0x2acc <__epilogue_restores__>

00002922 <strnlen_P>:
    2922:	fc 01       	movw	r30, r24
    2924:	05 90       	lpm	r0, Z+
    2926:	61 50       	subi	r22, 0x01	; 1
    2928:	70 40       	sbci	r23, 0x00	; 0
    292a:	01 10       	cpse	r0, r1
    292c:	d8 f7       	brcc	.-10     	; 0x2924 <strnlen_P+0x2>
    292e:	80 95       	com	r24
    2930:	90 95       	com	r25
    2932:	8e 0f       	add	r24, r30
    2934:	9f 1f       	adc	r25, r31
    2936:	08 95       	ret

00002938 <memcpy>:
    2938:	fb 01       	movw	r30, r22
    293a:	dc 01       	movw	r26, r24
    293c:	02 c0       	rjmp	.+4      	; 0x2942 <memcpy+0xa>
    293e:	01 90       	ld	r0, Z+
    2940:	0d 92       	st	X+, r0
    2942:	41 50       	subi	r20, 0x01	; 1
    2944:	50 40       	sbci	r21, 0x00	; 0
    2946:	d8 f7       	brcc	.-10     	; 0x293e <memcpy+0x6>
    2948:	08 95       	ret

0000294a <strnlen>:
    294a:	fc 01       	movw	r30, r24
    294c:	61 50       	subi	r22, 0x01	; 1
    294e:	70 40       	sbci	r23, 0x00	; 0
    2950:	01 90       	ld	r0, Z+
    2952:	01 10       	cpse	r0, r1
    2954:	d8 f7       	brcc	.-10     	; 0x294c <strnlen+0x2>
    2956:	80 95       	com	r24
    2958:	90 95       	com	r25
    295a:	8e 0f       	add	r24, r30
    295c:	9f 1f       	adc	r25, r31
    295e:	08 95       	ret

00002960 <fputc>:
    2960:	0f 93       	push	r16
    2962:	1f 93       	push	r17
    2964:	cf 93       	push	r28
    2966:	df 93       	push	r29
    2968:	fb 01       	movw	r30, r22
    296a:	23 81       	ldd	r18, Z+3	; 0x03
    296c:	21 fd       	sbrc	r18, 1
    296e:	03 c0       	rjmp	.+6      	; 0x2976 <fputc+0x16>
    2970:	8f ef       	ldi	r24, 0xFF	; 255
    2972:	9f ef       	ldi	r25, 0xFF	; 255
    2974:	2c c0       	rjmp	.+88     	; 0x29ce <fputc+0x6e>
    2976:	22 ff       	sbrs	r18, 2
    2978:	16 c0       	rjmp	.+44     	; 0x29a6 <fputc+0x46>
    297a:	46 81       	ldd	r20, Z+6	; 0x06
    297c:	57 81       	ldd	r21, Z+7	; 0x07
    297e:	24 81       	ldd	r18, Z+4	; 0x04
    2980:	35 81       	ldd	r19, Z+5	; 0x05
    2982:	42 17       	cp	r20, r18
    2984:	53 07       	cpc	r21, r19
    2986:	44 f4       	brge	.+16     	; 0x2998 <fputc+0x38>
    2988:	a0 81       	ld	r26, Z
    298a:	b1 81       	ldd	r27, Z+1	; 0x01
    298c:	9d 01       	movw	r18, r26
    298e:	2f 5f       	subi	r18, 0xFF	; 255
    2990:	3f 4f       	sbci	r19, 0xFF	; 255
    2992:	31 83       	std	Z+1, r19	; 0x01
    2994:	20 83       	st	Z, r18
    2996:	8c 93       	st	X, r24
    2998:	26 81       	ldd	r18, Z+6	; 0x06
    299a:	37 81       	ldd	r19, Z+7	; 0x07
    299c:	2f 5f       	subi	r18, 0xFF	; 255
    299e:	3f 4f       	sbci	r19, 0xFF	; 255
    29a0:	37 83       	std	Z+7, r19	; 0x07
    29a2:	26 83       	std	Z+6, r18	; 0x06
    29a4:	14 c0       	rjmp	.+40     	; 0x29ce <fputc+0x6e>
    29a6:	8b 01       	movw	r16, r22
    29a8:	ec 01       	movw	r28, r24
    29aa:	fb 01       	movw	r30, r22
    29ac:	00 84       	ldd	r0, Z+8	; 0x08
    29ae:	f1 85       	ldd	r31, Z+9	; 0x09
    29b0:	e0 2d       	mov	r30, r0
    29b2:	09 95       	icall
    29b4:	89 2b       	or	r24, r25
    29b6:	e1 f6       	brne	.-72     	; 0x2970 <fputc+0x10>
    29b8:	d8 01       	movw	r26, r16
    29ba:	16 96       	adiw	r26, 0x06	; 6
    29bc:	8d 91       	ld	r24, X+
    29be:	9c 91       	ld	r25, X
    29c0:	17 97       	sbiw	r26, 0x07	; 7
    29c2:	01 96       	adiw	r24, 0x01	; 1
    29c4:	17 96       	adiw	r26, 0x07	; 7
    29c6:	9c 93       	st	X, r25
    29c8:	8e 93       	st	-X, r24
    29ca:	16 97       	sbiw	r26, 0x06	; 6
    29cc:	ce 01       	movw	r24, r28
    29ce:	df 91       	pop	r29
    29d0:	cf 91       	pop	r28
    29d2:	1f 91       	pop	r17
    29d4:	0f 91       	pop	r16
    29d6:	08 95       	ret

000029d8 <__ultoa_invert>:
    29d8:	fa 01       	movw	r30, r20
    29da:	aa 27       	eor	r26, r26
    29dc:	28 30       	cpi	r18, 0x08	; 8
    29de:	51 f1       	breq	.+84     	; 0x2a34 <__ultoa_invert+0x5c>
    29e0:	20 31       	cpi	r18, 0x10	; 16
    29e2:	81 f1       	breq	.+96     	; 0x2a44 <__ultoa_invert+0x6c>
    29e4:	e8 94       	clt
    29e6:	6f 93       	push	r22
    29e8:	6e 7f       	andi	r22, 0xFE	; 254
    29ea:	6e 5f       	subi	r22, 0xFE	; 254
    29ec:	7f 4f       	sbci	r23, 0xFF	; 255
    29ee:	8f 4f       	sbci	r24, 0xFF	; 255
    29f0:	9f 4f       	sbci	r25, 0xFF	; 255
    29f2:	af 4f       	sbci	r26, 0xFF	; 255
    29f4:	b1 e0       	ldi	r27, 0x01	; 1
    29f6:	3e d0       	rcall	.+124    	; 0x2a74 <__ultoa_invert+0x9c>
    29f8:	b4 e0       	ldi	r27, 0x04	; 4
    29fa:	3c d0       	rcall	.+120    	; 0x2a74 <__ultoa_invert+0x9c>
    29fc:	67 0f       	add	r22, r23
    29fe:	78 1f       	adc	r23, r24
    2a00:	89 1f       	adc	r24, r25
    2a02:	9a 1f       	adc	r25, r26
    2a04:	a1 1d       	adc	r26, r1
    2a06:	68 0f       	add	r22, r24
    2a08:	79 1f       	adc	r23, r25
    2a0a:	8a 1f       	adc	r24, r26
    2a0c:	91 1d       	adc	r25, r1
    2a0e:	a1 1d       	adc	r26, r1
    2a10:	6a 0f       	add	r22, r26
    2a12:	71 1d       	adc	r23, r1
    2a14:	81 1d       	adc	r24, r1
    2a16:	91 1d       	adc	r25, r1
    2a18:	a1 1d       	adc	r26, r1
    2a1a:	20 d0       	rcall	.+64     	; 0x2a5c <__ultoa_invert+0x84>
    2a1c:	09 f4       	brne	.+2      	; 0x2a20 <__ultoa_invert+0x48>
    2a1e:	68 94       	set
    2a20:	3f 91       	pop	r19
    2a22:	2a e0       	ldi	r18, 0x0A	; 10
    2a24:	26 9f       	mul	r18, r22
    2a26:	11 24       	eor	r1, r1
    2a28:	30 19       	sub	r19, r0
    2a2a:	30 5d       	subi	r19, 0xD0	; 208
    2a2c:	31 93       	st	Z+, r19
    2a2e:	de f6       	brtc	.-74     	; 0x29e6 <__ultoa_invert+0xe>
    2a30:	cf 01       	movw	r24, r30
    2a32:	08 95       	ret
    2a34:	46 2f       	mov	r20, r22
    2a36:	47 70       	andi	r20, 0x07	; 7
    2a38:	40 5d       	subi	r20, 0xD0	; 208
    2a3a:	41 93       	st	Z+, r20
    2a3c:	b3 e0       	ldi	r27, 0x03	; 3
    2a3e:	0f d0       	rcall	.+30     	; 0x2a5e <__ultoa_invert+0x86>
    2a40:	c9 f7       	brne	.-14     	; 0x2a34 <__ultoa_invert+0x5c>
    2a42:	f6 cf       	rjmp	.-20     	; 0x2a30 <__ultoa_invert+0x58>
    2a44:	46 2f       	mov	r20, r22
    2a46:	4f 70       	andi	r20, 0x0F	; 15
    2a48:	40 5d       	subi	r20, 0xD0	; 208
    2a4a:	4a 33       	cpi	r20, 0x3A	; 58
    2a4c:	18 f0       	brcs	.+6      	; 0x2a54 <__ultoa_invert+0x7c>
    2a4e:	49 5d       	subi	r20, 0xD9	; 217
    2a50:	31 fd       	sbrc	r19, 1
    2a52:	40 52       	subi	r20, 0x20	; 32
    2a54:	41 93       	st	Z+, r20
    2a56:	02 d0       	rcall	.+4      	; 0x2a5c <__ultoa_invert+0x84>
    2a58:	a9 f7       	brne	.-22     	; 0x2a44 <__ultoa_invert+0x6c>
    2a5a:	ea cf       	rjmp	.-44     	; 0x2a30 <__ultoa_invert+0x58>
    2a5c:	b4 e0       	ldi	r27, 0x04	; 4
    2a5e:	a6 95       	lsr	r26
    2a60:	97 95       	ror	r25
    2a62:	87 95       	ror	r24
    2a64:	77 95       	ror	r23
    2a66:	67 95       	ror	r22
    2a68:	ba 95       	dec	r27
    2a6a:	c9 f7       	brne	.-14     	; 0x2a5e <__ultoa_invert+0x86>
    2a6c:	00 97       	sbiw	r24, 0x00	; 0
    2a6e:	61 05       	cpc	r22, r1
    2a70:	71 05       	cpc	r23, r1
    2a72:	08 95       	ret
    2a74:	9b 01       	movw	r18, r22
    2a76:	ac 01       	movw	r20, r24
    2a78:	0a 2e       	mov	r0, r26
    2a7a:	06 94       	lsr	r0
    2a7c:	57 95       	ror	r21
    2a7e:	47 95       	ror	r20
    2a80:	37 95       	ror	r19
    2a82:	27 95       	ror	r18
    2a84:	ba 95       	dec	r27
    2a86:	c9 f7       	brne	.-14     	; 0x2a7a <__ultoa_invert+0xa2>
    2a88:	62 0f       	add	r22, r18
    2a8a:	73 1f       	adc	r23, r19
    2a8c:	84 1f       	adc	r24, r20
    2a8e:	95 1f       	adc	r25, r21
    2a90:	a0 1d       	adc	r26, r0
    2a92:	08 95       	ret

00002a94 <__prologue_saves__>:
    2a94:	2f 92       	push	r2
    2a96:	3f 92       	push	r3
    2a98:	4f 92       	push	r4
    2a9a:	5f 92       	push	r5
    2a9c:	6f 92       	push	r6
    2a9e:	7f 92       	push	r7
    2aa0:	8f 92       	push	r8
    2aa2:	9f 92       	push	r9
    2aa4:	af 92       	push	r10
    2aa6:	bf 92       	push	r11
    2aa8:	cf 92       	push	r12
    2aaa:	df 92       	push	r13
    2aac:	ef 92       	push	r14
    2aae:	ff 92       	push	r15
    2ab0:	0f 93       	push	r16
    2ab2:	1f 93       	push	r17
    2ab4:	cf 93       	push	r28
    2ab6:	df 93       	push	r29
    2ab8:	cd b7       	in	r28, 0x3d	; 61
    2aba:	de b7       	in	r29, 0x3e	; 62
    2abc:	ca 1b       	sub	r28, r26
    2abe:	db 0b       	sbc	r29, r27
    2ac0:	0f b6       	in	r0, 0x3f	; 63
    2ac2:	f8 94       	cli
    2ac4:	de bf       	out	0x3e, r29	; 62
    2ac6:	0f be       	out	0x3f, r0	; 63
    2ac8:	cd bf       	out	0x3d, r28	; 61
    2aca:	09 94       	ijmp

00002acc <__epilogue_restores__>:
    2acc:	2a 88       	ldd	r2, Y+18	; 0x12
    2ace:	39 88       	ldd	r3, Y+17	; 0x11
    2ad0:	48 88       	ldd	r4, Y+16	; 0x10
    2ad2:	5f 84       	ldd	r5, Y+15	; 0x0f
    2ad4:	6e 84       	ldd	r6, Y+14	; 0x0e
    2ad6:	7d 84       	ldd	r7, Y+13	; 0x0d
    2ad8:	8c 84       	ldd	r8, Y+12	; 0x0c
    2ada:	9b 84       	ldd	r9, Y+11	; 0x0b
    2adc:	aa 84       	ldd	r10, Y+10	; 0x0a
    2ade:	b9 84       	ldd	r11, Y+9	; 0x09
    2ae0:	c8 84       	ldd	r12, Y+8	; 0x08
    2ae2:	df 80       	ldd	r13, Y+7	; 0x07
    2ae4:	ee 80       	ldd	r14, Y+6	; 0x06
    2ae6:	fd 80       	ldd	r15, Y+5	; 0x05
    2ae8:	0c 81       	ldd	r16, Y+4	; 0x04
    2aea:	1b 81       	ldd	r17, Y+3	; 0x03
    2aec:	aa 81       	ldd	r26, Y+2	; 0x02
    2aee:	b9 81       	ldd	r27, Y+1	; 0x01
    2af0:	ce 0f       	add	r28, r30
    2af2:	d1 1d       	adc	r29, r1
    2af4:	0f b6       	in	r0, 0x3f	; 63
    2af6:	f8 94       	cli
    2af8:	de bf       	out	0x3e, r29	; 62
    2afa:	0f be       	out	0x3f, r0	; 63
    2afc:	cd bf       	out	0x3d, r28	; 61
    2afe:	ed 01       	movw	r28, r26
    2b00:	08 95       	ret

00002b02 <_exit>:
    2b02:	f8 94       	cli

00002b04 <__stop_program>:
    2b04:	ff cf       	rjmp	.-2      	; 0x2b04 <__stop_program>
