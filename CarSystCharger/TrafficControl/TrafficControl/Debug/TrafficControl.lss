
TrafficControl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000038  00800100  00002536  000025ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002536  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002c7  00800138  00800138  00002602  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002602  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002660  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000808  00000000  00000000  000026a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000165a3  00000000  00000000  00002ea8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003802  00000000  00000000  0001944b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000051ed  00000000  00000000  0001cc4d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001820  00000000  00000000  00021e3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004e48  00000000  00000000  0002365c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00008c30  00000000  00000000  000284a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000808  00000000  00000000  000310d4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ba 00 	jmp	0x174	; 0x174 <__ctors_end>
       4:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
       8:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
       c:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      10:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      14:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      18:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      1c:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      20:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      24:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <__vector_9>
      28:	0c 94 2a 05 	jmp	0xa54	; 0xa54 <__vector_10>
      2c:	0c 94 5c 05 	jmp	0xab8	; 0xab8 <__vector_11>
      30:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      34:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      38:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      3c:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      40:	0c 94 b3 0c 	jmp	0x1966	; 0x1966 <__vector_16>
      44:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      48:	0c 94 d3 0b 	jmp	0x17a6	; 0x17a6 <__vector_18>
      4c:	0c 94 05 0c 	jmp	0x180a	; 0x180a <__vector_19>
      50:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      54:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      58:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      5c:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      60:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      64:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      68:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      6c:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      70:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      74:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      78:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      7c:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      80:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      84:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      88:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      8c:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      90:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      94:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      98:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      9c:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      a0:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      a4:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      a8:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      ac:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      b0:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      b4:	8b 0d       	add	r24, r11
      b6:	8e 0d       	add	r24, r14
      b8:	81 0d       	add	r24, r1
      ba:	85 0d       	add	r24, r5
      bc:	af 0d       	add	r26, r15
      be:	af 0d       	add	r26, r15
      c0:	92 0d       	add	r25, r2
      c2:	96 0d       	add	r25, r6
      c4:	9c 0d       	add	r25, r12
      c6:	a0 0d       	add	r26, r0
      c8:	af 0d       	add	r26, r15
      ca:	a6 0d       	add	r26, r6
      cc:	aa 0d       	add	r26, r10

000000ce <__trampolines_end>:
      ce:	63 6f       	ori	r22, 0xF3	; 243
      d0:	6d 6d       	ori	r22, 0xDD	; 221
      d2:	3a 20       	and	r3, r10
      d4:	75 6e       	ori	r23, 0xE5	; 229
      d6:	64 65       	ori	r22, 0x54	; 84
      d8:	66 69       	ori	r22, 0x96	; 150
      da:	6e 65       	ori	r22, 0x5E	; 94
      dc:	64 20       	and	r6, r4
      de:	63 6f       	ori	r22, 0xF3	; 243
      e0:	6d 6d       	ori	r22, 0xDD	; 221
      e2:	61 6e       	ori	r22, 0xE1	; 225
      e4:	64 0a       	sbc	r6, r20
	...

000000e7 <_ZZN4UART4readEvE3__c_0>:
      e7:	63 6f 6d 6d 3a 20 25 73 0a 00                       comm: %s..

000000f1 <_ZZN4UART4readEvE3__c>:
      f1:	63 6f 6d 6d 3a 20 62 75 66 66 65 72 20 6f 76 65     comm: buffer ove
     101:	72 66 6c 6f 77 0a 00                                rflow..

00000108 <_ZZ4loopE3__c>:
     108:	63 68 65 63 6b 0a 00                                check..

0000010f <_ZZ5setupE3__c>:
     10f:	54 65 73 74 20 42 6f 61 72 64 20 25 64 0a 00        Test Board %d..

0000011e <digital_pin_to_timer_PGM>:
     11e:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
     12e:	00 00 00 00                                         ....

00000132 <digital_pin_to_bit_mask_PGM>:
     132:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     142:	04 08 10 20                                         ... 

00000146 <digital_pin_to_port_PGM>:
     146:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     156:	03 03 03 03                                         ....

0000015a <port_to_output_PGM>:
     15a:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

00000164 <port_to_mode_PGM>:
     164:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

0000016e <__ctors_start>:
     16e:	ae 07       	cpc	r26, r30
     170:	82 0a       	sbc	r8, r18
     172:	35 0c       	add	r3, r5

00000174 <__ctors_end>:
     174:	11 24       	eor	r1, r1
     176:	1f be       	out	0x3f, r1	; 63
     178:	cf ef       	ldi	r28, 0xFF	; 255
     17a:	d8 e0       	ldi	r29, 0x08	; 8
     17c:	de bf       	out	0x3e, r29	; 62
     17e:	cd bf       	out	0x3d, r28	; 61

00000180 <__do_copy_data>:
     180:	11 e0       	ldi	r17, 0x01	; 1
     182:	a0 e0       	ldi	r26, 0x00	; 0
     184:	b1 e0       	ldi	r27, 0x01	; 1
     186:	e6 e3       	ldi	r30, 0x36	; 54
     188:	f5 e2       	ldi	r31, 0x25	; 37
     18a:	02 c0       	rjmp	.+4      	; 0x190 <__do_copy_data+0x10>
     18c:	05 90       	lpm	r0, Z+
     18e:	0d 92       	st	X+, r0
     190:	a8 33       	cpi	r26, 0x38	; 56
     192:	b1 07       	cpc	r27, r17
     194:	d9 f7       	brne	.-10     	; 0x18c <__do_copy_data+0xc>

00000196 <__do_clear_bss>:
     196:	23 e0       	ldi	r18, 0x03	; 3
     198:	a8 e3       	ldi	r26, 0x38	; 56
     19a:	b1 e0       	ldi	r27, 0x01	; 1
     19c:	01 c0       	rjmp	.+2      	; 0x1a0 <.do_clear_bss_start>

0000019e <.do_clear_bss_loop>:
     19e:	1d 92       	st	X+, r1

000001a0 <.do_clear_bss_start>:
     1a0:	af 3f       	cpi	r26, 0xFF	; 255
     1a2:	b2 07       	cpc	r27, r18
     1a4:	e1 f7       	brne	.-8      	; 0x19e <.do_clear_bss_loop>

000001a6 <__do_global_ctors>:
     1a6:	10 e0       	ldi	r17, 0x00	; 0
     1a8:	ca eb       	ldi	r28, 0xBA	; 186
     1aa:	d0 e0       	ldi	r29, 0x00	; 0
     1ac:	04 c0       	rjmp	.+8      	; 0x1b6 <__do_global_ctors+0x10>
     1ae:	21 97       	sbiw	r28, 0x01	; 1
     1b0:	fe 01       	movw	r30, r28
     1b2:	0e 94 3d 0e 	call	0x1c7a	; 0x1c7a <__tablejump2__>
     1b6:	c7 3b       	cpi	r28, 0xB7	; 183
     1b8:	d1 07       	cpc	r29, r17
     1ba:	c9 f7       	brne	.-14     	; 0x1ae <__do_global_ctors+0x8>
     1bc:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <main>
     1c0:	0c 94 99 12 	jmp	0x2532	; 0x2532 <_exit>

000001c4 <__bad_interrupt>:
     1c4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001c8 <_ZN10LocoPacketC1Ev>:

#if ENA_MODE_W_EEPROM == 0

extern UART uart;

LocoPacket::LocoPacket()
     1c8:	fc 01       	movw	r30, r24
     1ca:	8c ed       	ldi	r24, 0xDC	; 220
     1cc:	95 e0       	ldi	r25, 0x05	; 5
     1ce:	93 8b       	std	Z+19, r25	; 0x13
     1d0:	82 8b       	std	Z+18, r24	; 0x12
     1d2:	88 ec       	ldi	r24, 0xC8	; 200
     1d4:	90 e0       	ldi	r25, 0x00	; 0
     1d6:	95 8b       	std	Z+21, r25	; 0x15
     1d8:	84 8b       	std	Z+20, r24	; 0x14
     1da:	80 ed       	ldi	r24, 0xD0	; 208
     1dc:	97 e0       	ldi	r25, 0x07	; 7
     1de:	97 8b       	std	Z+23, r25	; 0x17
     1e0:	86 8b       	std	Z+22, r24	; 0x16
     1e2:	08 95       	ret

000001e4 <_ZN10LocoPacket7send_B2Ejb>:
	}
}

//отправка по LocoNet2 команды B2
void LocoPacket::send_B2(uint16_t addr_B2, bool state)
{
     1e4:	cf 93       	push	r28
     1e6:	df 93       	push	r29
     1e8:	cd b7       	in	r28, 0x3d	; 61
     1ea:	de b7       	in	r29, 0x3e	; 62
     1ec:	60 97       	sbiw	r28, 0x10	; 16
     1ee:	0f b6       	in	r0, 0x3f	; 63
     1f0:	f8 94       	cli
     1f2:	de bf       	out	0x3e, r29	; 62
     1f4:	0f be       	out	0x3f, r0	; 63
     1f6:	cd bf       	out	0x3d, r28	; 61
	#if SHOW_LOCONET
	uart.print(PSTR("[Tx][%dB2_%d]\n"), state, addr_B2);
	#endif
	
	uint8_t board = (addr_B2) / 16;
     1f8:	cb 01       	movw	r24, r22
     1fa:	e4 e0       	ldi	r30, 0x04	; 4
     1fc:	96 95       	lsr	r25
     1fe:	87 95       	ror	r24
     200:	ea 95       	dec	r30
     202:	e1 f7       	brne	.-8      	; 0x1fc <_ZN10LocoPacket7send_B2Ejb+0x18>
	uint8_t input = (addr_B2) % 16;
     204:	26 2f       	mov	r18, r22
     206:	2f 70       	andi	r18, 0x0F	; 15
	uint16_t result, input_2;
	lnMsg	Ln2TxPacket;

	if (input == 0 || input == 1) input_2 = 0;
     208:	22 30       	cpi	r18, 0x02	; 2
     20a:	d0 f0       	brcs	.+52     	; 0x240 <_ZN10LocoPacket7send_B2Ejb+0x5c>
	else if (input == 2 || input == 3) input_2 = 1;
     20c:	3e ef       	ldi	r19, 0xFE	; 254
     20e:	32 0f       	add	r19, r18
     210:	32 30       	cpi	r19, 0x02	; 2
     212:	c8 f0       	brcs	.+50     	; 0x246 <_ZN10LocoPacket7send_B2Ejb+0x62>
	else if (input == 4 || input == 5) input_2 = 2;
     214:	3c ef       	ldi	r19, 0xFC	; 252
     216:	32 0f       	add	r19, r18
     218:	32 30       	cpi	r19, 0x02	; 2
     21a:	c0 f0       	brcs	.+48     	; 0x24c <_ZN10LocoPacket7send_B2Ejb+0x68>
	else if (input == 6 || input == 7) input_2 = 3;
     21c:	3a ef       	ldi	r19, 0xFA	; 250
     21e:	32 0f       	add	r19, r18
     220:	32 30       	cpi	r19, 0x02	; 2
     222:	b8 f0       	brcs	.+46     	; 0x252 <_ZN10LocoPacket7send_B2Ejb+0x6e>
	else if (input == 8 || input == 9) input_2 = 4;
     224:	38 ef       	ldi	r19, 0xF8	; 248
     226:	32 0f       	add	r19, r18
     228:	32 30       	cpi	r19, 0x02	; 2
     22a:	b0 f0       	brcs	.+44     	; 0x258 <_ZN10LocoPacket7send_B2Ejb+0x74>
	else if (input == 10 || input == 11) input_2 = 5;
     22c:	36 ef       	ldi	r19, 0xF6	; 246
     22e:	32 0f       	add	r19, r18
     230:	32 30       	cpi	r19, 0x02	; 2
     232:	a8 f0       	brcs	.+42     	; 0x25e <_ZN10LocoPacket7send_B2Ejb+0x7a>
	else if (input == 12 || input == 13) input_2 = 6;
     234:	2c 50       	subi	r18, 0x0C	; 12
     236:	22 30       	cpi	r18, 0x02	; 2
     238:	a8 f4       	brcc	.+42     	; 0x264 <_ZN10LocoPacket7send_B2Ejb+0x80>
     23a:	26 e0       	ldi	r18, 0x06	; 6
     23c:	30 e0       	ldi	r19, 0x00	; 0
     23e:	14 c0       	rjmp	.+40     	; 0x268 <_ZN10LocoPacket7send_B2Ejb+0x84>
	uint8_t board = (addr_B2) / 16;
	uint8_t input = (addr_B2) % 16;
	uint16_t result, input_2;
	lnMsg	Ln2TxPacket;

	if (input == 0 || input == 1) input_2 = 0;
     240:	20 e0       	ldi	r18, 0x00	; 0
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	11 c0       	rjmp	.+34     	; 0x268 <_ZN10LocoPacket7send_B2Ejb+0x84>
	else if (input == 2 || input == 3) input_2 = 1;
     246:	21 e0       	ldi	r18, 0x01	; 1
     248:	30 e0       	ldi	r19, 0x00	; 0
     24a:	0e c0       	rjmp	.+28     	; 0x268 <_ZN10LocoPacket7send_B2Ejb+0x84>
	else if (input == 4 || input == 5) input_2 = 2;
     24c:	22 e0       	ldi	r18, 0x02	; 2
     24e:	30 e0       	ldi	r19, 0x00	; 0
     250:	0b c0       	rjmp	.+22     	; 0x268 <_ZN10LocoPacket7send_B2Ejb+0x84>
	else if (input == 6 || input == 7) input_2 = 3;
     252:	23 e0       	ldi	r18, 0x03	; 3
     254:	30 e0       	ldi	r19, 0x00	; 0
     256:	08 c0       	rjmp	.+16     	; 0x268 <_ZN10LocoPacket7send_B2Ejb+0x84>
	else if (input == 8 || input == 9) input_2 = 4;
     258:	24 e0       	ldi	r18, 0x04	; 4
     25a:	30 e0       	ldi	r19, 0x00	; 0
     25c:	05 c0       	rjmp	.+10     	; 0x268 <_ZN10LocoPacket7send_B2Ejb+0x84>
	else if (input == 10 || input == 11) input_2 = 5;
     25e:	25 e0       	ldi	r18, 0x05	; 5
     260:	30 e0       	ldi	r19, 0x00	; 0
     262:	02 c0       	rjmp	.+4      	; 0x268 <_ZN10LocoPacket7send_B2Ejb+0x84>
	else if (input == 12 || input == 13) input_2 = 6;
	else if (input == 14 || input == 15) input_2 = 7;
     264:	27 e0       	ldi	r18, 0x07	; 7
     266:	30 e0       	ldi	r19, 0x00	; 0
	else input_2 = 0;

	result = board;                       //    [0,0,0,0,0,0,0,0][B7,B6,B5,B4,B3,B2,B1,B0]
	result <<= 3;                         //    [0,0,0,0,0,B7,B6,B5][B4,B3,B2,B1,B0,0,0,0]
     268:	99 27       	eor	r25, r25
     26a:	53 e0       	ldi	r21, 0x03	; 3
     26c:	88 0f       	add	r24, r24
     26e:	99 1f       	adc	r25, r25
     270:	5a 95       	dec	r21
     272:	e1 f7       	brne	.-8      	; 0x26c <_ZN10LocoPacket7send_B2Ejb+0x88>
	result += input_2;                    //	[0,0,0,0,0,B7,B6,B5][B4,B3,B2,B1,B0,I2,I1,I0] == [0,0,0,0,0,A10,A9,A8][A7,A6,A5,A4,A3,A2,A1,A0]
     274:	82 0f       	add	r24, r18
     276:	93 1f       	adc	r25, r19

	Ln2TxPacket.data[0] = 0xB2;
     278:	22 eb       	ldi	r18, 0xB2	; 178
     27a:	29 83       	std	Y+1, r18	; 0x01
	Ln2TxPacket.data[1] = (uint8_t)(result & 0x7F);  //	0b01111111			- select A6....A0
     27c:	28 2f       	mov	r18, r24
     27e:	2f 77       	andi	r18, 0x7F	; 127
     280:	2a 83       	std	Y+2, r18	; 0x02
	Ln2TxPacket.data[2] = (uint8_t)(result >> 7);    //	0b11110000000 >> 7	- select A10...A7
     282:	88 0f       	add	r24, r24
     284:	89 2f       	mov	r24, r25
     286:	88 1f       	adc	r24, r24
     288:	99 0b       	sbc	r25, r25
     28a:	91 95       	neg	r25

	if (state)
     28c:	41 11       	cpse	r20, r1
	Ln2TxPacket.data[2] |= 0x10; // Set L
     28e:	80 61       	ori	r24, 0x10	; 16
     290:	8b 83       	std	Y+3, r24	; 0x03

	if (input == 1 || input == 3 || input == 5 || input == 7 || input == 9 || input == 11 || input == 13 || input == 15)
     292:	69 70       	andi	r22, 0x09	; 9
     294:	61 30       	cpi	r22, 0x01	; 1
     296:	11 f0       	breq	.+4      	; 0x29c <_ZN10LocoPacket7send_B2Ejb+0xb8>
     298:	69 30       	cpi	r22, 0x09	; 9
     29a:	19 f4       	brne	.+6      	; 0x2a2 <_ZN10LocoPacket7send_B2Ejb+0xbe>
	Ln2TxPacket.data[2] |= 0x20; // Set I
     29c:	8b 81       	ldd	r24, Y+3	; 0x03
     29e:	80 62       	ori	r24, 0x20	; 32
     2a0:	8b 83       	std	Y+3, r24	; 0x03

	Ln2TxPacket.data[2] |= 0x40; //  Set X = 1
     2a2:	8b 81       	ldd	r24, Y+3	; 0x03
     2a4:	80 64       	ori	r24, 0x40	; 64
     2a6:	8b 83       	std	Y+3, r24	; 0x03

	LocoNet.send(&Ln2TxPacket);
     2a8:	be 01       	movw	r22, r28
     2aa:	6f 5f       	subi	r22, 0xFF	; 255
     2ac:	7f 4f       	sbci	r23, 0xFF	; 255
     2ae:	88 e3       	ldi	r24, 0x38	; 56
     2b0:	91 e0       	ldi	r25, 0x01	; 1
     2b2:	0e 94 06 04 	call	0x80c	; 0x80c <_ZN12LocoNetClass4sendEP5lnMsg>
}
     2b6:	60 96       	adiw	r28, 0x10	; 16
     2b8:	0f b6       	in	r0, 0x3f	; 63
     2ba:	f8 94       	cli
     2bc:	de bf       	out	0x3e, r29	; 62
     2be:	0f be       	out	0x3f, r0	; 63
     2c0:	cd bf       	out	0x3d, r28	; 61
     2c2:	df 91       	pop	r29
     2c4:	cf 91       	pop	r28
     2c6:	08 95       	ret

000002c8 <_ZN10LocoPacket13send_B2_helloEv>:

void LocoPacket::send_B2_hello()
{
	send_B2(LOCO_START_B2_HELLO_BOARDS + ADDR_BOARD, true);
     2c8:	41 e0       	ldi	r20, 0x01	; 1
     2ca:	60 e0       	ldi	r22, 0x00	; 0
     2cc:	70 e0       	ldi	r23, 0x00	; 0
     2ce:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <_ZN10LocoPacket7send_B2Ejb>

000002d2 <_ZN10LocoPacket7read_B2Ejb>:
}

#pragma region B2
void LocoPacket::read_B2(uint16_t addr_B2, bool state)
{
	addr_B2--;
     2d2:	61 50       	subi	r22, 0x01	; 1
     2d4:	71 09       	sbc	r23, r1
	if ( (addr_B2 == LOCO_START_B2_HELLO_BOARDS + ADDR_BOARD) || (addr_B2 == LOCO_FINISH_B2_HELLO) ) {
     2d6:	19 f0       	breq	.+6      	; 0x2de <_ZN10LocoPacket7read_B2Ejb+0xc>
     2d8:	67 3c       	cpi	r22, 0xC7	; 199
     2da:	71 05       	cpc	r23, r1
     2dc:	21 f4       	brne	.+8      	; 0x2e6 <_ZN10LocoPacket7read_B2Ejb+0x14>
		if (state == false) {
     2de:	41 11       	cpse	r20, r1
     2e0:	02 c0       	rjmp	.+4      	; 0x2e6 <_ZN10LocoPacket7read_B2Ejb+0x14>
			send_B2_hello();
     2e2:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <_ZN10LocoPacket13send_B2_helloEv>
     2e6:	08 95       	ret

000002e8 <_ZN10LocoPacket4readEv>:
LocoPacket::LocoPacket()
{
}

lnMsg* LocoPacket::read()
{
     2e8:	df 92       	push	r13
     2ea:	ef 92       	push	r14
     2ec:	ff 92       	push	r15
     2ee:	0f 93       	push	r16
     2f0:	1f 93       	push	r17
     2f2:	cf 93       	push	r28
     2f4:	df 93       	push	r29
     2f6:	cd b7       	in	r28, 0x3d	; 61
     2f8:	de b7       	in	r29, 0x3e	; 62
     2fa:	60 97       	sbiw	r28, 0x10	; 16
     2fc:	0f b6       	in	r0, 0x3f	; 63
     2fe:	f8 94       	cli
     300:	de bf       	out	0x3e, r29	; 62
     302:	0f be       	out	0x3f, r0	; 63
     304:	cd bf       	out	0x3d, r28	; 61
     306:	8c 01       	movw	r16, r24
					break;
				}
				case 0xBB: {
					if (this->lnrx->data[1] == 0x03) {
						lnMsg Ln2TxPacket;
						Ln2TxPacket.data[0] = 0xE7;
     308:	97 ee       	ldi	r25, 0xE7	; 231
     30a:	f9 2e       	mov	r15, r25
						Ln2TxPacket.data[1] = 0x0E;
     30c:	2e e0       	ldi	r18, 0x0E	; 14
     30e:	e2 2e       	mov	r14, r18
						Ln2TxPacket.data[2] = 0x03;
						Ln2TxPacket.data[3] = 0x00;
						Ln2TxPacket.data[4] = 0x00;
						Ln2TxPacket.data[5] = 0x00;
						Ln2TxPacket.data[6] = 0x00;
						Ln2TxPacket.data[7] = 0x47;
     310:	37 e4       	ldi	r19, 0x47	; 71
     312:	d3 2e       	mov	r13, r19
{
}

lnMsg* LocoPacket::read()
{
	while(LocoNet.available() > 0) {
     314:	88 e3       	ldi	r24, 0x38	; 56
     316:	91 e0       	ldi	r25, 0x01	; 1
     318:	0e 94 c2 03 	call	0x784	; 0x784 <_ZN12LocoNetClass9availableEv>
     31c:	88 23       	and	r24, r24
     31e:	09 f4       	brne	.+2      	; 0x322 <_ZN10LocoPacket4readEv+0x3a>
     320:	4e c0       	rjmp	.+156    	; 0x3be <_ZN10LocoPacket4readEv+0xd6>
		this->lnrx = LocoNet.receive();
     322:	88 e3       	ldi	r24, 0x38	; 56
     324:	91 e0       	ldi	r25, 0x01	; 1
     326:	0e 94 cf 03 	call	0x79e	; 0x79e <_ZN12LocoNetClass7receiveEv>
     32a:	fc 01       	movw	r30, r24
     32c:	d8 01       	movw	r26, r16
     32e:	8d 93       	st	X+, r24
     330:	9c 93       	st	X, r25
		if (this->lnrx != NULL) {
     332:	89 2b       	or	r24, r25
     334:	b9 f1       	breq	.+110    	; 0x3a4 <_ZN10LocoPacket4readEv+0xbc>
	
			uint16_t Address = (this->lnrx->srq.sw1 | ( ( this->lnrx->srq.sw2 & 0x0F ) << 7 ));
     336:	81 81       	ldd	r24, Z+1	; 0x01
     338:	42 81       	ldd	r20, Z+2	; 0x02
     33a:	64 2f       	mov	r22, r20
     33c:	6f 70       	andi	r22, 0x0F	; 15
     33e:	b0 e8       	ldi	r27, 0x80	; 128
     340:	6b 9f       	mul	r22, r27
     342:	b0 01       	movw	r22, r0
     344:	11 24       	eor	r1, r1
     346:	68 2b       	or	r22, r24
			if( this->lnrx->sr.command != OPC_INPUT_REP ) {
     348:	90 81       	ld	r25, Z
     34a:	92 3b       	cpi	r25, 0xB2	; 178
     34c:	19 f0       	breq	.+6      	; 0x354 <_ZN10LocoPacket4readEv+0x6c>
			//uart.print(PSTR("read LocoPack: addr %d\n"), Address);
			//for (uint8_t i = 0; i < 16; i++) {
				//uart.print(PSTR("%d "), this->lnrx->data[i]);
			//}
			//uart.print(PSTR("\n"));
			switch (this->lnrx->data[0]) {
     34e:	9b 3b       	cpi	r25, 0xBB	; 187
     350:	91 f0       	breq	.+36     	; 0x376 <_ZN10LocoPacket4readEv+0x8e>
     352:	e0 cf       	rjmp	.-64     	; 0x314 <_ZN10LocoPacket4readEv+0x2c>
				case 0xB2: {
					Address <<= 1 ;
     354:	66 0f       	add	r22, r22
     356:	77 1f       	adc	r23, r23
					Address += ( this->lnrx->ir.in2 & OPC_INPUT_REP_SW ) ? 2 : 1 ;
     358:	45 fd       	sbrc	r20, 5
     35a:	03 c0       	rjmp	.+6      	; 0x362 <_ZN10LocoPacket4readEv+0x7a>
     35c:	81 e0       	ldi	r24, 0x01	; 1
     35e:	90 e0       	ldi	r25, 0x00	; 0
     360:	02 c0       	rjmp	.+4      	; 0x366 <_ZN10LocoPacket4readEv+0x7e>
     362:	82 e0       	ldi	r24, 0x02	; 2
     364:	90 e0       	ldi	r25, 0x00	; 0
					this->read_B2(Address, (bool)(this->lnrx->ir.in2 & OPC_INPUT_REP_HI));
     366:	42 95       	swap	r20
     368:	41 70       	andi	r20, 0x01	; 1
     36a:	68 0f       	add	r22, r24
     36c:	79 1f       	adc	r23, r25
     36e:	c8 01       	movw	r24, r16
     370:	0e 94 69 01 	call	0x2d2	; 0x2d2 <_ZN10LocoPacket7read_B2Ejb>
					break;
     374:	cf cf       	rjmp	.-98     	; 0x314 <_ZN10LocoPacket4readEv+0x2c>
				case 0xB0: {
					this->read_B0(Address, (bool)(this->lnrx->srq.sw2 & OPC_SW_REQ_OUT), (bool)(this->lnrx->srq.sw2 & OPC_SW_REQ_DIR));
					break;
				}
				case 0xBB: {
					if (this->lnrx->data[1] == 0x03) {
     376:	83 30       	cpi	r24, 0x03	; 3
     378:	69 f6       	brne	.-102    	; 0x314 <_ZN10LocoPacket4readEv+0x2c>
						lnMsg Ln2TxPacket;
						Ln2TxPacket.data[0] = 0xE7;
     37a:	f9 82       	std	Y+1, r15	; 0x01
						Ln2TxPacket.data[1] = 0x0E;
     37c:	ea 82       	std	Y+2, r14	; 0x02
						Ln2TxPacket.data[2] = 0x03;
     37e:	8b 83       	std	Y+3, r24	; 0x03
						Ln2TxPacket.data[3] = 0x00;
     380:	1c 82       	std	Y+4, r1	; 0x04
						Ln2TxPacket.data[4] = 0x00;
     382:	1d 82       	std	Y+5, r1	; 0x05
						Ln2TxPacket.data[5] = 0x00;
     384:	1e 82       	std	Y+6, r1	; 0x06
						Ln2TxPacket.data[6] = 0x00;
     386:	1f 82       	std	Y+7, r1	; 0x07
						Ln2TxPacket.data[7] = 0x47;
     388:	d8 86       	std	Y+8, r13	; 0x08
						Ln2TxPacket.data[8] = 0x00;
     38a:	19 86       	std	Y+9, r1	; 0x09
						Ln2TxPacket.data[9] = 0x00;
     38c:	1a 86       	std	Y+10, r1	; 0x0a
						Ln2TxPacket.data[10] = 0x00;
     38e:	1b 86       	std	Y+11, r1	; 0x0b
						Ln2TxPacket.data[11] = 0x00;
     390:	1c 86       	std	Y+12, r1	; 0x0c
						Ln2TxPacket.data[12] = 0x00;
     392:	1d 86       	std	Y+13, r1	; 0x0d
						LocoNet.send(&Ln2TxPacket);
     394:	be 01       	movw	r22, r28
     396:	6f 5f       	subi	r22, 0xFF	; 255
     398:	7f 4f       	sbci	r23, 0xFF	; 255
     39a:	88 e3       	ldi	r24, 0x38	; 56
     39c:	91 e0       	ldi	r25, 0x01	; 1
     39e:	0e 94 06 04 	call	0x80c	; 0x80c <_ZN12LocoNetClass4sendEP5lnMsg>
     3a2:	b8 cf       	rjmp	.-144    	; 0x314 <_ZN10LocoPacket4readEv+0x2c>
     3a4:	80 e0       	ldi	r24, 0x00	; 0
     3a6:	90 e0       	ldi	r25, 0x00	; 0
					}
				}
			}
		} else {
			for (uint8_t i = 0; i < 16; i++) {
				this->lnrx->data[i] = 0x00;
     3a8:	d8 01       	movw	r26, r16
     3aa:	ed 91       	ld	r30, X+
     3ac:	fc 91       	ld	r31, X
     3ae:	e8 0f       	add	r30, r24
     3b0:	f9 1f       	adc	r31, r25
     3b2:	10 82       	st	Z, r1
     3b4:	01 96       	adiw	r24, 0x01	; 1
						LocoNet.send(&Ln2TxPacket);
					}
				}
			}
		} else {
			for (uint8_t i = 0; i < 16; i++) {
     3b6:	80 31       	cpi	r24, 0x10	; 16
     3b8:	91 05       	cpc	r25, r1
     3ba:	b1 f7       	brne	.-20     	; 0x3a8 <_ZN10LocoPacket4readEv+0xc0>
     3bc:	ab cf       	rjmp	.-170    	; 0x314 <_ZN10LocoPacket4readEv+0x2c>
				this->lnrx->data[i] = 0x00;
			}
		}
	}

}
     3be:	60 96       	adiw	r28, 0x10	; 16
     3c0:	0f b6       	in	r0, 0x3f	; 63
     3c2:	f8 94       	cli
     3c4:	de bf       	out	0x3e, r29	; 62
     3c6:	0f be       	out	0x3f, r0	; 63
     3c8:	cd bf       	out	0x3d, r28	; 61
     3ca:	df 91       	pop	r29
     3cc:	cf 91       	pop	r28
     3ce:	1f 91       	pop	r17
     3d0:	0f 91       	pop	r16
     3d2:	ff 90       	pop	r15
     3d4:	ef 90       	pop	r14
     3d6:	df 90       	pop	r13
     3d8:	08 95       	ret

000003da <_Z15logic_timer_1Hzv>:



//логика таймера
void logic_timer_1Hz()
{
     3da:	08 95       	ret

000003dc <_ZN5TimerC1Ev>:
#include "Timer.h"
#if ENA_MODE_W_EEPROM == 0

Timer::Timer()
{
	this->cnt_1Hz = 0;
     3dc:	fc 01       	movw	r30, r24
     3de:	11 82       	std	Z+1, r1	; 0x01
     3e0:	10 82       	st	Z, r1
	this->ena_timer_1Hz = false;
     3e2:	12 82       	std	Z+2, r1	; 0x02
	
	TCCR2B |= (0 << CS22) | (1 << CS21) | (0 << CS20);
     3e4:	e1 eb       	ldi	r30, 0xB1	; 177
     3e6:	f0 e0       	ldi	r31, 0x00	; 0
     3e8:	80 81       	ld	r24, Z
     3ea:	82 60       	ori	r24, 0x02	; 2
     3ec:	80 83       	st	Z, r24
	TIMSK2 |= (1 << TOIE2);		//enable interrupt
     3ee:	e0 e7       	ldi	r30, 0x70	; 112
     3f0:	f0 e0       	ldi	r31, 0x00	; 0
     3f2:	80 81       	ld	r24, Z
     3f4:	81 60       	ori	r24, 0x01	; 1
     3f6:	80 83       	st	Z, r24
	sei();
     3f8:	78 94       	sei
     3fa:	08 95       	ret

000003fc <__vector_9>:
}

ISR(TIMER2_OVF_vect)	// F = 16MHz / (8 * 200) = 10 000 Hz
{
     3fc:	1f 92       	push	r1
     3fe:	0f 92       	push	r0
     400:	0f b6       	in	r0, 0x3f	; 63
     402:	0f 92       	push	r0
     404:	11 24       	eor	r1, r1
     406:	8f 93       	push	r24
     408:	9f 93       	push	r25
	TIMSK2 &= ~(1 << TOIE2);			//disable interrupt
     40a:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>
     40e:	8e 7f       	andi	r24, 0xFE	; 254
     410:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>
	TCNT2 = 0xFF - 220;
     414:	83 e2       	ldi	r24, 0x23	; 35
     416:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
	if (timer.cnt_1Hz >= 163) {
     41a:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <timer>
     41e:	90 91 69 02 	lds	r25, 0x0269	; 0x800269 <timer+0x1>
     422:	83 3a       	cpi	r24, 0xA3	; 163
     424:	91 05       	cpc	r25, r1
     426:	40 f0       	brcs	.+16     	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
		timer.ena_timer_1Hz = true;
     428:	81 e0       	ldi	r24, 0x01	; 1
     42a:	80 93 6a 02 	sts	0x026A, r24	; 0x80026a <timer+0x2>
		timer.cnt_1Hz = 0;
     42e:	10 92 69 02 	sts	0x0269, r1	; 0x800269 <timer+0x1>
     432:	10 92 68 02 	sts	0x0268, r1	; 0x800268 <timer>
     436:	05 c0       	rjmp	.+10     	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
	} else {
		timer.cnt_1Hz++;
     438:	01 96       	adiw	r24, 0x01	; 1
     43a:	90 93 69 02 	sts	0x0269, r25	; 0x800269 <timer+0x1>
     43e:	80 93 68 02 	sts	0x0268, r24	; 0x800268 <timer>
	}

	TIMSK2 |= (1 << TOIE2);				//enable interrupt
     442:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>
     446:	81 60       	ori	r24, 0x01	; 1
     448:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>
}
     44c:	9f 91       	pop	r25
     44e:	8f 91       	pop	r24
     450:	0f 90       	pop	r0
     452:	0f be       	out	0x3f, r0	; 63
     454:	0f 90       	pop	r0
     456:	1f 90       	pop	r1
     458:	18 95       	reti

0000045a <_ZN4UARTC1Ev>:

extern LocoPacket loco;

UART::UART()
{
	this->cnt_rx_read = 0;
     45a:	fc 01       	movw	r30, r24
     45c:	ef 5b       	subi	r30, 0xBF	; 191
     45e:	ff 4f       	sbci	r31, 0xFF	; 255
     460:	10 82       	st	Z, r1
	this->cnt_rx_save = 0;
     462:	31 97       	sbiw	r30, 0x01	; 1
     464:	10 82       	st	Z, r1
     466:	08 95       	ret

00000468 <_ZN4UART5printEPKcz>:
}

void UART::print(const char* typeFormat, ...) {
     468:	ef 92       	push	r14
     46a:	ff 92       	push	r15
     46c:	0f 93       	push	r16
     46e:	1f 93       	push	r17
     470:	cf 93       	push	r28
     472:	df 93       	push	r29
     474:	cd b7       	in	r28, 0x3d	; 61
     476:	de b7       	in	r29, 0x3e	; 62
	va_list args;
	va_start(args, typeFormat);
	size_t bufferSize = vsnprintf_P(NULL, 0, typeFormat, args) + 1;
     478:	9e 01       	movw	r18, r28
     47a:	23 5f       	subi	r18, 0xF3	; 243
     47c:	3f 4f       	sbci	r19, 0xFF	; 255
     47e:	4b 85       	ldd	r20, Y+11	; 0x0b
     480:	5c 85       	ldd	r21, Y+12	; 0x0c
     482:	60 e0       	ldi	r22, 0x00	; 0
     484:	70 e0       	ldi	r23, 0x00	; 0
     486:	80 e0       	ldi	r24, 0x00	; 0
     488:	90 e0       	ldi	r25, 0x00	; 0
     48a:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <vsnprintf_P>
     48e:	01 96       	adiw	r24, 0x01	; 1
     490:	7c 01       	movw	r14, r24
	char* buffer = (char*)malloc(bufferSize);
     492:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <malloc>
     496:	8c 01       	movw	r16, r24
	if (buffer) {
     498:	00 97       	sbiw	r24, 0x00	; 0
     49a:	81 f0       	breq	.+32     	; 0x4bc <_ZN4UART5printEPKcz+0x54>
		vsnprintf_P(buffer, bufferSize, typeFormat, args);
     49c:	9e 01       	movw	r18, r28
     49e:	23 5f       	subi	r18, 0xF3	; 243
     4a0:	3f 4f       	sbci	r19, 0xFF	; 255
     4a2:	4b 85       	ldd	r20, Y+11	; 0x0b
     4a4:	5c 85       	ldd	r21, Y+12	; 0x0c
     4a6:	b7 01       	movw	r22, r14
     4a8:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <vsnprintf_P>
		Serial.print(buffer);
     4ac:	b8 01       	movw	r22, r16
     4ae:	85 e5       	ldi	r24, 0x55	; 85
     4b0:	93 e0       	ldi	r25, 0x03	; 3
     4b2:	0e 94 b1 0c 	call	0x1962	; 0x1962 <_ZN5Print5printEPKc>
		free(buffer);
     4b6:	c8 01       	movw	r24, r16
     4b8:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <free>
	}
	va_end(args);
}
     4bc:	df 91       	pop	r29
     4be:	cf 91       	pop	r28
     4c0:	1f 91       	pop	r17
     4c2:	0f 91       	pop	r16
     4c4:	ff 90       	pop	r15
     4c6:	ef 90       	pop	r14
     4c8:	08 95       	ret

000004ca <_ZN4UART13clear_buff_rxEv>:


void UART::clear_buff_rx()
{
     4ca:	fc 01       	movw	r30, r24
     4cc:	9c 01       	movw	r18, r24
     4ce:	20 5c       	subi	r18, 0xC0	; 192
     4d0:	3f 4f       	sbci	r19, 0xFF	; 255
	for (uint8_t i = 0; i < UART_BUF_RX_SIZE; i++) {
		this->buff_rx[i] = 0;
     4d2:	11 92       	st	Z+, r1
}


void UART::clear_buff_rx()
{
	for (uint8_t i = 0; i < UART_BUF_RX_SIZE; i++) {
     4d4:	e2 17       	cp	r30, r18
     4d6:	f3 07       	cpc	r31, r19
     4d8:	e1 f7       	brne	.-8      	; 0x4d2 <_ZN4UART13clear_buff_rxEv+0x8>
		this->buff_rx[i] = 0;
	}
	this->cnt_rx_save = 0;
     4da:	10 82       	st	Z, r1
	this->cnt_rx_read = 0;
     4dc:	fc 01       	movw	r30, r24
     4de:	ef 5b       	subi	r30, 0xBF	; 191
     4e0:	ff 4f       	sbci	r31, 0xFF	; 255
     4e2:	10 82       	st	Z, r1
     4e4:	08 95       	ret

000004e6 <_ZN4UART9read_nameEPKc>:
}

bool UART::read_name(const char* str)
{
     4e6:	cf 93       	push	r28
     4e8:	df 93       	push	r29
	uint8_t cnt_rx_read = this->cnt_rx_read;
	if (this->cnt_rx_save >= strlen(str)) {
     4ea:	fb 01       	movw	r30, r22
     4ec:	01 90       	ld	r0, Z+
     4ee:	00 20       	and	r0, r0
     4f0:	e9 f7       	brne	.-6      	; 0x4ec <_ZN4UART9read_nameEPKc+0x6>
     4f2:	31 97       	sbiw	r30, 0x01	; 1
     4f4:	e6 1b       	sub	r30, r22
     4f6:	f7 0b       	sbc	r31, r23
     4f8:	dc 01       	movw	r26, r24
     4fa:	a0 5c       	subi	r26, 0xC0	; 192
     4fc:	bf 4f       	sbci	r27, 0xFF	; 255
     4fe:	2c 91       	ld	r18, X
     500:	30 e0       	ldi	r19, 0x00	; 0
     502:	2e 17       	cp	r18, r30
     504:	3f 07       	cpc	r19, r31
     506:	58 f1       	brcs	.+86     	; 0x55e <_ZN4UART9read_nameEPKc+0x78>
	this->cnt_rx_read = 0;
}

bool UART::read_name(const char* str)
{
	uint8_t cnt_rx_read = this->cnt_rx_read;
     508:	fc 01       	movw	r30, r24
     50a:	ef 5b       	subi	r30, 0xBF	; 191
     50c:	ff 4f       	sbci	r31, 0xFF	; 255
     50e:	c0 81       	ld	r28, Z
     510:	30 e0       	ldi	r19, 0x00	; 0
	if (this->cnt_rx_save >= strlen(str)) {
		for (uint8_t i = 0; i < strlen(str); i++, this->cnt_rx_read++) {
     512:	43 2f       	mov	r20, r19
     514:	50 e0       	ldi	r21, 0x00	; 0
     516:	db 01       	movw	r26, r22
     518:	0d 90       	ld	r0, X+
     51a:	00 20       	and	r0, r0
     51c:	e9 f7       	brne	.-6      	; 0x518 <_ZN4UART9read_nameEPKc+0x32>
     51e:	11 97       	sbiw	r26, 0x01	; 1
     520:	a6 1b       	sub	r26, r22
     522:	b7 0b       	sbc	r27, r23
			if (this->buff_rx[this->cnt_rx_read] != str[i]) {
				this->cnt_rx_read = cnt_rx_read;
				return 0;
			}
		}
		if (this->buff_rx[this->cnt_rx_read] == 32) {
     524:	20 81       	ld	r18, Z

bool UART::read_name(const char* str)
{
	uint8_t cnt_rx_read = this->cnt_rx_read;
	if (this->cnt_rx_save >= strlen(str)) {
		for (uint8_t i = 0; i < strlen(str); i++, this->cnt_rx_read++) {
     526:	4a 17       	cp	r20, r26
     528:	5b 07       	cpc	r21, r27
     52a:	80 f4       	brcc	.+32     	; 0x54c <_ZN4UART9read_nameEPKc+0x66>
			if (this->buff_rx[this->cnt_rx_read] != str[i]) {
     52c:	dc 01       	movw	r26, r24
     52e:	a2 0f       	add	r26, r18
     530:	b1 1d       	adc	r27, r1
     532:	46 0f       	add	r20, r22
     534:	57 1f       	adc	r21, r23
     536:	dc 91       	ld	r29, X
     538:	da 01       	movw	r26, r20
     53a:	4c 91       	ld	r20, X
     53c:	d4 17       	cp	r29, r20
     53e:	11 f0       	breq	.+4      	; 0x544 <_ZN4UART9read_nameEPKc+0x5e>
				this->cnt_rx_read = cnt_rx_read;
     540:	c0 83       	st	Z, r28
     542:	0d c0       	rjmp	.+26     	; 0x55e <_ZN4UART9read_nameEPKc+0x78>

bool UART::read_name(const char* str)
{
	uint8_t cnt_rx_read = this->cnt_rx_read;
	if (this->cnt_rx_save >= strlen(str)) {
		for (uint8_t i = 0; i < strlen(str); i++, this->cnt_rx_read++) {
     544:	3f 5f       	subi	r19, 0xFF	; 255
     546:	2f 5f       	subi	r18, 0xFF	; 255
     548:	20 83       	st	Z, r18
     54a:	e3 cf       	rjmp	.-58     	; 0x512 <_ZN4UART9read_nameEPKc+0x2c>
			if (this->buff_rx[this->cnt_rx_read] != str[i]) {
				this->cnt_rx_read = cnt_rx_read;
				return 0;
			}
		}
		if (this->buff_rx[this->cnt_rx_read] == 32) {
     54c:	dc 01       	movw	r26, r24
     54e:	a2 0f       	add	r26, r18
     550:	b1 1d       	adc	r27, r1
     552:	8c 91       	ld	r24, X
     554:	80 32       	cpi	r24, 0x20	; 32
     556:	29 f4       	brne	.+10     	; 0x562 <_ZN4UART9read_nameEPKc+0x7c>
			this->cnt_rx_read++;
     558:	2f 5f       	subi	r18, 0xFF	; 255
     55a:	20 83       	st	Z, r18
     55c:	02 c0       	rjmp	.+4      	; 0x562 <_ZN4UART9read_nameEPKc+0x7c>
		}
		return 1;
	}
	this->cnt_rx_read = cnt_rx_read;
	return 0;
     55e:	80 e0       	ldi	r24, 0x00	; 0
     560:	01 c0       	rjmp	.+2      	; 0x564 <_ZN4UART9read_nameEPKc+0x7e>
			if (this->buff_rx[this->cnt_rx_read] != str[i]) {
				this->cnt_rx_read = cnt_rx_read;
				return 0;
			}
		}
		if (this->buff_rx[this->cnt_rx_read] == 32) {
     562:	81 e0       	ldi	r24, 0x01	; 1
		}
		return 1;
	}
	this->cnt_rx_read = cnt_rx_read;
	return 0;
}
     564:	df 91       	pop	r29
     566:	cf 91       	pop	r28
     568:	08 95       	ret

0000056a <_ZN4UART8read_numEv>:

uint16_t UART::read_num()
{
     56a:	cf 92       	push	r12
     56c:	df 92       	push	r13
     56e:	ef 92       	push	r14
     570:	ff 92       	push	r15
     572:	0f 93       	push	r16
     574:	1f 93       	push	r17
     576:	cf 93       	push	r28
     578:	df 93       	push	r29
     57a:	cd b7       	in	r28, 0x3d	; 61
     57c:	de b7       	in	r29, 0x3e	; 62
     57e:	60 97       	sbiw	r28, 0x10	; 16
     580:	0f b6       	in	r0, 0x3f	; 63
     582:	f8 94       	cli
     584:	de bf       	out	0x3e, r29	; 62
     586:	0f be       	out	0x3f, r0	; 63
     588:	cd bf       	out	0x3d, r28	; 61
     58a:	dc 01       	movw	r26, r24
	char num[16] = {0};
     58c:	be 01       	movw	r22, r28
     58e:	6f 5f       	subi	r22, 0xFF	; 255
     590:	7f 4f       	sbci	r23, 0xFF	; 255
     592:	80 e1       	ldi	r24, 0x10	; 16
     594:	fb 01       	movw	r30, r22
     596:	11 92       	st	Z+, r1
     598:	8a 95       	dec	r24
     59a:	e9 f7       	brne	.-6      	; 0x596 <_ZN4UART8read_numEv+0x2c>
	uint16_t n = 0xFFFF;

	for (uint8_t i = 0; i < strlen(this->buff_rx); i++, this->cnt_rx_read++) {
     59c:	20 e0       	ldi	r18, 0x00	; 0
		if ((this->buff_rx[this->cnt_rx_read] == 0)
     59e:	8d 01       	movw	r16, r26
     5a0:	0f 5b       	subi	r16, 0xBF	; 191
     5a2:	1f 4f       	sbci	r17, 0xFF	; 255
uint16_t UART::read_num()
{
	char num[16] = {0};
	uint16_t n = 0xFFFF;

	for (uint8_t i = 0; i < strlen(this->buff_rx); i++, this->cnt_rx_read++) {
     5a4:	fd 01       	movw	r30, r26
     5a6:	01 90       	ld	r0, Z+
     5a8:	00 20       	and	r0, r0
     5aa:	e9 f7       	brne	.-6      	; 0x5a6 <_ZN4UART8read_numEv+0x3c>
     5ac:	31 97       	sbiw	r30, 0x01	; 1
     5ae:	6f 01       	movw	r12, r30
     5b0:	ca 1a       	sub	r12, r26
     5b2:	db 0a       	sbc	r13, r27
     5b4:	42 2f       	mov	r20, r18
     5b6:	50 e0       	ldi	r21, 0x00	; 0
     5b8:	4c 15       	cp	r20, r12
     5ba:	5d 05       	cpc	r21, r13
     5bc:	a8 f4       	brcc	.+42     	; 0x5e8 <_ZN4UART8read_numEv+0x7e>
		if ((this->buff_rx[this->cnt_rx_read] == 0)
     5be:	f8 01       	movw	r30, r16
     5c0:	90 81       	ld	r25, Z
     5c2:	7d 01       	movw	r14, r26
     5c4:	e9 0e       	add	r14, r25
     5c6:	f1 1c       	adc	r15, r1
     5c8:	f7 01       	movw	r30, r14
     5ca:	80 81       	ld	r24, Z
     5cc:	38 2f       	mov	r19, r24
     5ce:	3f 7d       	andi	r19, 0xDF	; 223
     5d0:	11 f4       	brne	.+4      	; 0x5d6 <_ZN4UART8read_numEv+0x6c>
		|| (this->buff_rx[this->cnt_rx_read] == 32)) {
			i = strlen(this->buff_rx);
     5d2:	2c 2d       	mov	r18, r12
     5d4:	04 c0       	rjmp	.+8      	; 0x5de <_ZN4UART8read_numEv+0x74>
			} else {
			num[i] = this->buff_rx[this->cnt_rx_read];
     5d6:	fb 01       	movw	r30, r22
     5d8:	e4 0f       	add	r30, r20
     5da:	f5 1f       	adc	r31, r21
     5dc:	80 83       	st	Z, r24
uint16_t UART::read_num()
{
	char num[16] = {0};
	uint16_t n = 0xFFFF;

	for (uint8_t i = 0; i < strlen(this->buff_rx); i++, this->cnt_rx_read++) {
     5de:	2f 5f       	subi	r18, 0xFF	; 255
     5e0:	9f 5f       	subi	r25, 0xFF	; 255
     5e2:	f8 01       	movw	r30, r16
     5e4:	90 83       	st	Z, r25
     5e6:	de cf       	rjmp	.-68     	; 0x5a4 <_ZN4UART8read_numEv+0x3a>
			i = strlen(this->buff_rx);
			} else {
			num[i] = this->buff_rx[this->cnt_rx_read];
		}
	}
	if (strlen(num) != 0) {
     5e8:	89 81       	ldd	r24, Y+1	; 0x01
     5ea:	88 23       	and	r24, r24
     5ec:	21 f0       	breq	.+8      	; 0x5f6 <_ZN4UART8read_numEv+0x8c>
		return atoi(num);
     5ee:	cb 01       	movw	r24, r22
     5f0:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <atoi>
     5f4:	02 c0       	rjmp	.+4      	; 0x5fa <_ZN4UART8read_numEv+0x90>
		} else {
		return 0xFFFF;
     5f6:	8f ef       	ldi	r24, 0xFF	; 255
     5f8:	9f ef       	ldi	r25, 0xFF	; 255
	}
}
     5fa:	60 96       	adiw	r28, 0x10	; 16
     5fc:	0f b6       	in	r0, 0x3f	; 63
     5fe:	f8 94       	cli
     600:	de bf       	out	0x3e, r29	; 62
     602:	0f be       	out	0x3f, r0	; 63
     604:	cd bf       	out	0x3d, r28	; 61
     606:	df 91       	pop	r29
     608:	cf 91       	pop	r28
     60a:	1f 91       	pop	r17
     60c:	0f 91       	pop	r16
     60e:	ff 90       	pop	r15
     610:	ef 90       	pop	r14
     612:	df 90       	pop	r13
     614:	cf 90       	pop	r12
     616:	08 95       	ret

00000618 <_ZN4UART9read_commEv>:
		}
	}
}

void UART::read_comm()
{
     618:	cf 93       	push	r28
     61a:	df 93       	push	r29
     61c:	d8 2f       	mov	r29, r24
     61e:	c9 2f       	mov	r28, r25
	if (read_name("b2 on")) {		//command: [b2 on ][addr_B2]
     620:	66 e0       	ldi	r22, 0x06	; 6
     622:	71 e0       	ldi	r23, 0x01	; 1
     624:	0e 94 73 02 	call	0x4e6	; 0x4e6 <_ZN4UART9read_nameEPKc>
     628:	88 23       	and	r24, r24
     62a:	29 f0       	breq	.+10     	; 0x636 <_ZN4UART9read_commEv+0x1e>
		uint16_t addr_B2 = read_num();
     62c:	8d 2f       	mov	r24, r29
     62e:	9c 2f       	mov	r25, r28
     630:	0e 94 b5 02 	call	0x56a	; 0x56a <_ZN4UART8read_numEv>
     634:	14 c0       	rjmp	.+40     	; 0x65e <_ZN4UART9read_commEv+0x46>

	} else if (read_name("b2 off")) {		//command: [b2 off ][addr_B2]
     636:	6c e0       	ldi	r22, 0x0C	; 12
     638:	71 e0       	ldi	r23, 0x01	; 1
     63a:	8d 2f       	mov	r24, r29
     63c:	9c 2f       	mov	r25, r28
     63e:	0e 94 73 02 	call	0x4e6	; 0x4e6 <_ZN4UART9read_nameEPKc>
     642:	81 11       	cpse	r24, r1
     644:	f3 cf       	rjmp	.-26     	; 0x62c <_ZN4UART9read_commEv+0x14>
		uint16_t addr_B2 = read_num();

	} else {
		print(PSTR("comm: undefined command\n"));
     646:	8e ec       	ldi	r24, 0xCE	; 206
     648:	90 e0       	ldi	r25, 0x00	; 0
     64a:	9f 93       	push	r25
     64c:	8f 93       	push	r24
     64e:	cf 93       	push	r28
     650:	df 93       	push	r29
     652:	0e 94 34 02 	call	0x468	; 0x468 <_ZN4UART5printEPKcz>
     656:	0f 90       	pop	r0
     658:	0f 90       	pop	r0
     65a:	0f 90       	pop	r0
     65c:	0f 90       	pop	r0
	}
	this->clear_buff_rx();
     65e:	8d 2f       	mov	r24, r29
     660:	9c 2f       	mov	r25, r28
}
     662:	df 91       	pop	r29
     664:	cf 91       	pop	r28
		uint16_t addr_B2 = read_num();

	} else {
		print(PSTR("comm: undefined command\n"));
	}
	this->clear_buff_rx();
     666:	0c 94 65 02 	jmp	0x4ca	; 0x4ca <_ZN4UART13clear_buff_rxEv>

0000066a <_ZN4UART4readEv>:
		return 0xFFFF;
	}
}

void UART::read(void)
{
     66a:	0f 93       	push	r16
     66c:	1f 93       	push	r17
     66e:	cf 93       	push	r28
     670:	df 93       	push	r29
     672:	ec 01       	movw	r28, r24
	if (Serial.available() > 0) {
     674:	85 e5       	ldi	r24, 0x55	; 85
     676:	93 e0       	ldi	r25, 0x03	; 3
     678:	0e 94 86 0a 	call	0x150c	; 0x150c <_ZN14HardwareSerial9availableEv>
     67c:	18 16       	cp	r1, r24
     67e:	19 06       	cpc	r1, r25
     680:	0c f0       	brlt	.+2      	; 0x684 <_ZN4UART4readEv+0x1a>
     682:	42 c0       	rjmp	.+132    	; 0x708 <_ZN4UART4readEv+0x9e>
		uint8_t data = Serial.read();
     684:	85 e5       	ldi	r24, 0x55	; 85
     686:	93 e0       	ldi	r25, 0x03	; 3
     688:	0e 94 a0 0a 	call	0x1540	; 0x1540 <_ZN14HardwareSerial4readEv>
		if ((data != 13) && (data != 10)) {
     68c:	8d 30       	cpi	r24, 0x0D	; 13
     68e:	e1 f1       	breq	.+120    	; 0x708 <_ZN4UART4readEv+0x9e>
     690:	8a 30       	cpi	r24, 0x0A	; 10
     692:	19 f1       	breq	.+70     	; 0x6da <_ZN4UART4readEv+0x70>
			this->buff_rx[this->cnt_rx_save] = data;
     694:	8e 01       	movw	r16, r28
     696:	00 5c       	subi	r16, 0xC0	; 192
     698:	1f 4f       	sbci	r17, 0xFF	; 255
     69a:	f8 01       	movw	r30, r16
     69c:	90 81       	ld	r25, Z
     69e:	fe 01       	movw	r30, r28
     6a0:	e9 0f       	add	r30, r25
     6a2:	f1 1d       	adc	r31, r1
     6a4:	80 83       	st	Z, r24
			this->cnt_rx_save++;
     6a6:	81 e0       	ldi	r24, 0x01	; 1
     6a8:	89 0f       	add	r24, r25
     6aa:	f8 01       	movw	r30, r16
     6ac:	80 83       	st	Z, r24
			if (this->cnt_rx_save == UART_BUF_RX_MASK) {
     6ae:	8f 33       	cpi	r24, 0x3F	; 63
     6b0:	79 f4       	brne	.+30     	; 0x6d0 <_ZN4UART4readEv+0x66>
				print(PSTR("comm: buffer overflow\n"));
     6b2:	81 ef       	ldi	r24, 0xF1	; 241
     6b4:	90 e0       	ldi	r25, 0x00	; 0
     6b6:	9f 93       	push	r25
     6b8:	8f 93       	push	r24
     6ba:	df 93       	push	r29
     6bc:	cf 93       	push	r28
     6be:	0e 94 34 02 	call	0x468	; 0x468 <_ZN4UART5printEPKcz>
				this->clear_buff_rx();
     6c2:	ce 01       	movw	r24, r28
     6c4:	0e 94 65 02 	call	0x4ca	; 0x4ca <_ZN4UART13clear_buff_rxEv>
     6c8:	0f 90       	pop	r0
     6ca:	0f 90       	pop	r0
     6cc:	0f 90       	pop	r0
     6ce:	0f 90       	pop	r0
			}
			this->cnt_rx_save &= UART_BUF_RX_MASK;
     6d0:	f8 01       	movw	r30, r16
     6d2:	80 81       	ld	r24, Z
     6d4:	8f 73       	andi	r24, 0x3F	; 63
     6d6:	80 83       	st	Z, r24
     6d8:	17 c0       	rjmp	.+46     	; 0x708 <_ZN4UART4readEv+0x9e>
			} else if (data == 10) {
			print(PSTR("comm: %s\n"), this->buff_rx);
     6da:	df 93       	push	r29
     6dc:	cf 93       	push	r28
     6de:	87 ee       	ldi	r24, 0xE7	; 231
     6e0:	90 e0       	ldi	r25, 0x00	; 0
     6e2:	9f 93       	push	r25
     6e4:	8f 93       	push	r24
     6e6:	df 93       	push	r29
     6e8:	cf 93       	push	r28
     6ea:	0e 94 34 02 	call	0x468	; 0x468 <_ZN4UART5printEPKcz>
			read_comm();
     6ee:	0f 90       	pop	r0
     6f0:	0f 90       	pop	r0
     6f2:	0f 90       	pop	r0
     6f4:	0f 90       	pop	r0
     6f6:	0f 90       	pop	r0
     6f8:	0f 90       	pop	r0
     6fa:	ce 01       	movw	r24, r28
		}
	}
}
     6fc:	df 91       	pop	r29
     6fe:	cf 91       	pop	r28
     700:	1f 91       	pop	r17
     702:	0f 91       	pop	r16
				this->clear_buff_rx();
			}
			this->cnt_rx_save &= UART_BUF_RX_MASK;
			} else if (data == 10) {
			print(PSTR("comm: %s\n"), this->buff_rx);
			read_comm();
     704:	0c 94 0c 03 	jmp	0x618	; 0x618 <_ZN4UART9read_commEv>
		}
	}
}
     708:	df 91       	pop	r29
     70a:	cf 91       	pop	r28
     70c:	1f 91       	pop	r17
     70e:	0f 91       	pop	r16
     710:	08 95       	ret

00000712 <_ZN12LocoNetClass8setTxPinEh>:
		lnMsg* m = (lnMsg *)&(LnBuffer.Buf[ LnBuffer.ReadIndex ]);
		return getLnMsgSize(m);
  } 
  else
		return 0;
}
     712:	cf 93       	push	r28
     714:	c6 2f       	mov	r28, r22
     716:	61 e0       	ldi	r22, 0x01	; 1
     718:	8c 2f       	mov	r24, r28
     71a:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <pinMode>
     71e:	6c 2f       	mov	r22, r28
     720:	70 e0       	ldi	r23, 0x00	; 0
     722:	fb 01       	movw	r30, r22
     724:	ee 5c       	subi	r30, 0xCE	; 206
     726:	fe 4f       	sbci	r31, 0xFE	; 254
     728:	24 91       	lpm	r18, Z
     72a:	fb 01       	movw	r30, r22
     72c:	ea 5b       	subi	r30, 0xBA	; 186
     72e:	fe 4f       	sbci	r31, 0xFE	; 254
     730:	e4 91       	lpm	r30, Z
     732:	f0 e0       	ldi	r31, 0x00	; 0
     734:	ee 0f       	add	r30, r30
     736:	ff 1f       	adc	r31, r31
     738:	e6 5a       	subi	r30, 0xA6	; 166
     73a:	fe 4f       	sbci	r31, 0xFE	; 254
     73c:	45 91       	lpm	r20, Z+
     73e:	54 91       	lpm	r21, Z
     740:	60 e0       	ldi	r22, 0x00	; 0
     742:	91 e0       	ldi	r25, 0x01	; 1
     744:	81 e0       	ldi	r24, 0x01	; 1
     746:	92 17       	cp	r25, r18
     748:	41 f0       	breq	.+16     	; 0x75a <_ZN12LocoNetClass8setTxPinEh+0x48>
     74a:	6f 5f       	subi	r22, 0xFF	; 255
     74c:	98 2f       	mov	r25, r24
     74e:	06 2e       	mov	r0, r22
     750:	01 c0       	rjmp	.+2      	; 0x754 <_ZN12LocoNetClass8setTxPinEh+0x42>
     752:	99 0f       	add	r25, r25
     754:	0a 94       	dec	r0
     756:	ea f7       	brpl	.-6      	; 0x752 <_ZN12LocoNetClass8setTxPinEh+0x40>
     758:	f6 cf       	rjmp	.-20     	; 0x746 <_ZN12LocoNetClass8setTxPinEh+0x34>
     75a:	ca 01       	movw	r24, r20
     75c:	cf 91       	pop	r28
     75e:	0c 94 23 05 	jmp	0xa46	; 0xa46 <_Z15setTxPortAndPinPVhh>

00000762 <_ZN12LocoNetClass4initEh>:
     762:	1f 93       	push	r17
     764:	cf 93       	push	r28
     766:	df 93       	push	r29
     768:	ec 01       	movw	r28, r24
     76a:	16 2f       	mov	r17, r22
     76c:	0e 94 09 04 	call	0x812	; 0x812 <initLnBuf>
     770:	61 2f       	mov	r22, r17
     772:	ce 01       	movw	r24, r28
     774:	0e 94 89 03 	call	0x712	; 0x712 <_ZN12LocoNetClass8setTxPinEh>
     778:	ce 01       	movw	r24, r28
     77a:	df 91       	pop	r29
     77c:	cf 91       	pop	r28
     77e:	1f 91       	pop	r17
     780:	0c 94 ab 06 	jmp	0xd56	; 0xd56 <_Z19initLocoNetHardwareP5LnBuf>

00000784 <_ZN12LocoNetClass9availableEv>:
     784:	dc 01       	movw	r26, r24
     786:	a6 50       	subi	r26, 0x06	; 6
     788:	bf 4f       	sbci	r27, 0xFF	; 255
     78a:	fc 01       	movw	r30, r24
     78c:	e5 50       	subi	r30, 0x05	; 5
     78e:	ff 4f       	sbci	r31, 0xFF	; 255
     790:	81 e0       	ldi	r24, 0x01	; 1
     792:	2c 91       	ld	r18, X
     794:	90 81       	ld	r25, Z
     796:	29 13       	cpse	r18, r25
     798:	01 c0       	rjmp	.+2      	; 0x79c <_ZN12LocoNetClass9availableEv+0x18>
     79a:	80 e0       	ldi	r24, 0x00	; 0
     79c:	08 95       	ret

0000079e <_ZN12LocoNetClass7receiveEv>:

lnMsg* LocoNetClass::receive(void)
{
  return recvLnMsg(&LnBuffer);
     79e:	0c 94 12 04 	jmp	0x824	; 0x824 <recvLnMsg>

000007a2 <_ZN12LocoNetClass4sendEP5lnMsgh>:
    LN_UNKNOWN -      Indicates an abnormal exit condition for the send attempt.
                        In this case, it is recommended to make another send 
                        attempt.
*/
LN_STATUS LocoNetClass::send(lnMsg *pPacket, uint8_t ucPrioDelay)
{
     7a2:	cf 92       	push	r12
     7a4:	df 92       	push	r13
     7a6:	ff 92       	push	r15
     7a8:	0f 93       	push	r16
     7aa:	1f 93       	push	r17
     7ac:	cf 93       	push	r28
     7ae:	df 93       	push	r29
     7b0:	ec 01       	movw	r28, r24
     7b2:	6b 01       	movw	r12, r22
     7b4:	14 2f       	mov	r17, r20
     7b6:	09 e1       	ldi	r16, 0x19	; 25
     7b8:	ff 24       	eor	r15, r15
     7ba:	f3 94       	inc	r15

    // wait previous traffic and than prio delay and than try tx
    ucWaitForEnterBackoff = 1;  // don't want to abort do/while loop before
    do                          // we did not see the backoff state once
    {
      enReturn = sendLocoNetPacketTry(pPacket, ucPrioDelay);
     7bc:	61 2f       	mov	r22, r17
     7be:	c6 01       	movw	r24, r12
     7c0:	0e 94 d4 06 	call	0xda8	; 0xda8 <_Z20sendLocoNetPacketTryP5lnMsgh>

      if (enReturn == LN_DONE)  // success?
     7c4:	83 30       	cpi	r24, 0x03	; 3
     7c6:	c9 f0       	breq	.+50     	; 0x7fa <_ZN12LocoNetClass4sendEP5lnMsgh+0x58>
        return LN_DONE;

      if (enReturn == LN_PRIO_BACKOFF)
     7c8:	81 30       	cpi	r24, 0x01	; 1
     7ca:	11 f4       	brne	.+4      	; 0x7d0 <_ZN12LocoNetClass4sendEP5lnMsgh+0x2e>
        ucWaitForEnterBackoff = 0; // now entered backoff -> next state != LN_BACKOFF is worth incrementing the try counter
     7cc:	f1 2c       	mov	r15, r1
     7ce:	f6 cf       	rjmp	.-20     	; 0x7bc <_ZN12LocoNetClass4sendEP5lnMsgh+0x1a>
    }
    while ((enReturn == LN_CD_BACKOFF) ||                             // waiting CD backoff
    (enReturn == LN_PRIO_BACKOFF) ||                           // waiting master+prio backoff
     7d0:	82 30       	cpi	r24, 0x02	; 2
     7d2:	a0 f3       	brcs	.-24     	; 0x7bc <_ZN12LocoNetClass4sendEP5lnMsgh+0x1a>
     7d4:	82 30       	cpi	r24, 0x02	; 2
     7d6:	11 f4       	brne	.+4      	; 0x7dc <_ZN12LocoNetClass4sendEP5lnMsgh+0x3a>
    ((enReturn == LN_NETWORK_BUSY) && ucWaitForEnterBackoff)); // or within any traffic unfinished
     7d8:	f1 10       	cpse	r15, r1
     7da:	ee cf       	rjmp	.-36     	; 0x7b8 <_ZN12LocoNetClass4sendEP5lnMsgh+0x16>
    // failed -> next try going to higher prio = smaller prio delay
    if (ucPrioDelay > LN_BACKOFF_MIN)
     7dc:	1b 31       	cpi	r17, 0x1B	; 27
     7de:	08 f0       	brcs	.+2      	; 0x7e2 <_ZN12LocoNetClass4sendEP5lnMsgh+0x40>
      ucPrioDelay--;
     7e0:	11 50       	subi	r17, 0x01	; 1
     7e2:	01 50       	subi	r16, 0x01	; 1
{
  unsigned char ucTry;
  LN_STATUS enReturn;
  unsigned char ucWaitForEnterBackoff;

  for (ucTry = 0; ucTry < LN_TX_RETRIES_MAX; ucTry++)
     7e4:	49 f7       	brne	.-46     	; 0x7b8 <_ZN12LocoNetClass4sendEP5lnMsgh+0x16>
    ((enReturn == LN_NETWORK_BUSY) && ucWaitForEnterBackoff)); // or within any traffic unfinished
    // failed -> next try going to higher prio = smaller prio delay
    if (ucPrioDelay > LN_BACKOFF_MIN)
      ucPrioDelay--;
  }
  LnBuffer.Stats.TxErrors++ ;
     7e6:	fe 01       	movw	r30, r28
     7e8:	eb 5f       	subi	r30, 0xFB	; 251
     7ea:	fe 4f       	sbci	r31, 0xFE	; 254
     7ec:	80 81       	ld	r24, Z
     7ee:	91 81       	ldd	r25, Z+1	; 0x01
     7f0:	01 96       	adiw	r24, 0x01	; 1
     7f2:	91 83       	std	Z+1, r25	; 0x01
     7f4:	80 83       	st	Z, r24
  return LN_RETRY_ERROR;
     7f6:	86 e0       	ldi	r24, 0x06	; 6
     7f8:	01 c0       	rjmp	.+2      	; 0x7fc <_ZN12LocoNetClass4sendEP5lnMsgh+0x5a>
    do                          // we did not see the backoff state once
    {
      enReturn = sendLocoNetPacketTry(pPacket, ucPrioDelay);

      if (enReturn == LN_DONE)  // success?
        return LN_DONE;
     7fa:	83 e0       	ldi	r24, 0x03	; 3
    if (ucPrioDelay > LN_BACKOFF_MIN)
      ucPrioDelay--;
  }
  LnBuffer.Stats.TxErrors++ ;
  return LN_RETRY_ERROR;
}
     7fc:	df 91       	pop	r29
     7fe:	cf 91       	pop	r28
     800:	1f 91       	pop	r17
     802:	0f 91       	pop	r16
     804:	ff 90       	pop	r15
     806:	df 90       	pop	r13
     808:	cf 90       	pop	r12
     80a:	08 95       	ret

0000080c <_ZN12LocoNetClass4sendEP5lnMsg>:
                        In this case, it is recommended to make another send 
                        attempt.
*/
LN_STATUS LocoNetClass::send(lnMsg *pPacket)
{
  return send(pPacket, LN_BACKOFF_INITIAL);
     80c:	4e e2       	ldi	r20, 0x2E	; 46
     80e:	0c 94 d1 03 	jmp	0x7a2	; 0x7a2 <_ZN12LocoNetClass4sendEP5lnMsgh>

00000812 <initLnBuf>:
}

LnBufStats *getLnBufStats( LnBuf *Buffer )
{
  return &(Buffer->Stats) ;
}
     812:	29 e0       	ldi	r18, 0x09	; 9
     814:	31 e0       	ldi	r19, 0x01	; 1
     816:	fc 01       	movw	r30, r24
     818:	a9 01       	movw	r20, r18
     81a:	11 92       	st	Z+, r1
     81c:	41 50       	subi	r20, 0x01	; 1
     81e:	50 40       	sbci	r21, 0x00	; 0
     820:	e1 f7       	brne	.-8      	; 0x81a <initLnBuf+0x8>
     822:	08 95       	ret

00000824 <recvLnMsg>:
     824:	2f 92       	push	r2
     826:	3f 92       	push	r3
     828:	4f 92       	push	r4
     82a:	5f 92       	push	r5
     82c:	6f 92       	push	r6
     82e:	7f 92       	push	r7
     830:	8f 92       	push	r8
     832:	9f 92       	push	r9
     834:	af 92       	push	r10
     836:	bf 92       	push	r11
     838:	cf 92       	push	r12
     83a:	df 92       	push	r13
     83c:	ef 92       	push	r14
     83e:	ff 92       	push	r15
     840:	0f 93       	push	r16
     842:	1f 93       	push	r17
     844:	cf 93       	push	r28
     846:	df 93       	push	r29
     848:	00 d0       	rcall	.+0      	; 0x84a <recvLnMsg+0x26>
     84a:	00 d0       	rcall	.+0      	; 0x84c <recvLnMsg+0x28>
     84c:	cd b7       	in	r28, 0x3d	; 61
     84e:	de b7       	in	r29, 0x3e	; 62
     850:	9c 83       	std	Y+4, r25	; 0x04
     852:	8b 83       	std	Y+3, r24	; 0x03
     854:	7c 01       	movw	r14, r24
     856:	8b ef       	ldi	r24, 0xFB	; 251
     858:	e8 0e       	add	r14, r24
     85a:	f1 1c       	adc	r15, r1
     85c:	6b 80       	ldd	r6, Y+3	; 0x03
     85e:	7c 80       	ldd	r7, Y+4	; 0x04
     860:	9a ef       	ldi	r25, 0xFA	; 250
     862:	69 0e       	add	r6, r25
     864:	71 1c       	adc	r7, r1
     866:	0b 81       	ldd	r16, Y+3	; 0x03
     868:	1c 81       	ldd	r17, Y+4	; 0x04
     86a:	04 50       	subi	r16, 0x04	; 4
     86c:	1f 4f       	sbci	r17, 0xFF	; 255
     86e:	eb 81       	ldd	r30, Y+3	; 0x03
     870:	fc 81       	ldd	r31, Y+4	; 0x04
     872:	e3 50       	subi	r30, 0x03	; 3
     874:	ff 4f       	sbci	r31, 0xFF	; 255
     876:	6f 01       	movw	r12, r30
     878:	8b 81       	ldd	r24, Y+3	; 0x03
     87a:	9c 81       	ldd	r25, Y+4	; 0x04
     87c:	82 50       	subi	r24, 0x02	; 2
     87e:	9f 4f       	sbci	r25, 0xFF	; 255
     880:	4c 01       	movw	r8, r24
     882:	8a ef       	ldi	r24, 0xFA	; 250
     884:	28 2e       	mov	r2, r24
     886:	ab 80       	ldd	r10, Y+3	; 0x03
     888:	bc 80       	ldd	r11, Y+4	; 0x04
     88a:	91 e0       	ldi	r25, 0x01	; 1
     88c:	a9 0e       	add	r10, r25
     88e:	b9 1e       	adc	r11, r25
     890:	eb 81       	ldd	r30, Y+3	; 0x03
     892:	fc 81       	ldd	r31, Y+4	; 0x04
     894:	e1 50       	subi	r30, 0x01	; 1
     896:	ff 4f       	sbci	r31, 0xFF	; 255
     898:	fa 83       	std	Y+2, r31	; 0x02
     89a:	e9 83       	std	Y+1, r30	; 0x01
     89c:	f7 01       	movw	r30, r14
     89e:	80 81       	ld	r24, Z
     8a0:	f3 01       	movw	r30, r6
     8a2:	90 81       	ld	r25, Z
     8a4:	89 17       	cp	r24, r25
     8a6:	09 f4       	brne	.+2      	; 0x8aa <recvLnMsg+0x86>
     8a8:	9d c0       	rjmp	.+314    	; 0x9e4 <__stack+0xe5>
     8aa:	eb 81       	ldd	r30, Y+3	; 0x03
     8ac:	fc 81       	ldd	r31, Y+4	; 0x04
     8ae:	e8 0f       	add	r30, r24
     8b0:	f1 1d       	adc	r31, r1
     8b2:	30 80       	ld	r3, Z
     8b4:	37 fe       	sbrs	r3, 7
     8b6:	1e c0       	rjmp	.+60     	; 0x8f4 <recvLnMsg+0xd0>
     8b8:	f8 01       	movw	r30, r16
     8ba:	90 81       	ld	r25, Z
     8bc:	89 17       	cp	r24, r25
     8be:	39 f0       	breq	.+14     	; 0x8ce <recvLnMsg+0xaa>
     8c0:	f5 01       	movw	r30, r10
     8c2:	20 81       	ld	r18, Z
     8c4:	31 81       	ldd	r19, Z+1	; 0x01
     8c6:	2f 5f       	subi	r18, 0xFF	; 255
     8c8:	3f 4f       	sbci	r19, 0xFF	; 255
     8ca:	31 83       	std	Z+1, r19	; 0x01
     8cc:	20 83       	st	Z, r18
     8ce:	f8 01       	movw	r30, r16
     8d0:	80 83       	st	Z, r24
     8d2:	8f ef       	ldi	r24, 0xFF	; 255
     8d4:	f6 01       	movw	r30, r12
     8d6:	80 83       	st	Z, r24
     8d8:	83 2d       	mov	r24, r3
     8da:	80 76       	andi	r24, 0x60	; 96
     8dc:	80 36       	cpi	r24, 0x60	; 96
     8de:	21 f0       	breq	.+8      	; 0x8e8 <recvLnMsg+0xc4>
     8e0:	82 95       	swap	r24
     8e2:	8f 70       	andi	r24, 0x0F	; 15
     8e4:	8e 5f       	subi	r24, 0xFE	; 254
     8e6:	01 c0       	rjmp	.+2      	; 0x8ea <recvLnMsg+0xc6>
     8e8:	80 e0       	ldi	r24, 0x00	; 0
     8ea:	f4 01       	movw	r30, r8
     8ec:	80 83       	st	Z, r24
     8ee:	81 11       	cpse	r24, r1
     8f0:	06 c0       	rjmp	.+12     	; 0x8fe <recvLnMsg+0xda>
     8f2:	42 c0       	rjmp	.+132    	; 0x978 <__stack+0x79>
     8f4:	f4 01       	movw	r30, r8
     8f6:	80 81       	ld	r24, Z
     8f8:	81 11       	cpse	r24, r1
     8fa:	3e c0       	rjmp	.+124    	; 0x978 <__stack+0x79>
     8fc:	30 82       	st	Z, r3
     8fe:	f8 01       	movw	r30, r16
     900:	20 81       	ld	r18, Z
     902:	f4 01       	movw	r30, r8
     904:	30 81       	ld	r19, Z
     906:	82 2f       	mov	r24, r18
     908:	90 e0       	ldi	r25, 0x00	; 0
     90a:	83 0f       	add	r24, r19
     90c:	91 1d       	adc	r25, r1
     90e:	8b 3f       	cpi	r24, 0xFB	; 251
     910:	91 05       	cpc	r25, r1
     912:	94 f1       	brlt	.+100    	; 0x978 <__stack+0x79>
     914:	42 2c       	mov	r4, r2
     916:	42 1a       	sub	r4, r18
     918:	f8 94       	cli
     91a:	f3 01       	movw	r30, r6
     91c:	40 81       	ld	r20, Z
     91e:	f8 01       	movw	r30, r16
     920:	80 81       	ld	r24, Z
     922:	84 17       	cp	r24, r20
     924:	08 f0       	brcs	.+2      	; 0x928 <__stack+0x29>
     926:	61 c0       	rjmp	.+194    	; 0x9ea <__stack+0xeb>
     928:	f4 2f       	mov	r31, r20
     92a:	f8 1b       	sub	r31, r24
     92c:	8f 2f       	mov	r24, r31
     92e:	f3 01       	movw	r30, r6
     930:	80 83       	st	Z, r24
     932:	78 94       	sei
     934:	f8 01       	movw	r30, r16
     936:	80 81       	ld	r24, Z
     938:	48 17       	cp	r20, r24
     93a:	08 f0       	brcs	.+2      	; 0x93e <__stack+0x3f>
     93c:	59 c0       	rjmp	.+178    	; 0x9f0 <__stack+0xf1>
     93e:	51 2c       	mov	r5, r1
     940:	50 e0       	ldi	r21, 0x00	; 0
     942:	6b 81       	ldd	r22, Y+3	; 0x03
     944:	7c 81       	ldd	r23, Y+4	; 0x04
     946:	cb 01       	movw	r24, r22
     948:	84 0d       	add	r24, r4
     94a:	95 1d       	adc	r25, r5
     94c:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <memmove>
     950:	f8 01       	movw	r30, r16
     952:	80 81       	ld	r24, Z
     954:	6b 81       	ldd	r22, Y+3	; 0x03
     956:	7c 81       	ldd	r23, Y+4	; 0x04
     958:	68 0f       	add	r22, r24
     95a:	71 1d       	adc	r23, r1
     95c:	a2 01       	movw	r20, r4
     95e:	8b 81       	ldd	r24, Y+3	; 0x03
     960:	9c 81       	ldd	r25, Y+4	; 0x04
     962:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <memmove>
     966:	f7 01       	movw	r30, r14
     968:	80 81       	ld	r24, Z
     96a:	f8 01       	movw	r30, r16
     96c:	90 81       	ld	r25, Z
     96e:	89 1b       	sub	r24, r25
     970:	f7 01       	movw	r30, r14
     972:	80 83       	st	Z, r24
     974:	f8 01       	movw	r30, r16
     976:	10 82       	st	Z, r1
     978:	f7 01       	movw	r30, r14
     97a:	80 81       	ld	r24, Z
     97c:	8f 5f       	subi	r24, 0xFF	; 255
     97e:	80 83       	st	Z, r24
     980:	f8 01       	movw	r30, r16
     982:	90 81       	ld	r25, Z
     984:	28 2f       	mov	r18, r24
     986:	29 1b       	sub	r18, r25
     988:	8a 3f       	cpi	r24, 0xFA	; 250
     98a:	10 f0       	brcs	.+4      	; 0x990 <__stack+0x91>
     98c:	f7 01       	movw	r30, r14
     98e:	10 82       	st	Z, r1
     990:	f4 01       	movw	r30, r8
     992:	80 81       	ld	r24, Z
     994:	28 17       	cp	r18, r24
     996:	29 f0       	breq	.+10     	; 0x9a2 <__stack+0xa3>
     998:	f6 01       	movw	r30, r12
     99a:	80 81       	ld	r24, Z
     99c:	83 25       	eor	r24, r3
     99e:	80 83       	st	Z, r24
     9a0:	7d cf       	rjmp	.-262    	; 0x89c <recvLnMsg+0x78>
     9a2:	f6 01       	movw	r30, r12
     9a4:	80 81       	ld	r24, Z
     9a6:	38 12       	cpse	r3, r24
     9a8:	0c c0       	rjmp	.+24     	; 0x9c2 <__stack+0xc3>
     9aa:	2b 81       	ldd	r18, Y+3	; 0x03
     9ac:	3c 81       	ldd	r19, Y+4	; 0x04
     9ae:	29 0f       	add	r18, r25
     9b0:	31 1d       	adc	r19, r1
     9b2:	e9 81       	ldd	r30, Y+1	; 0x01
     9b4:	fa 81       	ldd	r31, Y+2	; 0x02
     9b6:	80 81       	ld	r24, Z
     9b8:	91 81       	ldd	r25, Z+1	; 0x01
     9ba:	01 96       	adiw	r24, 0x01	; 1
     9bc:	91 83       	std	Z+1, r25	; 0x01
     9be:	80 83       	st	Z, r24
     9c0:	08 c0       	rjmp	.+16     	; 0x9d2 <__stack+0xd3>
     9c2:	f5 01       	movw	r30, r10
     9c4:	80 81       	ld	r24, Z
     9c6:	91 81       	ldd	r25, Z+1	; 0x01
     9c8:	01 96       	adiw	r24, 0x01	; 1
     9ca:	91 83       	std	Z+1, r25	; 0x01
     9cc:	80 83       	st	Z, r24
     9ce:	20 e0       	ldi	r18, 0x00	; 0
     9d0:	30 e0       	ldi	r19, 0x00	; 0
     9d2:	f7 01       	movw	r30, r14
     9d4:	80 81       	ld	r24, Z
     9d6:	f8 01       	movw	r30, r16
     9d8:	80 83       	st	Z, r24
     9da:	21 15       	cp	r18, r1
     9dc:	31 05       	cpc	r19, r1
     9de:	e1 f2       	breq	.-72     	; 0x998 <__stack+0x99>
     9e0:	c9 01       	movw	r24, r18
     9e2:	0d c0       	rjmp	.+26     	; 0x9fe <__stack+0xff>
     9e4:	80 e0       	ldi	r24, 0x00	; 0
     9e6:	90 e0       	ldi	r25, 0x00	; 0
     9e8:	0a c0       	rjmp	.+20     	; 0x9fe <__stack+0xff>
     9ea:	84 2d       	mov	r24, r4
     9ec:	84 0f       	add	r24, r20
     9ee:	9f cf       	rjmp	.-194    	; 0x92e <__stack+0x2f>
     9f0:	48 1b       	sub	r20, r24
     9f2:	50 e0       	ldi	r21, 0x00	; 0
     9f4:	6b 81       	ldd	r22, Y+3	; 0x03
     9f6:	7c 81       	ldd	r23, Y+4	; 0x04
     9f8:	68 0f       	add	r22, r24
     9fa:	71 1d       	adc	r23, r1
     9fc:	b0 cf       	rjmp	.-160    	; 0x95e <__stack+0x5f>
     9fe:	0f 90       	pop	r0
     a00:	0f 90       	pop	r0
     a02:	0f 90       	pop	r0
     a04:	0f 90       	pop	r0
     a06:	df 91       	pop	r29
     a08:	cf 91       	pop	r28
     a0a:	1f 91       	pop	r17
     a0c:	0f 91       	pop	r16
     a0e:	ff 90       	pop	r15
     a10:	ef 90       	pop	r14
     a12:	df 90       	pop	r13
     a14:	cf 90       	pop	r12
     a16:	bf 90       	pop	r11
     a18:	af 90       	pop	r10
     a1a:	9f 90       	pop	r9
     a1c:	8f 90       	pop	r8
     a1e:	7f 90       	pop	r7
     a20:	6f 90       	pop	r6
     a22:	5f 90       	pop	r5
     a24:	4f 90       	pop	r4
     a26:	3f 90       	pop	r3
     a28:	2f 90       	pop	r2
     a2a:	08 95       	ret

00000a2c <getLnMsgSize>:

uint8_t getLnMsgSize( volatile lnMsg * Msg )
{
     a2c:	fc 01       	movw	r30, r24
  return ( ( Msg->sz.command & (uint8_t)0x60 ) == (uint8_t)0x60 ) ? Msg->sz.mesg_size : ( ( Msg->sz.command & (uint8_t)0x60 ) >> (uint8_t)4 ) + 2 ;
     a2e:	80 81       	ld	r24, Z
     a30:	80 76       	andi	r24, 0x60	; 96
     a32:	80 36       	cpi	r24, 0x60	; 96
     a34:	11 f4       	brne	.+4      	; 0xa3a <getLnMsgSize+0xe>
     a36:	81 81       	ldd	r24, Z+1	; 0x01
     a38:	08 95       	ret
     a3a:	80 81       	ld	r24, Z
     a3c:	80 76       	andi	r24, 0x60	; 96
     a3e:	82 95       	swap	r24
     a40:	8f 70       	andi	r24, 0x0F	; 15
     a42:	8e 5f       	subi	r24, 0xFE	; 254
}
     a44:	08 95       	ret

00000a46 <_Z15setTxPortAndPinPVhh>:
#define LN_TX_PORT *txPort
#define LN_TX_BIT txPin

void setTxPortAndPin(volatile uint8_t *newTxPort, uint8_t newTxPin)
{
  txPort = newTxPort;
     a46:	90 93 43 02 	sts	0x0243, r25	; 0x800243 <txPort+0x1>
     a4a:	80 93 42 02 	sts	0x0242, r24	; 0x800242 <txPort>
  txPin = newTxPin;
     a4e:	60 93 41 02 	sts	0x0241, r22	; 0x800241 <txPin>
     a52:	08 95       	ret

00000a54 <__vector_10>:
 * incoming data.
 *
 **************************************************************************/

ISR(LN_SB_SIGNAL)
{
     a54:	1f 92       	push	r1
     a56:	0f 92       	push	r0
     a58:	0f b6       	in	r0, 0x3f	; 63
     a5a:	0f 92       	push	r0
     a5c:	11 24       	eor	r1, r1
     a5e:	8f 93       	push	r24
     a60:	9f 93       	push	r25
     a62:	ef 93       	push	r30
     a64:	ff 93       	push	r31
  // Disable the Input Comparator Interrupt
  cbi( LN_SB_INT_ENABLE_REG, LN_SB_INT_ENABLE_BIT );     
     a66:	ef e6       	ldi	r30, 0x6F	; 111
     a68:	f0 e0       	ldi	r31, 0x00	; 0
     a6a:	80 81       	ld	r24, Z
     a6c:	8f 7d       	andi	r24, 0xDF	; 223
     a6e:	80 83       	st	Z, r24

  // Get the Current Timer1 Count and Add the offset for the Compare target
  lnCompareTarget = LN_TMR_INP_CAPT_REG + LN_TIMER_RX_START_PERIOD ;
     a70:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
     a74:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
     a78:	80 53       	subi	r24, 0x30	; 48
     a7a:	9d 4f       	sbci	r25, 0xFD	; 253
     a7c:	90 93 4c 02 	sts	0x024C, r25	; 0x80024c <lnCompareTarget+0x1>
     a80:	80 93 4b 02 	sts	0x024B, r24	; 0x80024b <lnCompareTarget>
  LN_TMR_OUTP_CAPT_REG = lnCompareTarget ;
     a84:	80 91 4b 02 	lds	r24, 0x024B	; 0x80024b <lnCompareTarget>
     a88:	90 91 4c 02 	lds	r25, 0x024C	; 0x80024c <lnCompareTarget+0x1>
     a8c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     a90:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>

  // Clear the current Compare interrupt status bit and enable the Compare interrupt
  sbi(LN_TMR_INT_STATUS_REG, LN_TMR_INT_STATUS_BIT) ;
     a94:	b1 9a       	sbi	0x16, 1	; 22
  sbi(LN_TMR_INT_ENABLE_REG, LN_TMR_INT_ENABLE_BIT) ; 
     a96:	80 81       	ld	r24, Z
     a98:	82 60       	ori	r24, 0x02	; 2
     a9a:	80 83       	st	Z, r24

  // Set the State to indicate that we have begun to Receive
  lnState = LN_ST_RX ;
     a9c:	84 e0       	ldi	r24, 0x04	; 4
     a9e:	80 93 4f 02 	sts	0x024F, r24	; 0x80024f <lnState>

  // Reset the bit counter so that on first increment it is on 0
  lnBitCount = 0;
     aa2:	10 92 4e 02 	sts	0x024E, r1	; 0x80024e <lnBitCount>
}
     aa6:	ff 91       	pop	r31
     aa8:	ef 91       	pop	r30
     aaa:	9f 91       	pop	r25
     aac:	8f 91       	pop	r24
     aae:	0f 90       	pop	r0
     ab0:	0f be       	out	0x3f, r0	; 63
     ab2:	0f 90       	pop	r0
     ab4:	1f 90       	pop	r1
     ab6:	18 95       	reti

00000ab8 <__vector_11>:
 * transmitting, this routine shifts the bits and sends it. When receiving,
 * it samples the bit and shifts it into the buffer.
 *
 **************************************************************************/
ISR(LN_TMR_SIGNAL)     /* signal handler for timer0 overflow */
{
     ab8:	1f 92       	push	r1
     aba:	0f 92       	push	r0
     abc:	0f b6       	in	r0, 0x3f	; 63
     abe:	0f 92       	push	r0
     ac0:	11 24       	eor	r1, r1
     ac2:	2f 93       	push	r18
     ac4:	3f 93       	push	r19
     ac6:	4f 93       	push	r20
     ac8:	8f 93       	push	r24
     aca:	9f 93       	push	r25
     acc:	af 93       	push	r26
     ace:	bf 93       	push	r27
     ad0:	ef 93       	push	r30
     ad2:	ff 93       	push	r31
  // Advance the Compare Target by a bit period
  lnCompareTarget += LN_TIMER_RX_RELOAD_PERIOD;
     ad4:	80 91 4b 02 	lds	r24, 0x024B	; 0x80024b <lnCompareTarget>
     ad8:	90 91 4c 02 	lds	r25, 0x024C	; 0x80024c <lnCompareTarget+0x1>
     adc:	80 52       	subi	r24, 0x20	; 32
     ade:	9e 4f       	sbci	r25, 0xFE	; 254
     ae0:	90 93 4c 02 	sts	0x024C, r25	; 0x80024c <lnCompareTarget+0x1>
     ae4:	80 93 4b 02 	sts	0x024B, r24	; 0x80024b <lnCompareTarget>
  LN_TMR_OUTP_CAPT_REG = lnCompareTarget;
     ae8:	80 91 4b 02 	lds	r24, 0x024B	; 0x80024b <lnCompareTarget>
     aec:	90 91 4c 02 	lds	r25, 0x024C	; 0x80024c <lnCompareTarget+0x1>
     af0:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     af4:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>

  lnBitCount++;                // Increment bit_counter
     af8:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <lnBitCount>
     afc:	8f 5f       	subi	r24, 0xFF	; 255
     afe:	80 93 4e 02 	sts	0x024E, r24	; 0x80024e <lnBitCount>

  if( lnState == LN_ST_RX ) {  // Are we in RX mode
     b02:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <lnState>
     b06:	84 30       	cpi	r24, 0x04	; 4
     b08:	e9 f5       	brne	.+122    	; 0xb84 <__vector_11+0xcc>
    if( lnBitCount < 9)  {   // Are we in the Stop Bits phase
     b0a:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <lnBitCount>
     b0e:	89 30       	cpi	r24, 0x09	; 9
     b10:	78 f4       	brcc	.+30     	; 0xb30 <__vector_11+0x78>
      lnCurrentByte >>= 1;
     b12:	80 91 4d 02 	lds	r24, 0x024D	; 0x80024d <lnCurrentByte>
     b16:	90 e0       	ldi	r25, 0x00	; 0
     b18:	95 95       	asr	r25
     b1a:	87 95       	ror	r24
     b1c:	80 93 4d 02 	sts	0x024D, r24	; 0x80024d <lnCurrentByte>
#ifdef LN_SW_UART_RX_INVERTED  
      if( bit_is_clear(LN_RX_PORT, LN_RX_BIT)) {
#else		
      if( bit_is_set(LN_RX_PORT, LN_RX_BIT)) {
     b20:	18 9b       	sbis	0x03, 0	; 3
     b22:	0b c1       	rjmp	.+534    	; 0xd3a <__vector_11+0x282>
#endif
        lnCurrentByte |= 0x80;
     b24:	80 91 4d 02 	lds	r24, 0x024D	; 0x80024d <lnCurrentByte>
     b28:	80 68       	ori	r24, 0x80	; 128
     b2a:	80 93 4d 02 	sts	0x024D, r24	; 0x80024d <lnCurrentByte>
     b2e:	05 c1       	rjmp	.+522    	; 0xd3a <__vector_11+0x282>
      return ;
    }

    // Clear the Start Bit Interrupt Status Flag and Enable ready to 
    // detect the next Start Bit
    sbi( LN_SB_INT_STATUS_REG, LN_SB_INT_STATUS_BIT ) ;
     b30:	b5 9a       	sbi	0x16, 5	; 22
    sbi( LN_SB_INT_ENABLE_REG, LN_SB_INT_ENABLE_BIT ) ;
     b32:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
     b36:	80 62       	ori	r24, 0x20	; 32
     b38:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
     b3c:	80 91 49 02 	lds	r24, 0x0249	; 0x800249 <lnRxBuffer>
     b40:	90 91 4a 02 	lds	r25, 0x024A	; 0x80024a <lnRxBuffer+0x1>

    // If the Stop bit is not Set then we have a Framing Error
#ifdef LN_SW_UART_RX_INVERTED  
    if( bit_is_set(LN_RX_PORT,LN_RX_BIT) ) {
#else
    if( bit_is_clear(LN_RX_PORT,LN_RX_BIT) ) {
     b44:	18 99       	sbic	0x03, 0	; 3
     b46:	09 c0       	rjmp	.+18     	; 0xb5a <__vector_11+0xa2>
#endif		
      // ERROR_LED_ON();
      lnRxBuffer->Stats.RxErrors++ ;
     b48:	fc 01       	movw	r30, r24
     b4a:	ef 5f       	subi	r30, 0xFF	; 255
     b4c:	fe 4f       	sbci	r31, 0xFE	; 254
     b4e:	80 81       	ld	r24, Z
     b50:	91 81       	ldd	r25, Z+1	; 0x01
     b52:	01 96       	adiw	r24, 0x01	; 1
     b54:	91 83       	std	Z+1, r25	; 0x01
     b56:	80 83       	st	Z, r24
     b58:	10 c0       	rjmp	.+32     	; 0xb7a <__vector_11+0xc2>
    } 
    else { // Put the received byte in the buffer
      addByteLnBuf( lnRxBuffer, lnCurrentByte ) ;
     b5a:	40 91 4d 02 	lds	r20, 0x024D	; 0x80024d <lnCurrentByte>
LnBufStats *getLnBufStats( LnBuf *Buffer ) ;
uint8_t getLnMsgSize( volatile lnMsg * newMsg ) ;

static inline void addByteLnBuf( LnBuf *Buffer, uint8_t newByte )
{
  Buffer->Buf[ Buffer->WriteIndex++ ] = newByte ;
     b5e:	fc 01       	movw	r30, r24
     b60:	e6 50       	subi	r30, 0x06	; 6
     b62:	ff 4f       	sbci	r31, 0xFF	; 255
     b64:	30 81       	ld	r19, Z
     b66:	21 e0       	ldi	r18, 0x01	; 1
     b68:	23 0f       	add	r18, r19
     b6a:	20 83       	st	Z, r18
     b6c:	dc 01       	movw	r26, r24
     b6e:	a3 0f       	add	r26, r19
     b70:	b1 1d       	adc	r27, r1
     b72:	4c 93       	st	X, r20
  if( Buffer->WriteIndex >= LN_BUF_SIZE )
     b74:	2a 3f       	cpi	r18, 0xFA	; 250
     b76:	08 f0       	brcs	.+2      	; 0xb7a <__vector_11+0xc2>
    Buffer->WriteIndex = 0 ;
     b78:	10 82       	st	Z, r1
    }
    lnBitCount = 0 ;
     b7a:	10 92 4e 02 	sts	0x024E, r1	; 0x80024e <lnBitCount>
    lnState = LN_ST_CD_BACKOFF ;
     b7e:	81 e0       	ldi	r24, 0x01	; 1
     b80:	80 93 4f 02 	sts	0x024F, r24	; 0x80024f <lnState>
  }

  if( lnState == LN_ST_TX ) {   // Are we in the TX State
     b84:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <lnState>
     b88:	83 30       	cpi	r24, 0x03	; 3
     b8a:	09 f0       	breq	.+2      	; 0xb8e <__vector_11+0xd6>
     b8c:	80 c0       	rjmp	.+256    	; 0xc8e <__vector_11+0x1d6>
    // To get to this point we have already begun the TX cycle so we need to 
    // first check for a Collision. 
    if ( IS_LN_COLLISION() ) {			 // Collision?
     b8e:	e0 91 42 02 	lds	r30, 0x0242	; 0x800242 <txPort>
     b92:	f0 91 43 02 	lds	r31, 0x0243	; 0x800243 <txPort+0x1>
     b96:	80 81       	ld	r24, Z
     b98:	20 91 41 02 	lds	r18, 0x0241	; 0x800241 <txPin>
     b9c:	33 b1       	in	r19, 0x03	; 3
     b9e:	90 e0       	ldi	r25, 0x00	; 0
     ba0:	02 2e       	mov	r0, r18
     ba2:	02 c0       	rjmp	.+4      	; 0xba8 <__vector_11+0xf0>
     ba4:	95 95       	asr	r25
     ba6:	87 95       	ror	r24
     ba8:	0a 94       	dec	r0
     baa:	e2 f7       	brpl	.-8      	; 0xba4 <__vector_11+0xec>
     bac:	83 27       	eor	r24, r19
     bae:	80 fd       	sbrc	r24, 0
     bb0:	04 c0       	rjmp	.+8      	; 0xbba <__vector_11+0x102>
      lnBitCount = 0 ;
     bb2:	10 92 4e 02 	sts	0x024E, r1	; 0x80024e <lnBitCount>
      lnState = LN_ST_TX_COLLISION ;
     bb6:	82 e0       	ldi	r24, 0x02	; 2
     bb8:	68 c0       	rjmp	.+208    	; 0xc8a <__vector_11+0x1d2>
      // ERROR_LED_ON();
    } 
    else if( lnBitCount < 9) {   			 // Send each Bit
     bba:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <lnBitCount>
     bbe:	89 30       	cpi	r24, 0x09	; 9
     bc0:	f0 f4       	brcc	.+60     	; 0xbfe <__vector_11+0x146>
      if( lnCurrentByte & 0x01 ) {
     bc2:	80 91 4d 02 	lds	r24, 0x024D	; 0x80024d <lnCurrentByte>
        LN_SW_UART_SET_TX_HIGH(LN_TX_PORT, LN_TX_BIT);
     bc6:	30 81       	ld	r19, Z
      lnBitCount = 0 ;
      lnState = LN_ST_TX_COLLISION ;
      // ERROR_LED_ON();
    } 
    else if( lnBitCount < 9) {   			 // Send each Bit
      if( lnCurrentByte & 0x01 ) {
     bc8:	80 ff       	sbrs	r24, 0
     bca:	09 c0       	rjmp	.+18     	; 0xbde <__vector_11+0x126>
        LN_SW_UART_SET_TX_HIGH(LN_TX_PORT, LN_TX_BIT);
     bcc:	81 e0       	ldi	r24, 0x01	; 1
     bce:	90 e0       	ldi	r25, 0x00	; 0
     bd0:	01 c0       	rjmp	.+2      	; 0xbd4 <__vector_11+0x11c>
     bd2:	88 0f       	add	r24, r24
     bd4:	2a 95       	dec	r18
     bd6:	ea f7       	brpl	.-6      	; 0xbd2 <__vector_11+0x11a>
     bd8:	80 95       	com	r24
     bda:	83 23       	and	r24, r19
     bdc:	07 c0       	rjmp	.+14     	; 0xbec <__vector_11+0x134>
      } 
      else {
        LN_SW_UART_SET_TX_LOW(LN_TX_PORT, LN_TX_BIT);
     bde:	81 e0       	ldi	r24, 0x01	; 1
     be0:	90 e0       	ldi	r25, 0x00	; 0
     be2:	01 c0       	rjmp	.+2      	; 0xbe6 <__vector_11+0x12e>
     be4:	88 0f       	add	r24, r24
     be6:	2a 95       	dec	r18
     be8:	ea f7       	brpl	.-6      	; 0xbe4 <__vector_11+0x12c>
     bea:	83 2b       	or	r24, r19
     bec:	80 83       	st	Z, r24
      }
      lnCurrentByte >>= 1;
     bee:	80 91 4d 02 	lds	r24, 0x024D	; 0x80024d <lnCurrentByte>
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	95 95       	asr	r25
     bf6:	87 95       	ror	r24
     bf8:	80 93 4d 02 	sts	0x024D, r24	; 0x80024d <lnCurrentByte>
     bfc:	48 c0       	rjmp	.+144    	; 0xc8e <__vector_11+0x1d6>
    } 
    else if( lnBitCount ==  9) {   		 // Generate stop-bit
     bfe:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <lnBitCount>
     c02:	89 30       	cpi	r24, 0x09	; 9
     c04:	59 f4       	brne	.+22     	; 0xc1c <__vector_11+0x164>
      LN_SW_UART_SET_TX_HIGH(LN_TX_PORT, LN_TX_BIT);
     c06:	30 81       	ld	r19, Z
     c08:	81 e0       	ldi	r24, 0x01	; 1
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	01 c0       	rjmp	.+2      	; 0xc10 <__vector_11+0x158>
     c0e:	88 0f       	add	r24, r24
     c10:	2a 95       	dec	r18
     c12:	ea f7       	brpl	.-6      	; 0xc0e <__vector_11+0x156>
     c14:	80 95       	com	r24
     c16:	83 23       	and	r24, r19
     c18:	80 83       	st	Z, r24
     c1a:	39 c0       	rjmp	.+114    	; 0xc8e <__vector_11+0x1d6>
    } 
    else if( ++lnTxIndex < lnTxLength ) {  // Any more bytes in buffer
     c1c:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <lnTxIndex>
     c20:	8f 5f       	subi	r24, 0xFF	; 255
     c22:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <lnTxIndex>
     c26:	90 91 45 02 	lds	r25, 0x0245	; 0x800245 <lnTxLength>
     c2a:	89 17       	cp	r24, r25
     c2c:	48 f5       	brcc	.+82     	; 0xc80 <__vector_11+0x1c8>
      // Setup for the next byte
      lnBitCount = 0 ;
     c2e:	10 92 4e 02 	sts	0x024E, r1	; 0x80024e <lnBitCount>
      lnCurrentByte = lnTxData->data[ lnTxIndex ] ;
     c32:	a0 91 47 02 	lds	r26, 0x0247	; 0x800247 <lnTxData>
     c36:	b0 91 48 02 	lds	r27, 0x0248	; 0x800248 <lnTxData+0x1>
     c3a:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <lnTxIndex>
     c3e:	a8 0f       	add	r26, r24
     c40:	b1 1d       	adc	r27, r1
     c42:	8c 91       	ld	r24, X
     c44:	80 93 4d 02 	sts	0x024D, r24	; 0x80024d <lnCurrentByte>

      // Begin the Start Bit
      LN_SW_UART_SET_TX_LOW(LN_TX_PORT, LN_TX_BIT);
     c48:	30 81       	ld	r19, Z
     c4a:	81 e0       	ldi	r24, 0x01	; 1
     c4c:	90 e0       	ldi	r25, 0x00	; 0
     c4e:	01 c0       	rjmp	.+2      	; 0xc52 <__vector_11+0x19a>
     c50:	88 0f       	add	r24, r24
     c52:	2a 95       	dec	r18
     c54:	ea f7       	brpl	.-6      	; 0xc50 <__vector_11+0x198>
     c56:	83 2b       	or	r24, r19
     c58:	80 83       	st	Z, r24

      // Get the Current Timer1 Count and Add the offset for the Compare target
      // added adjustment value for bugfix (Olaf Funke)
      lnCompareTarget = LN_TMR_COUNT_REG + LN_TIMER_TX_RELOAD_PERIOD - LN_TIMER_TX_RELOAD_ADJUST; 
     c5a:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     c5e:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     c62:	8a 58       	subi	r24, 0x8A	; 138
     c64:	9e 4f       	sbci	r25, 0xFE	; 254
     c66:	90 93 4c 02 	sts	0x024C, r25	; 0x80024c <lnCompareTarget+0x1>
     c6a:	80 93 4b 02 	sts	0x024B, r24	; 0x80024b <lnCompareTarget>
      LN_TMR_OUTP_CAPT_REG = lnCompareTarget ;
     c6e:	80 91 4b 02 	lds	r24, 0x024B	; 0x80024b <lnCompareTarget>
     c72:	90 91 4c 02 	lds	r25, 0x024C	; 0x80024c <lnCompareTarget+0x1>
     c76:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     c7a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
     c7e:	07 c0       	rjmp	.+14     	; 0xc8e <__vector_11+0x1d6>
    } 
    else {
      // Successfully Sent all bytes in the buffer
      // so set the Packet Status to Done
      lnTxSuccess = 1 ;
     c80:	81 e0       	ldi	r24, 0x01	; 1
     c82:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <lnTxSuccess>

      // Now copy the TX Packet into the RX Buffer
      //addMsgLnBuf( lnRxBuffer, lnTxData );

      // Begin CD Backoff state
      lnBitCount = 0 ;
     c86:	10 92 4e 02 	sts	0x024E, r1	; 0x80024e <lnBitCount>
      lnState = LN_ST_CD_BACKOFF ;     
     c8a:	80 93 4f 02 	sts	0x024F, r24	; 0x80024f <lnState>
    }
  }

  // Note we may have got here from a failed TX cycle, if so BitCount will be 0
  if( lnState == LN_ST_TX_COLLISION ) {
     c8e:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <lnState>
     c92:	82 30       	cpi	r24, 0x02	; 2
     c94:	d1 f5       	brne	.+116    	; 0xd0a <__vector_11+0x252>
    if( lnBitCount == 0 ) {
     c96:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <lnBitCount>
     c9a:	81 11       	cpse	r24, r1
     c9c:	11 c0       	rjmp	.+34     	; 0xcc0 <__vector_11+0x208>
      // Pull the TX Line low to indicate Collision
      LN_SW_UART_SET_TX_LOW(LN_TX_PORT, LN_TX_BIT);
     c9e:	e0 91 42 02 	lds	r30, 0x0242	; 0x800242 <txPort>
     ca2:	f0 91 43 02 	lds	r31, 0x0243	; 0x800243 <txPort+0x1>
     ca6:	20 81       	ld	r18, Z
     ca8:	81 e0       	ldi	r24, 0x01	; 1
     caa:	90 e0       	ldi	r25, 0x00	; 0
     cac:	00 90 41 02 	lds	r0, 0x0241	; 0x800241 <txPin>
     cb0:	02 c0       	rjmp	.+4      	; 0xcb6 <__vector_11+0x1fe>
     cb2:	88 0f       	add	r24, r24
     cb4:	99 1f       	adc	r25, r25
     cb6:	0a 94       	dec	r0
     cb8:	e2 f7       	brpl	.-8      	; 0xcb2 <__vector_11+0x1fa>
     cba:	82 2b       	or	r24, r18
     cbc:	80 83       	st	Z, r24
     cbe:	25 c0       	rjmp	.+74     	; 0xd0a <__vector_11+0x252>
      // ERROR_LED_ON();
    } 
    else if( lnBitCount >= LN_COLLISION_TICKS ) {
     cc0:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <lnBitCount>
     cc4:	8f 30       	cpi	r24, 0x0F	; 15
     cc6:	08 f1       	brcs	.+66     	; 0xd0a <__vector_11+0x252>
      // Release the TX Line
      LN_SW_UART_SET_TX_HIGH(LN_TX_PORT, LN_TX_BIT);
     cc8:	e0 91 42 02 	lds	r30, 0x0242	; 0x800242 <txPort>
     ccc:	f0 91 43 02 	lds	r31, 0x0243	; 0x800243 <txPort+0x1>
     cd0:	20 81       	ld	r18, Z
     cd2:	81 e0       	ldi	r24, 0x01	; 1
     cd4:	90 e0       	ldi	r25, 0x00	; 0
     cd6:	00 90 41 02 	lds	r0, 0x0241	; 0x800241 <txPin>
     cda:	02 c0       	rjmp	.+4      	; 0xce0 <__vector_11+0x228>
     cdc:	88 0f       	add	r24, r24
     cde:	99 1f       	adc	r25, r25
     ce0:	0a 94       	dec	r0
     ce2:	e2 f7       	brpl	.-8      	; 0xcdc <__vector_11+0x224>
     ce4:	80 95       	com	r24
     ce6:	82 23       	and	r24, r18
     ce8:	80 83       	st	Z, r24
      // ERROR_LED_OFF();

      lnBitCount = 0 ;
     cea:	10 92 4e 02 	sts	0x024E, r1	; 0x80024e <lnBitCount>
      lnState = LN_ST_CD_BACKOFF ;
     cee:	81 e0       	ldi	r24, 0x01	; 1
     cf0:	80 93 4f 02 	sts	0x024F, r24	; 0x80024f <lnState>

      lnRxBuffer->Stats.Collisions++ ;
     cf4:	e0 91 49 02 	lds	r30, 0x0249	; 0x800249 <lnRxBuffer>
     cf8:	f0 91 4a 02 	lds	r31, 0x024A	; 0x80024a <lnRxBuffer+0x1>
     cfc:	e9 5f       	subi	r30, 0xF9	; 249
     cfe:	fe 4f       	sbci	r31, 0xFE	; 254
     d00:	80 81       	ld	r24, Z
     d02:	91 81       	ldd	r25, Z+1	; 0x01
     d04:	01 96       	adiw	r24, 0x01	; 1
     d06:	91 83       	std	Z+1, r25	; 0x01
     d08:	80 83       	st	Z, r24
    }
  }

  if( lnState == LN_ST_CD_BACKOFF ) {
     d0a:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <lnState>
     d0e:	81 30       	cpi	r24, 0x01	; 1
     d10:	a1 f4       	brne	.+40     	; 0xd3a <__vector_11+0x282>
    if( lnBitCount == 0 ) {
     d12:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <lnBitCount>
     d16:	81 11       	cpse	r24, r1
     d18:	05 c0       	rjmp	.+10     	; 0xd24 <__vector_11+0x26c>
      // Even though we are waiting, other nodes may try and transmit early
      // so Clear the Start Bit Interrupt Status Flag and Enable ready to 
      // detect the next Start Bit
      sbi( LN_SB_INT_STATUS_REG, LN_SB_INT_STATUS_BIT ) ;
     d1a:	b5 9a       	sbi	0x16, 5	; 22
      sbi( LN_SB_INT_ENABLE_REG, LN_SB_INT_ENABLE_BIT ) ;
     d1c:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
     d20:	80 62       	ori	r24, 0x20	; 32
     d22:	09 c0       	rjmp	.+18     	; 0xd36 <__vector_11+0x27e>
    } 
    else if( lnBitCount >= LN_BACKOFF_MAX ) { 
     d24:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <lnBitCount>
     d28:	88 33       	cpi	r24, 0x38	; 56
     d2a:	38 f0       	brcs	.+14     	; 0xd3a <__vector_11+0x282>
      // declare network to free after maximum backoff delay
      lnState = LN_ST_IDLE ;
     d2c:	10 92 4f 02 	sts	0x024F, r1	; 0x80024f <lnState>
      cbi( LN_TMR_INT_ENABLE_REG, LN_TMR_INT_ENABLE_BIT ) ;
     d30:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
     d34:	8d 7f       	andi	r24, 0xFD	; 253
     d36:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
    }
  }
}
     d3a:	ff 91       	pop	r31
     d3c:	ef 91       	pop	r30
     d3e:	bf 91       	pop	r27
     d40:	af 91       	pop	r26
     d42:	9f 91       	pop	r25
     d44:	8f 91       	pop	r24
     d46:	4f 91       	pop	r20
     d48:	3f 91       	pop	r19
     d4a:	2f 91       	pop	r18
     d4c:	0f 90       	pop	r0
     d4e:	0f be       	out	0x3f, r0	; 63
     d50:	0f 90       	pop	r0
     d52:	1f 90       	pop	r1
     d54:	18 95       	reti

00000d56 <_Z19initLocoNetHardwareP5LnBuf>:


void initLocoNetHardware( LnBuf *RxBuffer )
{
  lnRxBuffer = RxBuffer ;
     d56:	90 93 4a 02 	sts	0x024A, r25	; 0x80024a <lnRxBuffer+0x1>
     d5a:	80 93 49 02 	sts	0x0249, r24	; 0x800249 <lnRxBuffer>

  // Set the RX line to Input
  cbi( LN_RX_DDR, LN_RX_BIT ) ;
     d5e:	20 98       	cbi	0x04, 0	; 4

  // Set the TX line to Inactive
  LN_SW_UART_SET_TX_HIGH(LN_TX_PORT, LN_TX_BIT);
     d60:	e0 91 42 02 	lds	r30, 0x0242	; 0x800242 <txPort>
     d64:	f0 91 43 02 	lds	r31, 0x0243	; 0x800243 <txPort+0x1>
     d68:	20 81       	ld	r18, Z
     d6a:	81 e0       	ldi	r24, 0x01	; 1
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	00 90 41 02 	lds	r0, 0x0241	; 0x800241 <txPin>
     d72:	02 c0       	rjmp	.+4      	; 0xd78 <_Z19initLocoNetHardwareP5LnBuf+0x22>
     d74:	88 0f       	add	r24, r24
     d76:	99 1f       	adc	r25, r25
     d78:	0a 94       	dec	r0
     d7a:	e2 f7       	brpl	.-8      	; 0xd74 <_Z19initLocoNetHardwareP5LnBuf+0x1e>
     d7c:	80 95       	com	r24
     d7e:	82 23       	and	r24, r18
     d80:	80 83       	st	Z, r24

#ifdef LN_INIT_COMPARATOR
  LN_INIT_COMPARATOR();	
     d82:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
     d86:	e1 e8       	ldi	r30, 0x81	; 129
     d88:	f0 e0       	ldi	r31, 0x00	; 0
     d8a:	81 e0       	ldi	r24, 0x01	; 1
     d8c:	80 83       	st	Z, r24
  // tional four system clock cycles of delay from a change applied to the input, to the update of the 
  // ICRn Register. The noise canceler uses the system clock and is therefore not affected by the 
  // prescaler.
  TCCR1B |= (1<<ICNC1) ;    		// Enable Noise Canceler 
#endif
  lnState = LN_ST_IDLE ;
     d8e:	10 92 4f 02 	sts	0x024F, r1	; 0x80024f <lnState>
  //Clear StartBit Interrupt flag
  sbi( LN_SB_INT_STATUS_REG, LN_SB_INT_STATUS_BIT );
     d92:	b5 9a       	sbi	0x16, 5	; 22
  //Enable StartBit Interrupt
  sbi( LN_SB_INT_ENABLE_REG, LN_SB_INT_ENABLE_BIT );
     d94:	af e6       	ldi	r26, 0x6F	; 111
     d96:	b0 e0       	ldi	r27, 0x00	; 0
     d98:	8c 91       	ld	r24, X
     d9a:	80 62       	ori	r24, 0x20	; 32
     d9c:	8c 93       	st	X, r24
  //Set rising edge for StartBit if signal is inverted
#ifdef LN_SW_UART_RX_INVERTED  
  sbi(LN_SB_EDGE_CFG_REG, LN_SB_EDGE_BIT);
#endif
  // Set Timer Clock Source 
  LN_TMR_CONTROL_REG = (LN_TMR_CONTROL_REG & 0xF8) | LN_TMR_PRESCALER;
     d9e:	80 81       	ld	r24, Z
     da0:	88 7f       	andi	r24, 0xF8	; 248
     da2:	81 60       	ori	r24, 0x01	; 1
     da4:	80 83       	st	Z, r24
     da6:	08 95       	ret

00000da8 <_Z20sendLocoNetPacketTryP5lnMsgh>:
}


LN_STATUS sendLocoNetPacketTry(lnMsg *TxData, unsigned char ucPrioDelay)
{
     da8:	1f 93       	push	r17
     daa:	cf 93       	push	r28
     dac:	df 93       	push	r29
     dae:	ec 01       	movw	r28, r24
     db0:	16 2f       	mov	r17, r22
  uint8_t  CheckSum ;
  uint8_t  CheckLength ;

  lnTxLength = getLnMsgSize( TxData ) ;
     db2:	0e 94 16 05 	call	0xa2c	; 0xa2c <getLnMsgSize>
     db6:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <lnTxLength>

  // First calculate the checksum as it may not have been done
  CheckLength = lnTxLength - 1 ;
     dba:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <lnTxLength>
     dbe:	81 50       	subi	r24, 0x01	; 1
  CheckSum = 0xFF ;

  for ( lnTxIndex = 0; lnTxIndex < CheckLength; lnTxIndex++ ) {
     dc0:	10 92 46 02 	sts	0x0246, r1	; 0x800246 <lnTxIndex>

  lnTxLength = getLnMsgSize( TxData ) ;

  // First calculate the checksum as it may not have been done
  CheckLength = lnTxLength - 1 ;
  CheckSum = 0xFF ;
     dc4:	9f ef       	ldi	r25, 0xFF	; 255

  for ( lnTxIndex = 0; lnTxIndex < CheckLength; lnTxIndex++ ) {
     dc6:	20 91 46 02 	lds	r18, 0x0246	; 0x800246 <lnTxIndex>
     dca:	28 17       	cp	r18, r24
     dcc:	68 f4       	brcc	.+26     	; 0xde8 <_Z20sendLocoNetPacketTryP5lnMsgh+0x40>
    CheckSum ^= TxData->data[ lnTxIndex ] ;
     dce:	20 91 46 02 	lds	r18, 0x0246	; 0x800246 <lnTxIndex>
     dd2:	fe 01       	movw	r30, r28
     dd4:	e2 0f       	add	r30, r18
     dd6:	f1 1d       	adc	r31, r1
     dd8:	20 81       	ld	r18, Z
     dda:	92 27       	eor	r25, r18

  // First calculate the checksum as it may not have been done
  CheckLength = lnTxLength - 1 ;
  CheckSum = 0xFF ;

  for ( lnTxIndex = 0; lnTxIndex < CheckLength; lnTxIndex++ ) {
     ddc:	20 91 46 02 	lds	r18, 0x0246	; 0x800246 <lnTxIndex>
     de0:	2f 5f       	subi	r18, 0xFF	; 255
     de2:	20 93 46 02 	sts	0x0246, r18	; 0x800246 <lnTxIndex>
     de6:	ef cf       	rjmp	.-34     	; 0xdc6 <_Z20sendLocoNetPacketTryP5lnMsgh+0x1e>
    CheckSum ^= TxData->data[ lnTxIndex ] ;
  }

  TxData->data[ CheckLength ] = CheckSum ;
     de8:	fe 01       	movw	r30, r28
     dea:	e8 0f       	add	r30, r24
     dec:	f1 1d       	adc	r31, r1
     dee:	90 83       	st	Z, r25
  // clip maximum prio delay
  if (ucPrioDelay > LN_BACKOFF_MAX) {
    ucPrioDelay = LN_BACKOFF_MAX;
  }
  // if priority delay was waited now, declare net as free for this try
  cli();  // disabling interrupt to avoid confusion by ISR changing lnState while we want to do it
     df0:	f8 94       	cli
  if (lnState == LN_ST_CD_BACKOFF) {
     df2:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <lnState>
     df6:	81 30       	cpi	r24, 0x01	; 1
     df8:	79 f4       	brne	.+30     	; 0xe18 <_Z20sendLocoNetPacketTryP5lnMsgh+0x70>
    if (lnBitCount >= ucPrioDelay) {	// Likely we don't want to wait as long as
     dfa:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <lnBitCount>
     dfe:	61 2f       	mov	r22, r17
     e00:	19 33       	cpi	r17, 0x39	; 57
     e02:	08 f0       	brcs	.+2      	; 0xe06 <_Z20sendLocoNetPacketTryP5lnMsgh+0x5e>
     e04:	68 e3       	ldi	r22, 0x38	; 56
     e06:	86 17       	cp	r24, r22
     e08:	38 f0       	brcs	.+14     	; 0xe18 <_Z20sendLocoNetPacketTryP5lnMsgh+0x70>
      lnState = LN_ST_IDLE;			// the timer ISR waits its maximum delay.
     e0a:	10 92 4f 02 	sts	0x024F, r1	; 0x80024f <lnState>
      cbi( LN_TMR_INT_ENABLE_REG, LN_TMR_INT_ENABLE_BIT ) ;
     e0e:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
     e12:	8d 7f       	andi	r24, 0xFD	; 253
     e14:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
    }
  }
  sei();  // a delayed start bit interrupt will happen now,
     e18:	78 94       	sei
  // a delayed timer interrupt was stalled

  // If the Network is not Idle, don't start the packet
  if (lnState == LN_ST_CD_BACKOFF) {
     e1a:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <lnState>
     e1e:	81 30       	cpi	r24, 0x01	; 1
     e20:	39 f4       	brne	.+14     	; 0xe30 <_Z20sendLocoNetPacketTryP5lnMsgh+0x88>
    if (lnBitCount < LN_CARRIER_TICKS) {  // in carrier detect timer?
     e22:	90 91 4e 02 	lds	r25, 0x024E	; 0x80024e <lnBitCount>
      return LN_CD_BACKOFF;
     e26:	94 31       	cpi	r25, 0x14	; 20
     e28:	08 f0       	brcs	.+2      	; 0xe2c <_Z20sendLocoNetPacketTryP5lnMsgh+0x84>
     e2a:	6c c0       	rjmp	.+216    	; 0xf04 <_Z20sendLocoNetPacketTryP5lnMsgh+0x15c>
     e2c:	80 e0       	ldi	r24, 0x00	; 0
     e2e:	6a c0       	rjmp	.+212    	; 0xf04 <_Z20sendLocoNetPacketTryP5lnMsgh+0x15c>
    else {
      return LN_PRIO_BACKOFF;
    }
  }

  if( lnState != LN_ST_IDLE ) {
     e30:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <lnState>
     e34:	81 11       	cpse	r24, r1
     e36:	63 c0       	rjmp	.+198    	; 0xefe <_Z20sendLocoNetPacketTryP5lnMsgh+0x156>
    return LN_NETWORK_BUSY;  // neither idle nor backoff -> busy
  }
  // We need to do this with interrupts off.
  // The last time we check for free net until sending our start bit
  // must be as short as possible, not interrupted.
  cli() ;
     e38:	f8 94       	cli
  // Before we do anything else - Disable StartBit Interrupt
  cbi( LN_SB_INT_ENABLE_REG, LN_SB_INT_ENABLE_BIT ) ;
     e3a:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
     e3e:	8f 7d       	andi	r24, 0xDF	; 223
     e40:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
  if (bit_is_set(LN_SB_INT_STATUS_REG, LN_SB_INT_STATUS_BIT)) {
     e44:	b5 9b       	sbis	0x16, 5	; 22
     e46:	07 c0       	rjmp	.+14     	; 0xe56 <_Z20sendLocoNetPacketTryP5lnMsgh+0xae>
    // first we disabled it, than before sending the start bit, we found out
    // that somebody was faster by examining the start bit interrupt request flag
    sbi( LN_SB_INT_ENABLE_REG, LN_SB_INT_ENABLE_BIT ) ;
     e48:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
     e4c:	80 62       	ori	r24, 0x20	; 32
     e4e:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
    sei() ;  // receive now what our rival is sending
     e52:	78 94       	sei
     e54:	54 c0       	rjmp	.+168    	; 0xefe <_Z20sendLocoNetPacketTryP5lnMsgh+0x156>
    return LN_NETWORK_BUSY;
  }

  LN_SW_UART_SET_TX_LOW(LN_TX_PORT, LN_TX_BIT);        // Begin the Start Bit
     e56:	e0 91 42 02 	lds	r30, 0x0242	; 0x800242 <txPort>
     e5a:	f0 91 43 02 	lds	r31, 0x0243	; 0x800243 <txPort+0x1>
     e5e:	20 81       	ld	r18, Z
     e60:	81 e0       	ldi	r24, 0x01	; 1
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	00 90 41 02 	lds	r0, 0x0241	; 0x800241 <txPin>
     e68:	02 c0       	rjmp	.+4      	; 0xe6e <_Z20sendLocoNetPacketTryP5lnMsgh+0xc6>
     e6a:	88 0f       	add	r24, r24
     e6c:	99 1f       	adc	r25, r25
     e6e:	0a 94       	dec	r0
     e70:	e2 f7       	brpl	.-8      	; 0xe6a <_Z20sendLocoNetPacketTryP5lnMsgh+0xc2>
     e72:	82 2b       	or	r24, r18
     e74:	80 83       	st	Z, r24

  // Get the Current Timer1 Count and Add the offset for the Compare target
  // added adjustment value for bugfix (Olaf Funke)
  lnCompareTarget = LN_TMR_COUNT_REG + LN_TIMER_TX_RELOAD_PERIOD - LN_TIMER_TX_RELOAD_ADJUST;
     e76:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     e7a:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     e7e:	8a 58       	subi	r24, 0x8A	; 138
     e80:	9e 4f       	sbci	r25, 0xFE	; 254
     e82:	90 93 4c 02 	sts	0x024C, r25	; 0x80024c <lnCompareTarget+0x1>
     e86:	80 93 4b 02 	sts	0x024B, r24	; 0x80024b <lnCompareTarget>
  LN_TMR_OUTP_CAPT_REG = lnCompareTarget ;
     e8a:	80 91 4b 02 	lds	r24, 0x024B	; 0x80024b <lnCompareTarget>
     e8e:	90 91 4c 02 	lds	r25, 0x024C	; 0x80024c <lnCompareTarget+0x1>
     e92:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     e96:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>

  sei() ;  // Interrupts back on ...
     e9a:	78 94       	sei

  lnTxData = TxData ;
     e9c:	d0 93 48 02 	sts	0x0248, r29	; 0x800248 <lnTxData+0x1>
     ea0:	c0 93 47 02 	sts	0x0247, r28	; 0x800247 <lnTxData>
  lnTxIndex = 0 ;
     ea4:	10 92 46 02 	sts	0x0246, r1	; 0x800246 <lnTxIndex>
  lnTxSuccess = 0 ;
     ea8:	10 92 44 02 	sts	0x0244, r1	; 0x800244 <lnTxSuccess>

  // Load the first Byte
  lnCurrentByte = TxData->data[ 0 ] ;
     eac:	88 81       	ld	r24, Y
     eae:	80 93 4d 02 	sts	0x024D, r24	; 0x80024d <lnCurrentByte>

  // Set the State to Transmit
  lnState = LN_ST_TX ;                      
     eb2:	83 e0       	ldi	r24, 0x03	; 3
     eb4:	80 93 4f 02 	sts	0x024F, r24	; 0x80024f <lnState>

  // Reset the bit counter
  lnBitCount = 0 ;                          
     eb8:	10 92 4e 02 	sts	0x024E, r1	; 0x80024e <lnBitCount>

  // Clear the current Compare interrupt status bit and enable the Compare interrupt
  sbi(LN_TMR_INT_STATUS_REG, LN_TMR_INT_STATUS_BIT) ;
     ebc:	b1 9a       	sbi	0x16, 1	; 22
  sbi(LN_TMR_INT_ENABLE_REG, LN_TMR_INT_ENABLE_BIT) ; 
     ebe:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
     ec2:	82 60       	ori	r24, 0x02	; 2
     ec4:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>

  while (lnState == LN_ST_TX) {
     ec8:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <lnState>
     ecc:	83 30       	cpi	r24, 0x03	; 3
     ece:	e1 f3       	breq	.-8      	; 0xec8 <_Z20sendLocoNetPacketTryP5lnMsgh+0x120>
    // now busy wait until the interrupts do the rest
  }
  if (lnTxSuccess) {
     ed0:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <lnTxSuccess>
     ed4:	88 23       	and	r24, r24
     ed6:	69 f0       	breq	.+26     	; 0xef2 <_Z20sendLocoNetPacketTryP5lnMsgh+0x14a>
    lnRxBuffer->Stats.TxPackets++ ;
     ed8:	e0 91 49 02 	lds	r30, 0x0249	; 0x800249 <lnRxBuffer>
     edc:	f0 91 4a 02 	lds	r31, 0x024A	; 0x80024a <lnRxBuffer+0x1>
     ee0:	ed 5f       	subi	r30, 0xFD	; 253
     ee2:	fe 4f       	sbci	r31, 0xFE	; 254
     ee4:	80 81       	ld	r24, Z
     ee6:	91 81       	ldd	r25, Z+1	; 0x01
     ee8:	01 96       	adiw	r24, 0x01	; 1
     eea:	91 83       	std	Z+1, r25	; 0x01
     eec:	80 83       	st	Z, r24
    return LN_DONE;
     eee:	83 e0       	ldi	r24, 0x03	; 3
     ef0:	09 c0       	rjmp	.+18     	; 0xf04 <_Z20sendLocoNetPacketTryP5lnMsgh+0x15c>
  }
  if (lnState == LN_ST_TX_COLLISION) {
     ef2:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <lnState>
     ef6:	82 30       	cpi	r24, 0x02	; 2
     ef8:	21 f0       	breq	.+8      	; 0xf02 <_Z20sendLocoNetPacketTryP5lnMsgh+0x15a>
    return LN_COLLISION;
  }
  return LN_UNKNOWN_ERROR; // everything else is an error
     efa:	85 e0       	ldi	r24, 0x05	; 5
     efc:	03 c0       	rjmp	.+6      	; 0xf04 <_Z20sendLocoNetPacketTryP5lnMsgh+0x15c>
      return LN_PRIO_BACKOFF;
    }
  }

  if( lnState != LN_ST_IDLE ) {
    return LN_NETWORK_BUSY;  // neither idle nor backoff -> busy
     efe:	82 e0       	ldi	r24, 0x02	; 2
     f00:	01 c0       	rjmp	.+2      	; 0xf04 <_Z20sendLocoNetPacketTryP5lnMsgh+0x15c>
  if (lnTxSuccess) {
    lnRxBuffer->Stats.TxPackets++ ;
    return LN_DONE;
  }
  if (lnState == LN_ST_TX_COLLISION) {
    return LN_COLLISION;
     f02:	84 e0       	ldi	r24, 0x04	; 4
  }
  return LN_UNKNOWN_ERROR; // everything else is an error
}
     f04:	df 91       	pop	r29
     f06:	cf 91       	pop	r28
     f08:	1f 91       	pop	r17
     f0a:	08 95       	ret

00000f0c <loop>:
    loco.send_B2_hello();
    ina219_init();
}

void loop() {
    uart.read();
     f0c:	8b e6       	ldi	r24, 0x6B	; 107
     f0e:	92 e0       	ldi	r25, 0x02	; 2
     f10:	0e 94 35 03 	call	0x66a	; 0x66a <_ZN4UART4readEv>
    loco.read();
     f14:	80 e5       	ldi	r24, 0x50	; 80
     f16:	92 e0       	ldi	r25, 0x02	; 2
     f18:	0e 94 74 01 	call	0x2e8	; 0x2e8 <_ZN10LocoPacket4readEv>

    if (timer.ena_timer_1Hz) {
     f1c:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <timer+0x2>
     f20:	88 23       	and	r24, r24
     f22:	91 f0       	breq	.+36     	; 0xf48 <loop+0x3c>
		uart.print(PSTR("check\n"));
     f24:	88 e0       	ldi	r24, 0x08	; 8
     f26:	91 e0       	ldi	r25, 0x01	; 1
     f28:	9f 93       	push	r25
     f2a:	8f 93       	push	r24
     f2c:	8b e6       	ldi	r24, 0x6B	; 107
     f2e:	92 e0       	ldi	r25, 0x02	; 2
     f30:	9f 93       	push	r25
     f32:	8f 93       	push	r24
     f34:	0e 94 34 02 	call	0x468	; 0x468 <_ZN4UART5printEPKcz>
        logic_timer_1Hz();
     f38:	0e 94 ed 01 	call	0x3da	; 0x3da <_Z15logic_timer_1Hzv>
        //ina219_readAndPrint();
        timer.ena_timer_1Hz = false;
     f3c:	10 92 6a 02 	sts	0x026A, r1	; 0x80026a <timer+0x2>
     f40:	0f 90       	pop	r0
     f42:	0f 90       	pop	r0
     f44:	0f 90       	pop	r0
     f46:	0f 90       	pop	r0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     f48:	2f ef       	ldi	r18, 0xFF	; 255
     f4a:	80 e7       	ldi	r24, 0x70	; 112
     f4c:	92 e0       	ldi	r25, 0x02	; 2
     f4e:	21 50       	subi	r18, 0x01	; 1
     f50:	80 40       	sbci	r24, 0x00	; 0
     f52:	90 40       	sbci	r25, 0x00	; 0
     f54:	e1 f7       	brne	.-8      	; 0xf4e <loop+0x42>
     f56:	00 c0       	rjmp	.+0      	; 0xf58 <loop+0x4c>
     f58:	00 00       	nop
     f5a:	08 95       	ret

00000f5c <_GLOBAL__sub_I_uart>:
#include "TrafficControl\Timer.h"
#include "TrafficControl\Logic.h"
#include "TrafficControl\LocoPacket.h"
#include "TrafficControl/Wire/src/Wire.h"

UART uart;
     f5c:	8b e6       	ldi	r24, 0x6B	; 107
     f5e:	92 e0       	ldi	r25, 0x02	; 2
     f60:	0e 94 2d 02 	call	0x45a	; 0x45a <_ZN4UARTC1Ev>
Timer timer;
     f64:	88 e6       	ldi	r24, 0x68	; 104
     f66:	92 e0       	ldi	r25, 0x02	; 2
     f68:	0e 94 ee 01 	call	0x3dc	; 0x3dc <_ZN5TimerC1Ev>
LocoPacket loco;
     f6c:	80 e5       	ldi	r24, 0x50	; 80
     f6e:	92 e0       	ldi	r25, 0x02	; 2
     f70:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <_ZN10LocoPacketC1Ev>

00000f74 <_ZL15ina219_writeReghj>:


const uint8_t INA219_ADDR = 0x40;

static void ina219_writeReg(uint8_t reg, uint16_t val) {
     f74:	1f 93       	push	r17
     f76:	cf 93       	push	r28
     f78:	df 93       	push	r29
     f7a:	18 2f       	mov	r17, r24
     f7c:	eb 01       	movw	r28, r22
    Wire.beginTransmission(INA219_ADDR);
     f7e:	60 e4       	ldi	r22, 0x40	; 64
     f80:	8f ef       	ldi	r24, 0xFF	; 255
     f82:	92 e0       	ldi	r25, 0x02	; 2
     f84:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <_ZN7TwoWire17beginTransmissionEh>
    Wire.write(reg);
     f88:	61 2f       	mov	r22, r17
     f8a:	8f ef       	ldi	r24, 0xFF	; 255
     f8c:	92 e0       	ldi	r25, 0x02	; 2
     f8e:	0e 94 07 0a 	call	0x140e	; 0x140e <_ZN7TwoWire5writeEh>
    Wire.write((uint8_t)(val >> 8));
     f92:	6d 2f       	mov	r22, r29
     f94:	8f ef       	ldi	r24, 0xFF	; 255
     f96:	92 e0       	ldi	r25, 0x02	; 2
     f98:	0e 94 07 0a 	call	0x140e	; 0x140e <_ZN7TwoWire5writeEh>
    Wire.write((uint8_t)val);
     f9c:	6c 2f       	mov	r22, r28
     f9e:	8f ef       	ldi	r24, 0xFF	; 255
     fa0:	92 e0       	ldi	r25, 0x02	; 2
     fa2:	0e 94 07 0a 	call	0x140e	; 0x140e <_ZN7TwoWire5writeEh>
    Wire.endTransmission();
     fa6:	8f ef       	ldi	r24, 0xFF	; 255
     fa8:	92 e0       	ldi	r25, 0x02	; 2
}
     faa:	df 91       	pop	r29
     fac:	cf 91       	pop	r28
     fae:	1f 91       	pop	r17
static void ina219_writeReg(uint8_t reg, uint16_t val) {
    Wire.beginTransmission(INA219_ADDR);
    Wire.write(reg);
    Wire.write((uint8_t)(val >> 8));
    Wire.write((uint8_t)val);
    Wire.endTransmission();
     fb0:	0c 94 7f 0a 	jmp	0x14fe	; 0x14fe <_ZN7TwoWire15endTransmissionEv>

00000fb4 <setup>:
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     fb4:	26 e0       	ldi	r18, 0x06	; 6
     fb6:	40 e8       	ldi	r20, 0x80	; 128
     fb8:	55 e2       	ldi	r21, 0x25	; 37
     fba:	60 e0       	ldi	r22, 0x00	; 0
     fbc:	70 e0       	ldi	r23, 0x00	; 0
     fbe:	85 e5       	ldi	r24, 0x55	; 85
     fc0:	93 e0       	ldi	r25, 0x03	; 3
     fc2:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <_ZN14HardwareSerial5beginEmh>
}


void setup() {
    Serial.begin(9600);
    LocoNet.init(9);
     fc6:	69 e0       	ldi	r22, 0x09	; 9
     fc8:	88 e3       	ldi	r24, 0x38	; 56
     fca:	91 e0       	ldi	r25, 0x01	; 1
     fcc:	0e 94 b1 03 	call	0x762	; 0x762 <_ZN12LocoNetClass4initEh>
    uart.print(PSTR("Test Board %d\n"), ADDR_BOARD);
     fd0:	1f 92       	push	r1
     fd2:	1f 92       	push	r1
     fd4:	8f e0       	ldi	r24, 0x0F	; 15
     fd6:	91 e0       	ldi	r25, 0x01	; 1
     fd8:	9f 93       	push	r25
     fda:	8f 93       	push	r24
     fdc:	8b e6       	ldi	r24, 0x6B	; 107
     fde:	92 e0       	ldi	r25, 0x02	; 2
     fe0:	9f 93       	push	r25
     fe2:	8f 93       	push	r24
     fe4:	0e 94 34 02 	call	0x468	; 0x468 <_ZN4UART5printEPKcz>
    loco.send_B2_hello();
     fe8:	80 e5       	ldi	r24, 0x50	; 80
     fea:	92 e0       	ldi	r25, 0x02	; 2
     fec:	0e 94 64 01 	call	0x2c8	; 0x2c8 <_ZN10LocoPacket13send_B2_helloEv>
    uint16_t v = ((uint16_t)Wire.read() << 8) | Wire.read();
    return v;
}

static void ina219_init() {
    Wire.begin(0x40);
     ff0:	60 e4       	ldi	r22, 0x40	; 64
     ff2:	70 e0       	ldi	r23, 0x00	; 0
     ff4:	8f ef       	ldi	r24, 0xFF	; 255
     ff6:	92 e0       	ldi	r25, 0x02	; 2
     ff8:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <_ZN7TwoWire5beginEi>
    // РљРѕРЅС„РёРіСѓСЂР°С†РёСЏ: 32V, 320mV, 12-bit, continuous
    ina219_writeReg(0x00, 0x019F);
     ffc:	6f e9       	ldi	r22, 0x9F	; 159
     ffe:	71 e0       	ldi	r23, 0x01	; 1
    1000:	80 e0       	ldi	r24, 0x00	; 0
    1002:	0e 94 ba 07 	call	0xf74	; 0xf74 <_ZL15ina219_writeReghj>
    // РљР°Р»РёР±СЂРѕРІРєР° (РїСЂРёРјРµСЂ РґР»СЏ С€СѓРЅС‚Р° 0.1 РћРј Рё РјР°РєСЃ ~3.2Рђ)
    // CAL = 4096 (0x1000) СѓСЃР»РѕРІРЅРѕ; РїРѕРґСЃС‚СЂРѕР№С‚Рµ РїРѕРґ РІР°С€ С€СѓРЅС‚.
    ina219_writeReg(0x05, 0x1000);
    1006:	0f 90       	pop	r0
    1008:	0f 90       	pop	r0
    100a:	0f 90       	pop	r0
    100c:	0f 90       	pop	r0
    100e:	0f 90       	pop	r0
    1010:	0f 90       	pop	r0
    1012:	60 e0       	ldi	r22, 0x00	; 0
    1014:	70 e1       	ldi	r23, 0x10	; 16
    1016:	85 e0       	ldi	r24, 0x05	; 5
    1018:	0c 94 ba 07 	jmp	0xf74	; 0xf74 <_ZL15ina219_writeReghj>

0000101c <twi_init>:
  for(i = 0; i < length; ++i){
    data[i] = twi_masterBuffer[i];
  }

  return length;
}
    101c:	10 92 fe 02 	sts	0x02FE, r1	; 0x8002fe <twi_state>
    1020:	81 e0       	ldi	r24, 0x01	; 1
    1022:	80 93 fc 02 	sts	0x02FC, r24	; 0x8002fc <twi_sendStop>
    1026:	10 92 fb 02 	sts	0x02FB, r1	; 0x8002fb <twi_inRepStart>
    102a:	61 e0       	ldi	r22, 0x01	; 1
    102c:	82 e1       	ldi	r24, 0x12	; 18
    102e:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <digitalWrite>
    1032:	61 e0       	ldi	r22, 0x01	; 1
    1034:	83 e1       	ldi	r24, 0x13	; 19
    1036:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <digitalWrite>
    103a:	e9 eb       	ldi	r30, 0xB9	; 185
    103c:	f0 e0       	ldi	r31, 0x00	; 0
    103e:	80 81       	ld	r24, Z
    1040:	8e 7f       	andi	r24, 0xFE	; 254
    1042:	80 83       	st	Z, r24
    1044:	80 81       	ld	r24, Z
    1046:	8d 7f       	andi	r24, 0xFD	; 253
    1048:	80 83       	st	Z, r24
    104a:	80 e2       	ldi	r24, 0x20	; 32
    104c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
    1050:	85 e4       	ldi	r24, 0x45	; 69
    1052:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    1056:	08 95       	ret

00001058 <twi_disable>:
    1058:	ec eb       	ldi	r30, 0xBC	; 188
    105a:	f0 e0       	ldi	r31, 0x00	; 0
    105c:	80 81       	ld	r24, Z
    105e:	8a 7b       	andi	r24, 0xBA	; 186
    1060:	80 83       	st	Z, r24
    1062:	60 e0       	ldi	r22, 0x00	; 0
    1064:	82 e1       	ldi	r24, 0x12	; 18
    1066:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <digitalWrite>
    106a:	60 e0       	ldi	r22, 0x00	; 0
    106c:	83 e1       	ldi	r24, 0x13	; 19
    106e:	0c 94 ec 0d 	jmp	0x1bd8	; 0x1bd8 <digitalWrite>

00001072 <twi_setAddress>:
    1072:	88 0f       	add	r24, r24
    1074:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>
    1078:	08 95       	ret

0000107a <twi_transmit>:
    107a:	40 91 ae 02 	lds	r20, 0x02AE	; 0x8002ae <twi_txBufferLength>
    107e:	26 2f       	mov	r18, r22
    1080:	30 e0       	ldi	r19, 0x00	; 0
    1082:	24 0f       	add	r18, r20
    1084:	31 1d       	adc	r19, r1
    1086:	21 32       	cpi	r18, 0x21	; 33
    1088:	31 05       	cpc	r19, r1
    108a:	dc f4       	brge	.+54     	; 0x10c2 <twi_transmit+0x48>
    108c:	20 91 fe 02 	lds	r18, 0x02FE	; 0x8002fe <twi_state>
    1090:	24 30       	cpi	r18, 0x04	; 4
    1092:	c9 f4       	brne	.+50     	; 0x10c6 <twi_transmit+0x4c>
    1094:	fc 01       	movw	r30, r24
    1096:	80 e0       	ldi	r24, 0x00	; 0
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	86 17       	cp	r24, r22
    109c:	58 f4       	brcc	.+22     	; 0x10b4 <twi_transmit+0x3a>
    109e:	30 91 ae 02 	lds	r19, 0x02AE	; 0x8002ae <twi_txBufferLength>
    10a2:	21 91       	ld	r18, Z+
    10a4:	dc 01       	movw	r26, r24
    10a6:	a1 55       	subi	r26, 0x51	; 81
    10a8:	bd 4f       	sbci	r27, 0xFD	; 253
    10aa:	a3 0f       	add	r26, r19
    10ac:	b1 1d       	adc	r27, r1
    10ae:	2c 93       	st	X, r18
    10b0:	01 96       	adiw	r24, 0x01	; 1
    10b2:	f3 cf       	rjmp	.-26     	; 0x109a <twi_transmit+0x20>
    10b4:	80 91 ae 02 	lds	r24, 0x02AE	; 0x8002ae <twi_txBufferLength>
    10b8:	68 0f       	add	r22, r24
    10ba:	60 93 ae 02 	sts	0x02AE, r22	; 0x8002ae <twi_txBufferLength>
    10be:	80 e0       	ldi	r24, 0x00	; 0
    10c0:	08 95       	ret
    10c2:	81 e0       	ldi	r24, 0x01	; 1
    10c4:	08 95       	ret
    10c6:	82 e0       	ldi	r24, 0x02	; 2
    10c8:	08 95       	ret

000010ca <twi_attachSlaveRxEvent>:
    10ca:	90 93 f2 02 	sts	0x02F2, r25	; 0x8002f2 <twi_onSlaveReceive+0x1>
    10ce:	80 93 f1 02 	sts	0x02F1, r24	; 0x8002f1 <twi_onSlaveReceive>
    10d2:	08 95       	ret

000010d4 <twi_attachSlaveTxEvent>:
    10d4:	90 93 f4 02 	sts	0x02F4, r25	; 0x8002f4 <twi_onSlaveTransmit+0x1>
    10d8:	80 93 f3 02 	sts	0x02F3, r24	; 0x8002f3 <twi_onSlaveTransmit>
    10dc:	08 95       	ret

000010de <twi_handleTimeout>:
    10de:	cf 93       	push	r28
    10e0:	df 93       	push	r29
    10e2:	91 e0       	ldi	r25, 0x01	; 1
    10e4:	90 93 f6 02 	sts	0x02F6, r25	; 0x8002f6 <twi_timed_out_flag>
    10e8:	88 23       	and	r24, r24
    10ea:	61 f0       	breq	.+24     	; 0x1104 <twi_handleTimeout+0x26>
    10ec:	c0 91 b8 00 	lds	r28, 0x00B8	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
    10f0:	d0 91 ba 00 	lds	r29, 0x00BA	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>
    10f4:	0e 94 2c 08 	call	0x1058	; 0x1058 <twi_disable>
    10f8:	0e 94 0e 08 	call	0x101c	; 0x101c <twi_init>
    10fc:	d0 93 ba 00 	sts	0x00BA, r29	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>
    1100:	c0 93 b8 00 	sts	0x00B8, r28	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
    1104:	df 91       	pop	r29
    1106:	cf 91       	pop	r28
    1108:	08 95       	ret

0000110a <twi_writeTo>:
 *          3 .. data send, NACK received
 *          4 .. other twi error (lost bus arbitration, bus error, ..)
 *          5 .. timeout
 */
uint8_t twi_writeTo(uint8_t address, uint8_t* data, uint8_t length, uint8_t wait, uint8_t sendStop)
{
    110a:	4f 92       	push	r4
    110c:	5f 92       	push	r5
    110e:	6f 92       	push	r6
    1110:	7f 92       	push	r7
    1112:	8f 92       	push	r8
    1114:	9f 92       	push	r9
    1116:	af 92       	push	r10
    1118:	bf 92       	push	r11
    111a:	cf 92       	push	r12
    111c:	df 92       	push	r13
    111e:	ef 92       	push	r14
    1120:	ff 92       	push	r15
    1122:	0f 93       	push	r16
    1124:	1f 93       	push	r17
    1126:	cf 93       	push	r28
    1128:	df 93       	push	r29
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    112a:	41 32       	cpi	r20, 0x21	; 33
    112c:	08 f0       	brcs	.+2      	; 0x1130 <twi_writeTo+0x26>
    112e:	c6 c0       	rjmp	.+396    	; 0x12bc <twi_writeTo+0x1b2>
    1130:	12 2f       	mov	r17, r18
    1132:	f4 2e       	mov	r15, r20
    1134:	d7 2e       	mov	r13, r23
    1136:	e6 2e       	mov	r14, r22
    1138:	d8 2f       	mov	r29, r24
    return 1;
  }

  // wait until twi is ready, become master transmitter
  uint32_t startMicros = micros();
    113a:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <micros>
    113e:	4b 01       	movw	r8, r22
    1140:	5c 01       	movw	r10, r24
  while(TWI_READY != twi_state){
    1142:	c0 91 fe 02 	lds	r28, 0x02FE	; 0x8002fe <twi_state>
    1146:	cc 23       	and	r28, r28
    1148:	11 f1       	breq	.+68     	; 0x118e <twi_writeTo+0x84>
    if((twi_timeout_us > 0ul) && ((micros() - startMicros) > twi_timeout_us)) {
    114a:	80 91 f7 02 	lds	r24, 0x02F7	; 0x8002f7 <twi_timeout_us>
    114e:	90 91 f8 02 	lds	r25, 0x02F8	; 0x8002f8 <twi_timeout_us+0x1>
    1152:	a0 91 f9 02 	lds	r26, 0x02F9	; 0x8002f9 <twi_timeout_us+0x2>
    1156:	b0 91 fa 02 	lds	r27, 0x02FA	; 0x8002fa <twi_timeout_us+0x3>
    115a:	89 2b       	or	r24, r25
    115c:	8a 2b       	or	r24, r26
    115e:	8b 2b       	or	r24, r27
    1160:	81 f3       	breq	.-32     	; 0x1142 <twi_writeTo+0x38>
    1162:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <micros>
    1166:	40 90 f7 02 	lds	r4, 0x02F7	; 0x8002f7 <twi_timeout_us>
    116a:	50 90 f8 02 	lds	r5, 0x02F8	; 0x8002f8 <twi_timeout_us+0x1>
    116e:	60 90 f9 02 	lds	r6, 0x02F9	; 0x8002f9 <twi_timeout_us+0x2>
    1172:	70 90 fa 02 	lds	r7, 0x02FA	; 0x8002fa <twi_timeout_us+0x3>
    1176:	dc 01       	movw	r26, r24
    1178:	cb 01       	movw	r24, r22
    117a:	88 19       	sub	r24, r8
    117c:	99 09       	sbc	r25, r9
    117e:	aa 09       	sbc	r26, r10
    1180:	bb 09       	sbc	r27, r11
    1182:	48 16       	cp	r4, r24
    1184:	59 06       	cpc	r5, r25
    1186:	6a 06       	cpc	r6, r26
    1188:	7b 06       	cpc	r7, r27
    118a:	d8 f6       	brcc	.-74     	; 0x1142 <twi_writeTo+0x38>
    118c:	83 c0       	rjmp	.+262    	; 0x1294 <twi_writeTo+0x18a>
      twi_handleTimeout(twi_do_reset_on_timeout);
      return (5);
    }
  }
  twi_state = TWI_MTX;
    118e:	82 e0       	ldi	r24, 0x02	; 2
    1190:	80 93 fe 02 	sts	0x02FE, r24	; 0x8002fe <twi_state>
  twi_sendStop = sendStop;
    1194:	00 93 fc 02 	sts	0x02FC, r16	; 0x8002fc <twi_sendStop>
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
    1198:	8f ef       	ldi	r24, 0xFF	; 255
    119a:	80 93 ad 02 	sts	0x02AD, r24	; 0x8002ad <twi_error>

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
    119e:	10 92 d0 02 	sts	0x02D0, r1	; 0x8002d0 <twi_masterBufferIndex>
  twi_masterBufferLength = length;
    11a2:	f0 92 cf 02 	sts	0x02CF, r15	; 0x8002cf <twi_masterBufferLength>
    11a6:	9e 2d       	mov	r25, r14
    11a8:	a1 ed       	ldi	r26, 0xD1	; 209
    11aa:	b2 e0       	ldi	r27, 0x02	; 2
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    11ac:	ee 2d       	mov	r30, r14
    11ae:	fd 2d       	mov	r31, r13
    11b0:	8e 2f       	mov	r24, r30
    11b2:	89 1b       	sub	r24, r25
    11b4:	8f 15       	cp	r24, r15
    11b6:	18 f4       	brcc	.+6      	; 0x11be <twi_writeTo+0xb4>
    twi_masterBuffer[i] = data[i];
    11b8:	81 91       	ld	r24, Z+
    11ba:	8d 93       	st	X+, r24
    11bc:	f9 cf       	rjmp	.-14     	; 0x11b0 <twi_writeTo+0xa6>
  }
  
  // build sla+w, slave device address + w bit
  twi_slarw = TW_WRITE;
    11be:	10 92 fd 02 	sts	0x02FD, r1	; 0x8002fd <twi_slarw>
  twi_slarw |= address << 1;
    11c2:	90 91 fd 02 	lds	r25, 0x02FD	; 0x8002fd <twi_slarw>
    11c6:	dd 0f       	add	r29, r29
    11c8:	d9 2b       	or	r29, r25
    11ca:	d0 93 fd 02 	sts	0x02FD, r29	; 0x8002fd <twi_slarw>
  
  // if we're in a repeated start, then we've already sent the START
  // in the ISR. Don't do it again.
  //
  if (true == twi_inRepStart) {
    11ce:	80 91 fb 02 	lds	r24, 0x02FB	; 0x8002fb <twi_inRepStart>
    11d2:	81 30       	cpi	r24, 0x01	; 1
    11d4:	89 f5       	brne	.+98     	; 0x1238 <twi_writeTo+0x12e>
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent outselves, and that would really confuse things.
    twi_inRepStart = false;			// remember, we're dealing with an ASYNC ISR
    11d6:	10 92 fb 02 	sts	0x02FB, r1	; 0x8002fb <twi_inRepStart>
    startMicros = micros();
    11da:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <micros>
    11de:	6b 01       	movw	r12, r22
    11e0:	7c 01       	movw	r14, r24
    do {
      TWDR = twi_slarw;
    11e2:	80 91 fd 02 	lds	r24, 0x02FD	; 0x8002fd <twi_slarw>
    11e6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
      if((twi_timeout_us > 0ul) && ((micros() - startMicros) > twi_timeout_us)) {
    11ea:	80 91 f7 02 	lds	r24, 0x02F7	; 0x8002f7 <twi_timeout_us>
    11ee:	90 91 f8 02 	lds	r25, 0x02F8	; 0x8002f8 <twi_timeout_us+0x1>
    11f2:	a0 91 f9 02 	lds	r26, 0x02F9	; 0x8002f9 <twi_timeout_us+0x2>
    11f6:	b0 91 fa 02 	lds	r27, 0x02FA	; 0x8002fa <twi_timeout_us+0x3>
    11fa:	89 2b       	or	r24, r25
    11fc:	8a 2b       	or	r24, r26
    11fe:	8b 2b       	or	r24, r27
    1200:	a9 f0       	breq	.+42     	; 0x122c <twi_writeTo+0x122>
    1202:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <micros>
    1206:	80 90 f7 02 	lds	r8, 0x02F7	; 0x8002f7 <twi_timeout_us>
    120a:	90 90 f8 02 	lds	r9, 0x02F8	; 0x8002f8 <twi_timeout_us+0x1>
    120e:	a0 90 f9 02 	lds	r10, 0x02F9	; 0x8002f9 <twi_timeout_us+0x2>
    1212:	b0 90 fa 02 	lds	r11, 0x02FA	; 0x8002fa <twi_timeout_us+0x3>
    1216:	dc 01       	movw	r26, r24
    1218:	cb 01       	movw	r24, r22
    121a:	8c 19       	sub	r24, r12
    121c:	9d 09       	sbc	r25, r13
    121e:	ae 09       	sbc	r26, r14
    1220:	bf 09       	sbc	r27, r15
    1222:	88 16       	cp	r8, r24
    1224:	99 06       	cpc	r9, r25
    1226:	aa 06       	cpc	r10, r26
    1228:	bb 06       	cpc	r11, r27
    122a:	a0 f1       	brcs	.+104    	; 0x1294 <twi_writeTo+0x18a>
        twi_handleTimeout(twi_do_reset_on_timeout);
        return (5);
      }
    } while(TWCR & _BV(TWWC));
    122c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    1230:	83 fd       	sbrc	r24, 3
    1232:	d7 cf       	rjmp	.-82     	; 0x11e2 <twi_writeTo+0xd8>
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);	// enable INTs, but not START
    1234:	85 ec       	ldi	r24, 0xC5	; 197
    1236:	01 c0       	rjmp	.+2      	; 0x123a <twi_writeTo+0x130>
  } else {
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA);	// enable INTs
    1238:	85 ee       	ldi	r24, 0xE5	; 229
    123a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  }

  // wait for write operation to complete
  startMicros = micros();
    123e:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <micros>
    1242:	6b 01       	movw	r12, r22
    1244:	7c 01       	movw	r14, r24
  while(wait && (TWI_MTX == twi_state)){
    1246:	11 23       	and	r17, r17
    1248:	59 f1       	breq	.+86     	; 0x12a0 <twi_writeTo+0x196>
    124a:	80 91 fe 02 	lds	r24, 0x02FE	; 0x8002fe <twi_state>
    124e:	82 30       	cpi	r24, 0x02	; 2
    1250:	39 f5       	brne	.+78     	; 0x12a0 <twi_writeTo+0x196>
    if((twi_timeout_us > 0ul) && ((micros() - startMicros) > twi_timeout_us)) {
    1252:	80 91 f7 02 	lds	r24, 0x02F7	; 0x8002f7 <twi_timeout_us>
    1256:	90 91 f8 02 	lds	r25, 0x02F8	; 0x8002f8 <twi_timeout_us+0x1>
    125a:	a0 91 f9 02 	lds	r26, 0x02F9	; 0x8002f9 <twi_timeout_us+0x2>
    125e:	b0 91 fa 02 	lds	r27, 0x02FA	; 0x8002fa <twi_timeout_us+0x3>
    1262:	89 2b       	or	r24, r25
    1264:	8a 2b       	or	r24, r26
    1266:	8b 2b       	or	r24, r27
    1268:	71 f3       	breq	.-36     	; 0x1246 <twi_writeTo+0x13c>
    126a:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <micros>
    126e:	80 90 f7 02 	lds	r8, 0x02F7	; 0x8002f7 <twi_timeout_us>
    1272:	90 90 f8 02 	lds	r9, 0x02F8	; 0x8002f8 <twi_timeout_us+0x1>
    1276:	a0 90 f9 02 	lds	r10, 0x02F9	; 0x8002f9 <twi_timeout_us+0x2>
    127a:	b0 90 fa 02 	lds	r11, 0x02FA	; 0x8002fa <twi_timeout_us+0x3>
    127e:	dc 01       	movw	r26, r24
    1280:	cb 01       	movw	r24, r22
    1282:	8c 19       	sub	r24, r12
    1284:	9d 09       	sbc	r25, r13
    1286:	ae 09       	sbc	r26, r14
    1288:	bf 09       	sbc	r27, r15
    128a:	88 16       	cp	r8, r24
    128c:	99 06       	cpc	r9, r25
    128e:	aa 06       	cpc	r10, r26
    1290:	bb 06       	cpc	r11, r27
    1292:	c8 f6       	brcc	.-78     	; 0x1246 <twi_writeTo+0x13c>
      twi_handleTimeout(twi_do_reset_on_timeout);
    1294:	80 91 f5 02 	lds	r24, 0x02F5	; 0x8002f5 <twi_do_reset_on_timeout>
    1298:	0e 94 6f 08 	call	0x10de	; 0x10de <twi_handleTimeout>
      return (5);
    129c:	c5 e0       	ldi	r28, 0x05	; 5
    129e:	13 c0       	rjmp	.+38     	; 0x12c6 <twi_writeTo+0x1bc>
    }
  }
  
  if (twi_error == 0xFF)
    12a0:	80 91 ad 02 	lds	r24, 0x02AD	; 0x8002ad <twi_error>
    12a4:	8f 3f       	cpi	r24, 0xFF	; 255
    12a6:	79 f0       	breq	.+30     	; 0x12c6 <twi_writeTo+0x1bc>
    return 0;	// success
  else if (twi_error == TW_MT_SLA_NACK)
    12a8:	80 91 ad 02 	lds	r24, 0x02AD	; 0x8002ad <twi_error>
    12ac:	80 32       	cpi	r24, 0x20	; 32
    12ae:	41 f0       	breq	.+16     	; 0x12c0 <twi_writeTo+0x1b6>
    return 2;	// error: address send, nack received
  else if (twi_error == TW_MT_DATA_NACK)
    12b0:	80 91 ad 02 	lds	r24, 0x02AD	; 0x8002ad <twi_error>
    12b4:	80 33       	cpi	r24, 0x30	; 48
    12b6:	31 f0       	breq	.+12     	; 0x12c4 <twi_writeTo+0x1ba>
    return 3;	// error: data send, nack received
  else
    return 4;	// other twi error
    12b8:	c4 e0       	ldi	r28, 0x04	; 4
    12ba:	05 c0       	rjmp	.+10     	; 0x12c6 <twi_writeTo+0x1bc>
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    return 1;
    12bc:	c1 e0       	ldi	r28, 0x01	; 1
    12be:	03 c0       	rjmp	.+6      	; 0x12c6 <twi_writeTo+0x1bc>
  }
  
  if (twi_error == 0xFF)
    return 0;	// success
  else if (twi_error == TW_MT_SLA_NACK)
    return 2;	// error: address send, nack received
    12c0:	c2 e0       	ldi	r28, 0x02	; 2
    12c2:	01 c0       	rjmp	.+2      	; 0x12c6 <twi_writeTo+0x1bc>
  else if (twi_error == TW_MT_DATA_NACK)
    return 3;	// error: data send, nack received
    12c4:	c3 e0       	ldi	r28, 0x03	; 3
  else
    return 4;	// other twi error
}
    12c6:	8c 2f       	mov	r24, r28
    12c8:	df 91       	pop	r29
    12ca:	cf 91       	pop	r28
    12cc:	1f 91       	pop	r17
    12ce:	0f 91       	pop	r16
    12d0:	ff 90       	pop	r15
    12d2:	ef 90       	pop	r14
    12d4:	df 90       	pop	r13
    12d6:	cf 90       	pop	r12
    12d8:	bf 90       	pop	r11
    12da:	af 90       	pop	r10
    12dc:	9f 90       	pop	r9
    12de:	8f 90       	pop	r8
    12e0:	7f 90       	pop	r7
    12e2:	6f 90       	pop	r6
    12e4:	5f 90       	pop	r5
    12e6:	4f 90       	pop	r4
    12e8:	08 95       	ret

000012ea <_ZN5Print17availableForWriteEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    12ea:	80 e0       	ldi	r24, 0x00	; 0
    12ec:	90 e0       	ldi	r25, 0x00	; 0
    12ee:	08 95       	ret

000012f0 <_ZN7TwoWire9availableEv>:
    12f0:	80 91 33 03 	lds	r24, 0x0333	; 0x800333 <_ZN7TwoWire14rxBufferLengthE>
    12f4:	90 e0       	ldi	r25, 0x00	; 0
    12f6:	20 91 34 03 	lds	r18, 0x0334	; 0x800334 <_ZN7TwoWire13rxBufferIndexE>
    12fa:	82 1b       	sub	r24, r18
    12fc:	91 09       	sbc	r25, r1
    12fe:	08 95       	ret

00001300 <_ZN7TwoWire4readEv>:
    1300:	90 91 34 03 	lds	r25, 0x0334	; 0x800334 <_ZN7TwoWire13rxBufferIndexE>
    1304:	80 91 33 03 	lds	r24, 0x0333	; 0x800333 <_ZN7TwoWire14rxBufferLengthE>
    1308:	98 17       	cp	r25, r24
    130a:	50 f4       	brcc	.+20     	; 0x1320 <_ZN7TwoWire4readEv+0x20>
    130c:	e9 2f       	mov	r30, r25
    130e:	f0 e0       	ldi	r31, 0x00	; 0
    1310:	eb 5c       	subi	r30, 0xCB	; 203
    1312:	fc 4f       	sbci	r31, 0xFC	; 252
    1314:	20 81       	ld	r18, Z
    1316:	30 e0       	ldi	r19, 0x00	; 0
    1318:	9f 5f       	subi	r25, 0xFF	; 255
    131a:	90 93 34 03 	sts	0x0334, r25	; 0x800334 <_ZN7TwoWire13rxBufferIndexE>
    131e:	02 c0       	rjmp	.+4      	; 0x1324 <_ZN7TwoWire4readEv+0x24>
    1320:	2f ef       	ldi	r18, 0xFF	; 255
    1322:	3f ef       	ldi	r19, 0xFF	; 255
    1324:	c9 01       	movw	r24, r18
    1326:	08 95       	ret

00001328 <_ZN7TwoWire4peekEv>:
    1328:	e0 91 34 03 	lds	r30, 0x0334	; 0x800334 <_ZN7TwoWire13rxBufferIndexE>
    132c:	80 91 33 03 	lds	r24, 0x0333	; 0x800333 <_ZN7TwoWire14rxBufferLengthE>
    1330:	e8 17       	cp	r30, r24
    1332:	30 f4       	brcc	.+12     	; 0x1340 <_ZN7TwoWire4peekEv+0x18>
    1334:	f0 e0       	ldi	r31, 0x00	; 0
    1336:	eb 5c       	subi	r30, 0xCB	; 203
    1338:	fc 4f       	sbci	r31, 0xFC	; 252
    133a:	80 81       	ld	r24, Z
    133c:	90 e0       	ldi	r25, 0x00	; 0
    133e:	08 95       	ret
    1340:	8f ef       	ldi	r24, 0xFF	; 255
    1342:	9f ef       	ldi	r25, 0xFF	; 255
    1344:	08 95       	ret

00001346 <_ZN7TwoWire5flushEv>:
    1346:	08 95       	ret

00001348 <_ZN7TwoWire16onReceiveServiceEPhi>:
    1348:	cf 93       	push	r28
    134a:	df 93       	push	r29
    134c:	ec 01       	movw	r28, r24
    134e:	e0 91 0b 03 	lds	r30, 0x030B	; 0x80030b <_ZN7TwoWire14user_onReceiveE>
    1352:	f0 91 0c 03 	lds	r31, 0x030C	; 0x80030c <_ZN7TwoWire14user_onReceiveE+0x1>
    1356:	30 97       	sbiw	r30, 0x00	; 0
    1358:	f1 f0       	breq	.+60     	; 0x1396 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    135a:	90 91 34 03 	lds	r25, 0x0334	; 0x800334 <_ZN7TwoWire13rxBufferIndexE>
    135e:	80 91 33 03 	lds	r24, 0x0333	; 0x800333 <_ZN7TwoWire14rxBufferLengthE>
    1362:	98 17       	cp	r25, r24
    1364:	c0 f0       	brcs	.+48     	; 0x1396 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    1366:	90 e0       	ldi	r25, 0x00	; 0
    1368:	29 2f       	mov	r18, r25
    136a:	30 e0       	ldi	r19, 0x00	; 0
    136c:	26 17       	cp	r18, r22
    136e:	37 07       	cpc	r19, r23
    1370:	54 f4       	brge	.+20     	; 0x1386 <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    1372:	de 01       	movw	r26, r28
    1374:	a2 0f       	add	r26, r18
    1376:	b3 1f       	adc	r27, r19
    1378:	4c 91       	ld	r20, X
    137a:	d9 01       	movw	r26, r18
    137c:	ab 5c       	subi	r26, 0xCB	; 203
    137e:	bc 4f       	sbci	r27, 0xFC	; 252
    1380:	4c 93       	st	X, r20
    1382:	9f 5f       	subi	r25, 0xFF	; 255
    1384:	f1 cf       	rjmp	.-30     	; 0x1368 <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    1386:	10 92 34 03 	sts	0x0334, r1	; 0x800334 <_ZN7TwoWire13rxBufferIndexE>
    138a:	60 93 33 03 	sts	0x0333, r22	; 0x800333 <_ZN7TwoWire14rxBufferLengthE>
    138e:	cb 01       	movw	r24, r22
    1390:	df 91       	pop	r29
    1392:	cf 91       	pop	r28
    1394:	09 94       	ijmp
    1396:	df 91       	pop	r29
    1398:	cf 91       	pop	r28
    139a:	08 95       	ret

0000139c <_ZN7TwoWire16onRequestServiceEv>:
    139c:	e0 91 0d 03 	lds	r30, 0x030D	; 0x80030d <_ZN7TwoWire14user_onRequestE>
    13a0:	f0 91 0e 03 	lds	r31, 0x030E	; 0x80030e <_ZN7TwoWire14user_onRequestE+0x1>
    13a4:	30 97       	sbiw	r30, 0x00	; 0
    13a6:	29 f0       	breq	.+10     	; 0x13b2 <_ZN7TwoWire16onRequestServiceEv+0x16>
    13a8:	10 92 11 03 	sts	0x0311, r1	; 0x800311 <_ZN7TwoWire13txBufferIndexE>
    13ac:	10 92 10 03 	sts	0x0310, r1	; 0x800310 <_ZN7TwoWire14txBufferLengthE>
    13b0:	09 94       	ijmp
    13b2:	08 95       	ret

000013b4 <_ZN7TwoWire5writeEPKhj>:
    13b4:	cf 92       	push	r12
    13b6:	df 92       	push	r13
    13b8:	ef 92       	push	r14
    13ba:	ff 92       	push	r15
    13bc:	0f 93       	push	r16
    13be:	1f 93       	push	r17
    13c0:	cf 93       	push	r28
    13c2:	df 93       	push	r29
    13c4:	7c 01       	movw	r14, r24
    13c6:	cb 01       	movw	r24, r22
    13c8:	8a 01       	movw	r16, r20
    13ca:	20 91 0f 03 	lds	r18, 0x030F	; 0x80030f <_ZN7TwoWire12transmittingE>
    13ce:	22 23       	and	r18, r18
    13d0:	89 f0       	breq	.+34     	; 0x13f4 <_ZN7TwoWire5writeEPKhj+0x40>
    13d2:	eb 01       	movw	r28, r22
    13d4:	6b 01       	movw	r12, r22
    13d6:	c4 0e       	add	r12, r20
    13d8:	d5 1e       	adc	r13, r21
    13da:	cc 15       	cp	r28, r12
    13dc:	dd 05       	cpc	r29, r13
    13de:	69 f0       	breq	.+26     	; 0x13fa <_ZN7TwoWire5writeEPKhj+0x46>
    13e0:	69 91       	ld	r22, Y+
    13e2:	d7 01       	movw	r26, r14
    13e4:	ed 91       	ld	r30, X+
    13e6:	fc 91       	ld	r31, X
    13e8:	01 90       	ld	r0, Z+
    13ea:	f0 81       	ld	r31, Z
    13ec:	e0 2d       	mov	r30, r0
    13ee:	c7 01       	movw	r24, r14
    13f0:	09 95       	icall
    13f2:	f3 cf       	rjmp	.-26     	; 0x13da <_ZN7TwoWire5writeEPKhj+0x26>
    13f4:	64 2f       	mov	r22, r20
    13f6:	0e 94 3d 08 	call	0x107a	; 0x107a <twi_transmit>
    13fa:	c8 01       	movw	r24, r16
    13fc:	df 91       	pop	r29
    13fe:	cf 91       	pop	r28
    1400:	1f 91       	pop	r17
    1402:	0f 91       	pop	r16
    1404:	ff 90       	pop	r15
    1406:	ef 90       	pop	r14
    1408:	df 90       	pop	r13
    140a:	cf 90       	pop	r12
    140c:	08 95       	ret

0000140e <_ZN7TwoWire5writeEh>:
    140e:	cf 93       	push	r28
    1410:	df 93       	push	r29
    1412:	1f 92       	push	r1
    1414:	cd b7       	in	r28, 0x3d	; 61
    1416:	de b7       	in	r29, 0x3e	; 62
    1418:	69 83       	std	Y+1, r22	; 0x01
    141a:	20 91 0f 03 	lds	r18, 0x030F	; 0x80030f <_ZN7TwoWire12transmittingE>
    141e:	22 23       	and	r18, r18
    1420:	d1 f0       	breq	.+52     	; 0x1456 <_ZN7TwoWire5writeEh+0x48>
    1422:	20 91 10 03 	lds	r18, 0x0310	; 0x800310 <_ZN7TwoWire14txBufferLengthE>
    1426:	20 32       	cpi	r18, 0x20	; 32
    1428:	40 f0       	brcs	.+16     	; 0x143a <_ZN7TwoWire5writeEh+0x2c>
    142a:	21 e0       	ldi	r18, 0x01	; 1
    142c:	30 e0       	ldi	r19, 0x00	; 0
    142e:	fc 01       	movw	r30, r24
    1430:	33 83       	std	Z+3, r19	; 0x03
    1432:	22 83       	std	Z+2, r18	; 0x02
    1434:	80 e0       	ldi	r24, 0x00	; 0
    1436:	90 e0       	ldi	r25, 0x00	; 0
    1438:	15 c0       	rjmp	.+42     	; 0x1464 <_ZN7TwoWire5writeEh+0x56>
    143a:	80 91 11 03 	lds	r24, 0x0311	; 0x800311 <_ZN7TwoWire13txBufferIndexE>
    143e:	e8 2f       	mov	r30, r24
    1440:	f0 e0       	ldi	r31, 0x00	; 0
    1442:	ee 5e       	subi	r30, 0xEE	; 238
    1444:	fc 4f       	sbci	r31, 0xFC	; 252
    1446:	99 81       	ldd	r25, Y+1	; 0x01
    1448:	90 83       	st	Z, r25
    144a:	8f 5f       	subi	r24, 0xFF	; 255
    144c:	80 93 11 03 	sts	0x0311, r24	; 0x800311 <_ZN7TwoWire13txBufferIndexE>
    1450:	80 93 10 03 	sts	0x0310, r24	; 0x800310 <_ZN7TwoWire14txBufferLengthE>
    1454:	05 c0       	rjmp	.+10     	; 0x1460 <_ZN7TwoWire5writeEh+0x52>
    1456:	61 e0       	ldi	r22, 0x01	; 1
    1458:	ce 01       	movw	r24, r28
    145a:	01 96       	adiw	r24, 0x01	; 1
    145c:	0e 94 3d 08 	call	0x107a	; 0x107a <twi_transmit>
    1460:	81 e0       	ldi	r24, 0x01	; 1
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	0f 90       	pop	r0
    1466:	df 91       	pop	r29
    1468:	cf 91       	pop	r28
    146a:	08 95       	ret

0000146c <_ZN7TwoWireC1Ev>:
    146c:	fc 01       	movw	r30, r24
    146e:	13 82       	std	Z+3, r1	; 0x03
    1470:	12 82       	std	Z+2, r1	; 0x02
    1472:	88 ee       	ldi	r24, 0xE8	; 232
    1474:	93 e0       	ldi	r25, 0x03	; 3
    1476:	a0 e0       	ldi	r26, 0x00	; 0
    1478:	b0 e0       	ldi	r27, 0x00	; 0
    147a:	84 83       	std	Z+4, r24	; 0x04
    147c:	95 83       	std	Z+5, r25	; 0x05
    147e:	a6 83       	std	Z+6, r26	; 0x06
    1480:	b7 83       	std	Z+7, r27	; 0x07
    1482:	87 e1       	ldi	r24, 0x17	; 23
    1484:	91 e0       	ldi	r25, 0x01	; 1
    1486:	91 83       	std	Z+1, r25	; 0x01
    1488:	80 83       	st	Z, r24
    148a:	08 95       	ret

0000148c <_ZN7TwoWire5beginEv>:
    148c:	10 92 34 03 	sts	0x0334, r1	; 0x800334 <_ZN7TwoWire13rxBufferIndexE>
    1490:	10 92 33 03 	sts	0x0333, r1	; 0x800333 <_ZN7TwoWire14rxBufferLengthE>
    1494:	10 92 11 03 	sts	0x0311, r1	; 0x800311 <_ZN7TwoWire13txBufferIndexE>
    1498:	10 92 10 03 	sts	0x0310, r1	; 0x800310 <_ZN7TwoWire14txBufferLengthE>
    149c:	0e 94 0e 08 	call	0x101c	; 0x101c <twi_init>
    14a0:	8e ec       	ldi	r24, 0xCE	; 206
    14a2:	99 e0       	ldi	r25, 0x09	; 9
    14a4:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <twi_attachSlaveTxEvent>
    14a8:	84 ea       	ldi	r24, 0xA4	; 164
    14aa:	99 e0       	ldi	r25, 0x09	; 9
    14ac:	0c 94 65 08 	jmp	0x10ca	; 0x10ca <twi_attachSlaveRxEvent>

000014b0 <_ZN7TwoWire5beginEh>:
    14b0:	cf 93       	push	r28
    14b2:	c6 2f       	mov	r28, r22
    14b4:	0e 94 46 0a 	call	0x148c	; 0x148c <_ZN7TwoWire5beginEv>
    14b8:	8c 2f       	mov	r24, r28
    14ba:	cf 91       	pop	r28
    14bc:	0c 94 39 08 	jmp	0x1072	; 0x1072 <twi_setAddress>

000014c0 <_ZN7TwoWire5beginEi>:
    14c0:	0c 94 58 0a 	jmp	0x14b0	; 0x14b0 <_ZN7TwoWire5beginEh>

000014c4 <_ZN7TwoWire17beginTransmissionEh>:
    14c4:	81 e0       	ldi	r24, 0x01	; 1
    14c6:	80 93 0f 03 	sts	0x030F, r24	; 0x80030f <_ZN7TwoWire12transmittingE>
    14ca:	60 93 32 03 	sts	0x0332, r22	; 0x800332 <_ZN7TwoWire9txAddressE>
    14ce:	10 92 11 03 	sts	0x0311, r1	; 0x800311 <_ZN7TwoWire13txBufferIndexE>
    14d2:	10 92 10 03 	sts	0x0310, r1	; 0x800310 <_ZN7TwoWire14txBufferLengthE>
    14d6:	08 95       	ret

000014d8 <_ZN7TwoWire15endTransmissionEh>:
    14d8:	0f 93       	push	r16
    14da:	06 2f       	mov	r16, r22
    14dc:	21 e0       	ldi	r18, 0x01	; 1
    14de:	40 91 10 03 	lds	r20, 0x0310	; 0x800310 <_ZN7TwoWire14txBufferLengthE>
    14e2:	62 e1       	ldi	r22, 0x12	; 18
    14e4:	73 e0       	ldi	r23, 0x03	; 3
    14e6:	80 91 32 03 	lds	r24, 0x0332	; 0x800332 <_ZN7TwoWire9txAddressE>
    14ea:	0e 94 85 08 	call	0x110a	; 0x110a <twi_writeTo>
    14ee:	10 92 11 03 	sts	0x0311, r1	; 0x800311 <_ZN7TwoWire13txBufferIndexE>
    14f2:	10 92 10 03 	sts	0x0310, r1	; 0x800310 <_ZN7TwoWire14txBufferLengthE>
    14f6:	10 92 0f 03 	sts	0x030F, r1	; 0x80030f <_ZN7TwoWire12transmittingE>
    14fa:	0f 91       	pop	r16
    14fc:	08 95       	ret

000014fe <_ZN7TwoWire15endTransmissionEv>:
    14fe:	61 e0       	ldi	r22, 0x01	; 1
    1500:	0c 94 6c 0a 	jmp	0x14d8	; 0x14d8 <_ZN7TwoWire15endTransmissionEh>

00001504 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    1504:	8f ef       	ldi	r24, 0xFF	; 255
    1506:	92 e0       	ldi	r25, 0x02	; 2
    1508:	0c 94 36 0a 	jmp	0x146c	; 0x146c <_ZN7TwoWireC1Ev>

0000150c <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    150c:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    150e:	91 8d       	ldd	r25, Z+25	; 0x19
    1510:	22 8d       	ldd	r18, Z+26	; 0x1a
    1512:	89 2f       	mov	r24, r25
    1514:	90 e0       	ldi	r25, 0x00	; 0
    1516:	80 5c       	subi	r24, 0xC0	; 192
    1518:	9f 4f       	sbci	r25, 0xFF	; 255
    151a:	82 1b       	sub	r24, r18
    151c:	91 09       	sbc	r25, r1
}
    151e:	8f 73       	andi	r24, 0x3F	; 63
    1520:	99 27       	eor	r25, r25
    1522:	08 95       	ret

00001524 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    1524:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    1526:	91 8d       	ldd	r25, Z+25	; 0x19
    1528:	82 8d       	ldd	r24, Z+26	; 0x1a
    152a:	98 17       	cp	r25, r24
    152c:	31 f0       	breq	.+12     	; 0x153a <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    152e:	82 8d       	ldd	r24, Z+26	; 0x1a
    1530:	e8 0f       	add	r30, r24
    1532:	f1 1d       	adc	r31, r1
    1534:	85 8d       	ldd	r24, Z+29	; 0x1d
    1536:	90 e0       	ldi	r25, 0x00	; 0
    1538:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    153a:	8f ef       	ldi	r24, 0xFF	; 255
    153c:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    153e:	08 95       	ret

00001540 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    1540:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    1542:	91 8d       	ldd	r25, Z+25	; 0x19
    1544:	82 8d       	ldd	r24, Z+26	; 0x1a
    1546:	98 17       	cp	r25, r24
    1548:	61 f0       	breq	.+24     	; 0x1562 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    154a:	82 8d       	ldd	r24, Z+26	; 0x1a
    154c:	df 01       	movw	r26, r30
    154e:	a8 0f       	add	r26, r24
    1550:	b1 1d       	adc	r27, r1
    1552:	5d 96       	adiw	r26, 0x1d	; 29
    1554:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    1556:	92 8d       	ldd	r25, Z+26	; 0x1a
    1558:	9f 5f       	subi	r25, 0xFF	; 255
    155a:	9f 73       	andi	r25, 0x3F	; 63
    155c:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    155e:	90 e0       	ldi	r25, 0x00	; 0
    1560:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1562:	8f ef       	ldi	r24, 0xFF	; 255
    1564:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    1566:	08 95       	ret

00001568 <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    1568:	fc 01       	movw	r30, r24
    156a:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
    156c:	44 8d       	ldd	r20, Z+28	; 0x1c
    156e:	25 2f       	mov	r18, r21
    1570:	30 e0       	ldi	r19, 0x00	; 0
    1572:	84 2f       	mov	r24, r20
    1574:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    1576:	82 1b       	sub	r24, r18
    1578:	93 0b       	sbc	r25, r19
    157a:	54 17       	cp	r21, r20
    157c:	10 f0       	brcs	.+4      	; 0x1582 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    157e:	cf 96       	adiw	r24, 0x3f	; 63
    1580:	08 95       	ret
  return tail - head - 1;
    1582:	01 97       	sbiw	r24, 0x01	; 1
}
    1584:	08 95       	ret

00001586 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    1586:	8b e2       	ldi	r24, 0x2B	; 43
    1588:	9c e0       	ldi	r25, 0x0C	; 12
    158a:	89 2b       	or	r24, r25
    158c:	41 f0       	breq	.+16     	; 0x159e <_Z14serialEventRunv+0x18>
    158e:	80 e0       	ldi	r24, 0x00	; 0
    1590:	90 e0       	ldi	r25, 0x00	; 0
    1592:	89 2b       	or	r24, r25
    1594:	21 f0       	breq	.+8      	; 0x159e <_Z14serialEventRunv+0x18>
    1596:	0e 94 2b 0c 	call	0x1856	; 0x1856 <_Z17Serial0_availablev>
    159a:	81 11       	cpse	r24, r1
    159c:	0d c0       	rjmp	.+26     	; 0x15b8 <_Z14serialEventRunv+0x32>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    159e:	80 e0       	ldi	r24, 0x00	; 0
    15a0:	90 e0       	ldi	r25, 0x00	; 0
    15a2:	89 2b       	or	r24, r25
    15a4:	71 f0       	breq	.+28     	; 0x15c2 <_Z14serialEventRunv+0x3c>
    15a6:	80 e0       	ldi	r24, 0x00	; 0
    15a8:	90 e0       	ldi	r25, 0x00	; 0
    15aa:	89 2b       	or	r24, r25
    15ac:	51 f0       	breq	.+20     	; 0x15c2 <_Z14serialEventRunv+0x3c>
    15ae:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    15b2:	81 11       	cpse	r24, r1
    15b4:	04 c0       	rjmp	.+8      	; 0x15be <_Z14serialEventRunv+0x38>
    15b6:	08 95       	ret
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    15b8:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    15bc:	f0 cf       	rjmp	.-32     	; 0x159e <_Z14serialEventRunv+0x18>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    15be:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    15c2:	08 95       	ret

000015c4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    15c4:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    15c6:	84 8d       	ldd	r24, Z+28	; 0x1c
    15c8:	df 01       	movw	r26, r30
    15ca:	a8 0f       	add	r26, r24
    15cc:	b1 1d       	adc	r27, r1
    15ce:	a3 5a       	subi	r26, 0xA3	; 163
    15d0:	bf 4f       	sbci	r27, 0xFF	; 255
    15d2:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    15d4:	84 8d       	ldd	r24, Z+28	; 0x1c
    15d6:	90 e0       	ldi	r25, 0x00	; 0
    15d8:	01 96       	adiw	r24, 0x01	; 1
    15da:	8f 73       	andi	r24, 0x3F	; 63
    15dc:	99 27       	eor	r25, r25
    15de:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    15e0:	a6 89       	ldd	r26, Z+22	; 0x16
    15e2:	b7 89       	ldd	r27, Z+23	; 0x17
    15e4:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    15e6:	a0 89       	ldd	r26, Z+16	; 0x10
    15e8:	b1 89       	ldd	r27, Z+17	; 0x11
    15ea:	8c 91       	ld	r24, X
    15ec:	83 70       	andi	r24, 0x03	; 3
    15ee:	80 64       	ori	r24, 0x40	; 64
    15f0:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    15f2:	93 8d       	ldd	r25, Z+27	; 0x1b
    15f4:	84 8d       	ldd	r24, Z+28	; 0x1c
    15f6:	98 13       	cpse	r25, r24
    15f8:	06 c0       	rjmp	.+12     	; 0x1606 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    15fa:	02 88       	ldd	r0, Z+18	; 0x12
    15fc:	f3 89       	ldd	r31, Z+19	; 0x13
    15fe:	e0 2d       	mov	r30, r0
    1600:	80 81       	ld	r24, Z
    1602:	8f 7d       	andi	r24, 0xDF	; 223
    1604:	80 83       	st	Z, r24
    1606:	08 95       	ret

00001608 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    1608:	ef 92       	push	r14
    160a:	ff 92       	push	r15
    160c:	0f 93       	push	r16
    160e:	1f 93       	push	r17
    1610:	cf 93       	push	r28
    1612:	df 93       	push	r29
    1614:	ec 01       	movw	r28, r24
  _written = true;
    1616:	81 e0       	ldi	r24, 0x01	; 1
    1618:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    161a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    161c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    161e:	98 13       	cpse	r25, r24
    1620:	05 c0       	rjmp	.+10     	; 0x162c <_ZN14HardwareSerial5writeEh+0x24>
    1622:	e8 89       	ldd	r30, Y+16	; 0x10
    1624:	f9 89       	ldd	r31, Y+17	; 0x11
    1626:	80 81       	ld	r24, Z
    1628:	85 fd       	sbrc	r24, 5
    162a:	26 c0       	rjmp	.+76     	; 0x1678 <_ZN14HardwareSerial5writeEh+0x70>
    162c:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    162e:	0b 8d       	ldd	r16, Y+27	; 0x1b
    1630:	10 e0       	ldi	r17, 0x00	; 0
    1632:	0f 5f       	subi	r16, 0xFF	; 255
    1634:	1f 4f       	sbci	r17, 0xFF	; 255
    1636:	0f 73       	andi	r16, 0x3F	; 63
    1638:	11 27       	eor	r17, r17
    163a:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    163c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    163e:	e8 12       	cpse	r14, r24
    1640:	0c c0       	rjmp	.+24     	; 0x165a <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    1642:	0f b6       	in	r0, 0x3f	; 63
    1644:	07 fc       	sbrc	r0, 7
    1646:	fa cf       	rjmp	.-12     	; 0x163c <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    1648:	e8 89       	ldd	r30, Y+16	; 0x10
    164a:	f9 89       	ldd	r31, Y+17	; 0x11
    164c:	80 81       	ld	r24, Z
    164e:	85 ff       	sbrs	r24, 5
    1650:	f5 cf       	rjmp	.-22     	; 0x163c <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    1652:	ce 01       	movw	r24, r28
    1654:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1658:	f1 cf       	rjmp	.-30     	; 0x163c <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    165a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    165c:	fe 01       	movw	r30, r28
    165e:	e8 0f       	add	r30, r24
    1660:	f1 1d       	adc	r31, r1
    1662:	e3 5a       	subi	r30, 0xA3	; 163
    1664:	ff 4f       	sbci	r31, 0xFF	; 255
    1666:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    1668:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    166a:	f8 94       	cli
    _tx_buffer_head = i;
    166c:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
    166e:	ea 89       	ldd	r30, Y+18	; 0x12
    1670:	fb 89       	ldd	r31, Y+19	; 0x13
    1672:	80 81       	ld	r24, Z
    1674:	80 62       	ori	r24, 0x20	; 32
    1676:	0a c0       	rjmp	.+20     	; 0x168c <_ZN14HardwareSerial5writeEh+0x84>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    1678:	9f b7       	in	r25, 0x3f	; 63
    167a:	f8 94       	cli
      *_udr = c;
    167c:	ee 89       	ldd	r30, Y+22	; 0x16
    167e:	ff 89       	ldd	r31, Y+23	; 0x17
    1680:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    1682:	e8 89       	ldd	r30, Y+16	; 0x10
    1684:	f9 89       	ldd	r31, Y+17	; 0x11
    1686:	80 81       	ld	r24, Z
    1688:	83 70       	andi	r24, 0x03	; 3
    168a:	80 64       	ori	r24, 0x40	; 64
    168c:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    168e:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
    1690:	81 e0       	ldi	r24, 0x01	; 1
    1692:	90 e0       	ldi	r25, 0x00	; 0
    1694:	df 91       	pop	r29
    1696:	cf 91       	pop	r28
    1698:	1f 91       	pop	r17
    169a:	0f 91       	pop	r16
    169c:	ff 90       	pop	r15
    169e:	ef 90       	pop	r14
    16a0:	08 95       	ret

000016a2 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    16a2:	cf 93       	push	r28
    16a4:	df 93       	push	r29
    16a6:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    16a8:	88 8d       	ldd	r24, Y+24	; 0x18
    16aa:	88 23       	and	r24, r24
    16ac:	c9 f0       	breq	.+50     	; 0x16e0 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    16ae:	ea 89       	ldd	r30, Y+18	; 0x12
    16b0:	fb 89       	ldd	r31, Y+19	; 0x13
    16b2:	80 81       	ld	r24, Z
    16b4:	85 fd       	sbrc	r24, 5
    16b6:	05 c0       	rjmp	.+10     	; 0x16c2 <_ZN14HardwareSerial5flushEv+0x20>
    16b8:	a8 89       	ldd	r26, Y+16	; 0x10
    16ba:	b9 89       	ldd	r27, Y+17	; 0x11
    16bc:	8c 91       	ld	r24, X
    16be:	86 fd       	sbrc	r24, 6
    16c0:	0f c0       	rjmp	.+30     	; 0x16e0 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    16c2:	0f b6       	in	r0, 0x3f	; 63
    16c4:	07 fc       	sbrc	r0, 7
    16c6:	f5 cf       	rjmp	.-22     	; 0x16b2 <_ZN14HardwareSerial5flushEv+0x10>
    16c8:	80 81       	ld	r24, Z
    16ca:	85 ff       	sbrs	r24, 5
    16cc:	f2 cf       	rjmp	.-28     	; 0x16b2 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    16ce:	a8 89       	ldd	r26, Y+16	; 0x10
    16d0:	b9 89       	ldd	r27, Y+17	; 0x11
    16d2:	8c 91       	ld	r24, X
    16d4:	85 ff       	sbrs	r24, 5
    16d6:	ed cf       	rjmp	.-38     	; 0x16b2 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    16d8:	ce 01       	movw	r24, r28
    16da:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    16de:	e7 cf       	rjmp	.-50     	; 0x16ae <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    16e0:	df 91       	pop	r29
    16e2:	cf 91       	pop	r28
    16e4:	08 95       	ret

000016e6 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    16e6:	cf 92       	push	r12
    16e8:	df 92       	push	r13
    16ea:	ef 92       	push	r14
    16ec:	ff 92       	push	r15
    16ee:	1f 93       	push	r17
    16f0:	cf 93       	push	r28
    16f2:	df 93       	push	r29
    16f4:	ec 01       	movw	r28, r24
    16f6:	6a 01       	movw	r12, r20
    16f8:	7b 01       	movw	r14, r22
    16fa:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    16fc:	60 e8       	ldi	r22, 0x80	; 128
    16fe:	74 e8       	ldi	r23, 0x84	; 132
    1700:	8e e1       	ldi	r24, 0x1E	; 30
    1702:	90 e0       	ldi	r25, 0x00	; 0
    1704:	a7 01       	movw	r20, r14
    1706:	96 01       	movw	r18, r12
    1708:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <__udivmodsi4>
    170c:	da 01       	movw	r26, r20
    170e:	c9 01       	movw	r24, r18
    1710:	01 97       	sbiw	r24, 0x01	; 1
    1712:	a1 09       	sbc	r26, r1
    1714:	b1 09       	sbc	r27, r1
    1716:	b6 95       	lsr	r27
    1718:	a7 95       	ror	r26
    171a:	97 95       	ror	r25
    171c:	87 95       	ror	r24
    171e:	9c 01       	movw	r18, r24
  *_ucsra = 1 << U2X0;
    1720:	e8 89       	ldd	r30, Y+16	; 0x10
    1722:	f9 89       	ldd	r31, Y+17	; 0x11
    1724:	82 e0       	ldi	r24, 0x02	; 2
    1726:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1728:	21 15       	cp	r18, r1
    172a:	80 e1       	ldi	r24, 0x10	; 16
    172c:	38 07       	cpc	r19, r24
    172e:	a8 f0       	brcs	.+42     	; 0x175a <_ZN14HardwareSerial5beginEmh+0x74>
  {
    *_ucsra = 0;
    1730:	e8 89       	ldd	r30, Y+16	; 0x10
    1732:	f9 89       	ldd	r31, Y+17	; 0x11
    1734:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    1736:	60 e4       	ldi	r22, 0x40	; 64
    1738:	72 e4       	ldi	r23, 0x42	; 66
    173a:	8f e0       	ldi	r24, 0x0F	; 15
    173c:	90 e0       	ldi	r25, 0x00	; 0
    173e:	a7 01       	movw	r20, r14
    1740:	96 01       	movw	r18, r12
    1742:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <__udivmodsi4>
    1746:	da 01       	movw	r26, r20
    1748:	c9 01       	movw	r24, r18
    174a:	01 97       	sbiw	r24, 0x01	; 1
    174c:	a1 09       	sbc	r26, r1
    174e:	b1 09       	sbc	r27, r1
    1750:	b6 95       	lsr	r27
    1752:	a7 95       	ror	r26
    1754:	97 95       	ror	r25
    1756:	87 95       	ror	r24
    1758:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    175a:	ec 85       	ldd	r30, Y+12	; 0x0c
    175c:	fd 85       	ldd	r31, Y+13	; 0x0d
    175e:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    1760:	ee 85       	ldd	r30, Y+14	; 0x0e
    1762:	ff 85       	ldd	r31, Y+15	; 0x0f
    1764:	20 83       	st	Z, r18

  _written = false;
    1766:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    1768:	ec 89       	ldd	r30, Y+20	; 0x14
    176a:	fd 89       	ldd	r31, Y+21	; 0x15
    176c:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    176e:	ea 89       	ldd	r30, Y+18	; 0x12
    1770:	fb 89       	ldd	r31, Y+19	; 0x13
    1772:	80 81       	ld	r24, Z
    1774:	80 61       	ori	r24, 0x10	; 16
    1776:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    1778:	ea 89       	ldd	r30, Y+18	; 0x12
    177a:	fb 89       	ldd	r31, Y+19	; 0x13
    177c:	80 81       	ld	r24, Z
    177e:	88 60       	ori	r24, 0x08	; 8
    1780:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    1782:	ea 89       	ldd	r30, Y+18	; 0x12
    1784:	fb 89       	ldd	r31, Y+19	; 0x13
    1786:	80 81       	ld	r24, Z
    1788:	80 68       	ori	r24, 0x80	; 128
    178a:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    178c:	ea 89       	ldd	r30, Y+18	; 0x12
    178e:	fb 89       	ldd	r31, Y+19	; 0x13
    1790:	80 81       	ld	r24, Z
    1792:	8f 7d       	andi	r24, 0xDF	; 223
    1794:	80 83       	st	Z, r24
}
    1796:	df 91       	pop	r29
    1798:	cf 91       	pop	r28
    179a:	1f 91       	pop	r17
    179c:	ff 90       	pop	r15
    179e:	ef 90       	pop	r14
    17a0:	df 90       	pop	r13
    17a2:	cf 90       	pop	r12
    17a4:	08 95       	ret

000017a6 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    17a6:	1f 92       	push	r1
    17a8:	0f 92       	push	r0
    17aa:	0f b6       	in	r0, 0x3f	; 63
    17ac:	0f 92       	push	r0
    17ae:	11 24       	eor	r1, r1
    17b0:	2f 93       	push	r18
    17b2:	8f 93       	push	r24
    17b4:	9f 93       	push	r25
    17b6:	ef 93       	push	r30
    17b8:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    17ba:	e0 91 65 03 	lds	r30, 0x0365	; 0x800365 <Serial+0x10>
    17be:	f0 91 66 03 	lds	r31, 0x0366	; 0x800366 <Serial+0x11>
    17c2:	80 81       	ld	r24, Z
    17c4:	e0 91 6b 03 	lds	r30, 0x036B	; 0x80036b <Serial+0x16>
    17c8:	f0 91 6c 03 	lds	r31, 0x036C	; 0x80036c <Serial+0x17>
    17cc:	82 fd       	sbrc	r24, 2
    17ce:	12 c0       	rjmp	.+36     	; 0x17f4 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    17d0:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    17d2:	80 91 6e 03 	lds	r24, 0x036E	; 0x80036e <Serial+0x19>
    17d6:	8f 5f       	subi	r24, 0xFF	; 255
    17d8:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    17da:	20 91 6f 03 	lds	r18, 0x036F	; 0x80036f <Serial+0x1a>
    17de:	82 17       	cp	r24, r18
    17e0:	51 f0       	breq	.+20     	; 0x17f6 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    17e2:	e0 91 6e 03 	lds	r30, 0x036E	; 0x80036e <Serial+0x19>
    17e6:	f0 e0       	ldi	r31, 0x00	; 0
    17e8:	eb 5a       	subi	r30, 0xAB	; 171
    17ea:	fc 4f       	sbci	r31, 0xFC	; 252
    17ec:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    17ee:	80 93 6e 03 	sts	0x036E, r24	; 0x80036e <Serial+0x19>
    17f2:	01 c0       	rjmp	.+2      	; 0x17f6 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    17f4:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    17f6:	ff 91       	pop	r31
    17f8:	ef 91       	pop	r30
    17fa:	9f 91       	pop	r25
    17fc:	8f 91       	pop	r24
    17fe:	2f 91       	pop	r18
    1800:	0f 90       	pop	r0
    1802:	0f be       	out	0x3f, r0	; 63
    1804:	0f 90       	pop	r0
    1806:	1f 90       	pop	r1
    1808:	18 95       	reti

0000180a <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    180a:	1f 92       	push	r1
    180c:	0f 92       	push	r0
    180e:	0f b6       	in	r0, 0x3f	; 63
    1810:	0f 92       	push	r0
    1812:	11 24       	eor	r1, r1
    1814:	2f 93       	push	r18
    1816:	3f 93       	push	r19
    1818:	4f 93       	push	r20
    181a:	5f 93       	push	r21
    181c:	6f 93       	push	r22
    181e:	7f 93       	push	r23
    1820:	8f 93       	push	r24
    1822:	9f 93       	push	r25
    1824:	af 93       	push	r26
    1826:	bf 93       	push	r27
    1828:	ef 93       	push	r30
    182a:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    182c:	85 e5       	ldi	r24, 0x55	; 85
    182e:	93 e0       	ldi	r25, 0x03	; 3
    1830:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    1834:	ff 91       	pop	r31
    1836:	ef 91       	pop	r30
    1838:	bf 91       	pop	r27
    183a:	af 91       	pop	r26
    183c:	9f 91       	pop	r25
    183e:	8f 91       	pop	r24
    1840:	7f 91       	pop	r23
    1842:	6f 91       	pop	r22
    1844:	5f 91       	pop	r21
    1846:	4f 91       	pop	r20
    1848:	3f 91       	pop	r19
    184a:	2f 91       	pop	r18
    184c:	0f 90       	pop	r0
    184e:	0f be       	out	0x3f, r0	; 63
    1850:	0f 90       	pop	r0
    1852:	1f 90       	pop	r1
    1854:	18 95       	reti

00001856 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    1856:	85 e5       	ldi	r24, 0x55	; 85
    1858:	93 e0       	ldi	r25, 0x03	; 3
    185a:	0e 94 86 0a 	call	0x150c	; 0x150c <_ZN14HardwareSerial9availableEv>
    185e:	21 e0       	ldi	r18, 0x01	; 1
    1860:	89 2b       	or	r24, r25
    1862:	09 f4       	brne	.+2      	; 0x1866 <_Z17Serial0_availablev+0x10>
    1864:	20 e0       	ldi	r18, 0x00	; 0
}
    1866:	82 2f       	mov	r24, r18
    1868:	08 95       	ret

0000186a <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    186a:	e5 e5       	ldi	r30, 0x55	; 85
    186c:	f3 e0       	ldi	r31, 0x03	; 3
    186e:	13 82       	std	Z+3, r1	; 0x03
    1870:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    1872:	88 ee       	ldi	r24, 0xE8	; 232
    1874:	93 e0       	ldi	r25, 0x03	; 3
    1876:	a0 e0       	ldi	r26, 0x00	; 0
    1878:	b0 e0       	ldi	r27, 0x00	; 0
    187a:	84 83       	std	Z+4, r24	; 0x04
    187c:	95 83       	std	Z+5, r25	; 0x05
    187e:	a6 83       	std	Z+6, r26	; 0x06
    1880:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    1882:	89 e2       	ldi	r24, 0x29	; 41
    1884:	91 e0       	ldi	r25, 0x01	; 1
    1886:	91 83       	std	Z+1, r25	; 0x01
    1888:	80 83       	st	Z, r24
    188a:	85 ec       	ldi	r24, 0xC5	; 197
    188c:	90 e0       	ldi	r25, 0x00	; 0
    188e:	95 87       	std	Z+13, r25	; 0x0d
    1890:	84 87       	std	Z+12, r24	; 0x0c
    1892:	84 ec       	ldi	r24, 0xC4	; 196
    1894:	90 e0       	ldi	r25, 0x00	; 0
    1896:	97 87       	std	Z+15, r25	; 0x0f
    1898:	86 87       	std	Z+14, r24	; 0x0e
    189a:	80 ec       	ldi	r24, 0xC0	; 192
    189c:	90 e0       	ldi	r25, 0x00	; 0
    189e:	91 8b       	std	Z+17, r25	; 0x11
    18a0:	80 8b       	std	Z+16, r24	; 0x10
    18a2:	81 ec       	ldi	r24, 0xC1	; 193
    18a4:	90 e0       	ldi	r25, 0x00	; 0
    18a6:	93 8b       	std	Z+19, r25	; 0x13
    18a8:	82 8b       	std	Z+18, r24	; 0x12
    18aa:	82 ec       	ldi	r24, 0xC2	; 194
    18ac:	90 e0       	ldi	r25, 0x00	; 0
    18ae:	95 8b       	std	Z+21, r25	; 0x15
    18b0:	84 8b       	std	Z+20, r24	; 0x14
    18b2:	86 ec       	ldi	r24, 0xC6	; 198
    18b4:	90 e0       	ldi	r25, 0x00	; 0
    18b6:	97 8b       	std	Z+23, r25	; 0x17
    18b8:	86 8b       	std	Z+22, r24	; 0x16
    18ba:	11 8e       	std	Z+25, r1	; 0x19
    18bc:	12 8e       	std	Z+26, r1	; 0x1a
    18be:	13 8e       	std	Z+27, r1	; 0x1b
    18c0:	14 8e       	std	Z+28, r1	; 0x1c
    18c2:	08 95       	ret

000018c4 <initVariant>:
    18c4:	08 95       	ret

000018c6 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    18c6:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <init>

	initVariant();
    18ca:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    18ce:	0e 94 da 07 	call	0xfb4	; 0xfb4 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    18d2:	c3 ec       	ldi	r28, 0xC3	; 195
    18d4:	da e0       	ldi	r29, 0x0A	; 10
#endif
	
	setup();
    
	for (;;) {
		loop();
    18d6:	0e 94 86 07 	call	0xf0c	; 0xf0c <loop>
		if (serialEventRun) serialEventRun();
    18da:	20 97       	sbiw	r28, 0x00	; 0
    18dc:	e1 f3       	breq	.-8      	; 0x18d6 <main+0x10>
    18de:	0e 94 c3 0a 	call	0x1586	; 0x1586 <_Z14serialEventRunv>
    18e2:	f9 cf       	rjmp	.-14     	; 0x18d6 <main+0x10>

000018e4 <_ZN5Print5writeEPKhj>:
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
    virtual size_t write(const uint8_t *buffer, size_t size);
    size_t write(const char *buffer, size_t size) {
      return write((const uint8_t *)buffer, size);
    18e4:	cf 92       	push	r12
    18e6:	df 92       	push	r13
    18e8:	ef 92       	push	r14
    18ea:	ff 92       	push	r15
    18ec:	0f 93       	push	r16
    18ee:	1f 93       	push	r17
    18f0:	cf 93       	push	r28
    18f2:	df 93       	push	r29
    18f4:	6c 01       	movw	r12, r24
    18f6:	7a 01       	movw	r14, r20
    18f8:	8b 01       	movw	r16, r22
    18fa:	c0 e0       	ldi	r28, 0x00	; 0
    18fc:	d0 e0       	ldi	r29, 0x00	; 0
    18fe:	ce 15       	cp	r28, r14
    1900:	df 05       	cpc	r29, r15
    1902:	81 f0       	breq	.+32     	; 0x1924 <_ZN5Print5writeEPKhj+0x40>
    1904:	d8 01       	movw	r26, r16
    1906:	6d 91       	ld	r22, X+
    1908:	8d 01       	movw	r16, r26
    190a:	d6 01       	movw	r26, r12
    190c:	ed 91       	ld	r30, X+
    190e:	fc 91       	ld	r31, X
    1910:	01 90       	ld	r0, Z+
    1912:	f0 81       	ld	r31, Z
    1914:	e0 2d       	mov	r30, r0
    1916:	c6 01       	movw	r24, r12
    1918:	09 95       	icall
    191a:	89 2b       	or	r24, r25
    191c:	11 f0       	breq	.+4      	; 0x1922 <_ZN5Print5writeEPKhj+0x3e>
    191e:	21 96       	adiw	r28, 0x01	; 1
    1920:	ee cf       	rjmp	.-36     	; 0x18fe <_ZN5Print5writeEPKhj+0x1a>
    1922:	7e 01       	movw	r14, r28
    1924:	c7 01       	movw	r24, r14
    1926:	df 91       	pop	r29
    1928:	cf 91       	pop	r28
    192a:	1f 91       	pop	r17
    192c:	0f 91       	pop	r16
    192e:	ff 90       	pop	r15
    1930:	ef 90       	pop	r14
    1932:	df 90       	pop	r13
    1934:	cf 90       	pop	r12
    1936:	08 95       	ret

00001938 <_ZN5Print5writeEPKc>:
    1938:	61 15       	cp	r22, r1
    193a:	71 05       	cpc	r23, r1
    193c:	79 f0       	breq	.+30     	; 0x195c <_ZN5Print5writeEPKc+0x24>
    193e:	fb 01       	movw	r30, r22
    1940:	01 90       	ld	r0, Z+
    1942:	00 20       	and	r0, r0
    1944:	e9 f7       	brne	.-6      	; 0x1940 <_ZN5Print5writeEPKc+0x8>
    1946:	31 97       	sbiw	r30, 0x01	; 1
    1948:	af 01       	movw	r20, r30
    194a:	46 1b       	sub	r20, r22
    194c:	57 0b       	sbc	r21, r23
    194e:	dc 01       	movw	r26, r24
    1950:	ed 91       	ld	r30, X+
    1952:	fc 91       	ld	r31, X
    1954:	02 80       	ldd	r0, Z+2	; 0x02
    1956:	f3 81       	ldd	r31, Z+3	; 0x03
    1958:	e0 2d       	mov	r30, r0
    195a:	09 94       	ijmp
    195c:	80 e0       	ldi	r24, 0x00	; 0
    195e:	90 e0       	ldi	r25, 0x00	; 0
    1960:	08 95       	ret

00001962 <_ZN5Print5printEPKc>:
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    1962:	0c 94 9c 0c 	jmp	0x1938	; 0x1938 <_ZN5Print5writeEPKc>

00001966 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    1966:	1f 92       	push	r1
    1968:	0f 92       	push	r0
    196a:	0f b6       	in	r0, 0x3f	; 63
    196c:	0f 92       	push	r0
    196e:	11 24       	eor	r1, r1
    1970:	2f 93       	push	r18
    1972:	3f 93       	push	r19
    1974:	8f 93       	push	r24
    1976:	9f 93       	push	r25
    1978:	af 93       	push	r26
    197a:	bf 93       	push	r27
    197c:	80 91 f3 03 	lds	r24, 0x03F3	; 0x8003f3 <timer0_millis>
    1980:	90 91 f4 03 	lds	r25, 0x03F4	; 0x8003f4 <timer0_millis+0x1>
    1984:	a0 91 f5 03 	lds	r26, 0x03F5	; 0x8003f5 <timer0_millis+0x2>
    1988:	b0 91 f6 03 	lds	r27, 0x03F6	; 0x8003f6 <timer0_millis+0x3>
    198c:	30 91 f2 03 	lds	r19, 0x03F2	; 0x8003f2 <timer0_fract>
    1990:	26 e0       	ldi	r18, 0x06	; 6
    1992:	23 0f       	add	r18, r19
    1994:	2d 37       	cpi	r18, 0x7D	; 125
    1996:	20 f4       	brcc	.+8      	; 0x19a0 <__vector_16+0x3a>
    1998:	02 96       	adiw	r24, 0x02	; 2
    199a:	a1 1d       	adc	r26, r1
    199c:	b1 1d       	adc	r27, r1
    199e:	05 c0       	rjmp	.+10     	; 0x19aa <__vector_16+0x44>
    19a0:	29 e8       	ldi	r18, 0x89	; 137
    19a2:	23 0f       	add	r18, r19
    19a4:	03 96       	adiw	r24, 0x03	; 3
    19a6:	a1 1d       	adc	r26, r1
    19a8:	b1 1d       	adc	r27, r1
    19aa:	20 93 f2 03 	sts	0x03F2, r18	; 0x8003f2 <timer0_fract>
    19ae:	80 93 f3 03 	sts	0x03F3, r24	; 0x8003f3 <timer0_millis>
    19b2:	90 93 f4 03 	sts	0x03F4, r25	; 0x8003f4 <timer0_millis+0x1>
    19b6:	a0 93 f5 03 	sts	0x03F5, r26	; 0x8003f5 <timer0_millis+0x2>
    19ba:	b0 93 f6 03 	sts	0x03F6, r27	; 0x8003f6 <timer0_millis+0x3>
    19be:	80 91 f7 03 	lds	r24, 0x03F7	; 0x8003f7 <timer0_overflow_count>
    19c2:	90 91 f8 03 	lds	r25, 0x03F8	; 0x8003f8 <timer0_overflow_count+0x1>
    19c6:	a0 91 f9 03 	lds	r26, 0x03F9	; 0x8003f9 <timer0_overflow_count+0x2>
    19ca:	b0 91 fa 03 	lds	r27, 0x03FA	; 0x8003fa <timer0_overflow_count+0x3>
    19ce:	01 96       	adiw	r24, 0x01	; 1
    19d0:	a1 1d       	adc	r26, r1
    19d2:	b1 1d       	adc	r27, r1
    19d4:	80 93 f7 03 	sts	0x03F7, r24	; 0x8003f7 <timer0_overflow_count>
    19d8:	90 93 f8 03 	sts	0x03F8, r25	; 0x8003f8 <timer0_overflow_count+0x1>
    19dc:	a0 93 f9 03 	sts	0x03F9, r26	; 0x8003f9 <timer0_overflow_count+0x2>
    19e0:	b0 93 fa 03 	sts	0x03FA, r27	; 0x8003fa <timer0_overflow_count+0x3>
    19e4:	bf 91       	pop	r27
    19e6:	af 91       	pop	r26
    19e8:	9f 91       	pop	r25
    19ea:	8f 91       	pop	r24
    19ec:	3f 91       	pop	r19
    19ee:	2f 91       	pop	r18
    19f0:	0f 90       	pop	r0
    19f2:	0f be       	out	0x3f, r0	; 63
    19f4:	0f 90       	pop	r0
    19f6:	1f 90       	pop	r1
    19f8:	18 95       	reti

000019fa <micros>:
    19fa:	3f b7       	in	r19, 0x3f	; 63
    19fc:	f8 94       	cli
    19fe:	80 91 f7 03 	lds	r24, 0x03F7	; 0x8003f7 <timer0_overflow_count>
    1a02:	90 91 f8 03 	lds	r25, 0x03F8	; 0x8003f8 <timer0_overflow_count+0x1>
    1a06:	a0 91 f9 03 	lds	r26, 0x03F9	; 0x8003f9 <timer0_overflow_count+0x2>
    1a0a:	b0 91 fa 03 	lds	r27, 0x03FA	; 0x8003fa <timer0_overflow_count+0x3>
    1a0e:	26 b5       	in	r18, 0x26	; 38
    1a10:	a8 9b       	sbis	0x15, 0	; 21
    1a12:	05 c0       	rjmp	.+10     	; 0x1a1e <micros+0x24>
    1a14:	2f 3f       	cpi	r18, 0xFF	; 255
    1a16:	19 f0       	breq	.+6      	; 0x1a1e <micros+0x24>
    1a18:	01 96       	adiw	r24, 0x01	; 1
    1a1a:	a1 1d       	adc	r26, r1
    1a1c:	b1 1d       	adc	r27, r1
    1a1e:	3f bf       	out	0x3f, r19	; 63
    1a20:	ba 2f       	mov	r27, r26
    1a22:	a9 2f       	mov	r26, r25
    1a24:	98 2f       	mov	r25, r24
    1a26:	88 27       	eor	r24, r24
    1a28:	82 0f       	add	r24, r18
    1a2a:	91 1d       	adc	r25, r1
    1a2c:	a1 1d       	adc	r26, r1
    1a2e:	b1 1d       	adc	r27, r1
    1a30:	bc 01       	movw	r22, r24
    1a32:	cd 01       	movw	r24, r26
    1a34:	43 e0       	ldi	r20, 0x03	; 3
    1a36:	66 0f       	add	r22, r22
    1a38:	77 1f       	adc	r23, r23
    1a3a:	88 1f       	adc	r24, r24
    1a3c:	99 1f       	adc	r25, r25
    1a3e:	4a 95       	dec	r20
    1a40:	d1 f7       	brne	.-12     	; 0x1a36 <micros+0x3c>
    1a42:	08 95       	ret

00001a44 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    1a44:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    1a46:	84 b5       	in	r24, 0x24	; 36
    1a48:	82 60       	ori	r24, 0x02	; 2
    1a4a:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    1a4c:	84 b5       	in	r24, 0x24	; 36
    1a4e:	81 60       	ori	r24, 0x01	; 1
    1a50:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    1a52:	85 b5       	in	r24, 0x25	; 37
    1a54:	82 60       	ori	r24, 0x02	; 2
    1a56:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    1a58:	85 b5       	in	r24, 0x25	; 37
    1a5a:	81 60       	ori	r24, 0x01	; 1
    1a5c:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    1a5e:	ee e6       	ldi	r30, 0x6E	; 110
    1a60:	f0 e0       	ldi	r31, 0x00	; 0
    1a62:	80 81       	ld	r24, Z
    1a64:	81 60       	ori	r24, 0x01	; 1
    1a66:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    1a68:	e1 e8       	ldi	r30, 0x81	; 129
    1a6a:	f0 e0       	ldi	r31, 0x00	; 0
    1a6c:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    1a6e:	80 81       	ld	r24, Z
    1a70:	82 60       	ori	r24, 0x02	; 2
    1a72:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    1a74:	80 81       	ld	r24, Z
    1a76:	81 60       	ori	r24, 0x01	; 1
    1a78:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    1a7a:	e0 e8       	ldi	r30, 0x80	; 128
    1a7c:	f0 e0       	ldi	r31, 0x00	; 0
    1a7e:	80 81       	ld	r24, Z
    1a80:	81 60       	ori	r24, 0x01	; 1
    1a82:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    1a84:	e1 eb       	ldi	r30, 0xB1	; 177
    1a86:	f0 e0       	ldi	r31, 0x00	; 0
    1a88:	80 81       	ld	r24, Z
    1a8a:	84 60       	ori	r24, 0x04	; 4
    1a8c:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    1a8e:	e0 eb       	ldi	r30, 0xB0	; 176
    1a90:	f0 e0       	ldi	r31, 0x00	; 0
    1a92:	80 81       	ld	r24, Z
    1a94:	81 60       	ori	r24, 0x01	; 1
    1a96:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    1a98:	e1 e9       	ldi	r30, 0x91	; 145
    1a9a:	f0 e0       	ldi	r31, 0x00	; 0
    1a9c:	80 81       	ld	r24, Z
    1a9e:	82 60       	ori	r24, 0x02	; 2
    1aa0:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
    1aa2:	80 81       	ld	r24, Z
    1aa4:	81 60       	ori	r24, 0x01	; 1
    1aa6:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    1aa8:	e0 e9       	ldi	r30, 0x90	; 144
    1aaa:	f0 e0       	ldi	r31, 0x00	; 0
    1aac:	80 81       	ld	r24, Z
    1aae:	81 60       	ori	r24, 0x01	; 1
    1ab0:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
    1ab2:	e1 ea       	ldi	r30, 0xA1	; 161
    1ab4:	f0 e0       	ldi	r31, 0x00	; 0
    1ab6:	80 81       	ld	r24, Z
    1ab8:	82 60       	ori	r24, 0x02	; 2
    1aba:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
    1abc:	80 81       	ld	r24, Z
    1abe:	81 60       	ori	r24, 0x01	; 1
    1ac0:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
    1ac2:	e0 ea       	ldi	r30, 0xA0	; 160
    1ac4:	f0 e0       	ldi	r31, 0x00	; 0
    1ac6:	80 81       	ld	r24, Z
    1ac8:	81 60       	ori	r24, 0x01	; 1
    1aca:	80 83       	st	Z, r24
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
		sbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#elif F_CPU >= 8000000 // 8 MHz / 64 = 125 KHz
		sbi(ADCSRA, ADPS2);
    1acc:	ea e7       	ldi	r30, 0x7A	; 122
    1ace:	f0 e0       	ldi	r31, 0x00	; 0
    1ad0:	80 81       	ld	r24, Z
    1ad2:	84 60       	ori	r24, 0x04	; 4
    1ad4:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    1ad6:	80 81       	ld	r24, Z
    1ad8:	82 60       	ori	r24, 0x02	; 2
    1ada:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS0);
    1adc:	80 81       	ld	r24, Z
    1ade:	8e 7f       	andi	r24, 0xFE	; 254
    1ae0:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    1ae2:	80 81       	ld	r24, Z
    1ae4:	80 68       	ori	r24, 0x80	; 128
    1ae6:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    1ae8:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    1aec:	08 95       	ret

00001aee <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    1aee:	90 e0       	ldi	r25, 0x00	; 0
    1af0:	fc 01       	movw	r30, r24
    1af2:	31 97       	sbiw	r30, 0x01	; 1
    1af4:	ed 30       	cpi	r30, 0x0D	; 13
    1af6:	f1 05       	cpc	r31, r1
    1af8:	90 f5       	brcc	.+100    	; 0x1b5e <turnOffPWM+0x70>
    1afa:	e6 5a       	subi	r30, 0xA6	; 166
    1afc:	ff 4f       	sbci	r31, 0xFF	; 255
    1afe:	0c 94 3d 0e 	jmp	0x1c7a	; 0x1c7a <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    1b02:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    1b06:	8f 77       	andi	r24, 0x7F	; 127
    1b08:	03 c0       	rjmp	.+6      	; 0x1b10 <turnOffPWM+0x22>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1b0a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    1b0e:	8f 7d       	andi	r24, 0xDF	; 223
    1b10:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    1b14:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    1b16:	84 b5       	in	r24, 0x24	; 36
    1b18:	8f 77       	andi	r24, 0x7F	; 127
    1b1a:	02 c0       	rjmp	.+4      	; 0x1b20 <turnOffPWM+0x32>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    1b1c:	84 b5       	in	r24, 0x24	; 36
    1b1e:	8f 7d       	andi	r24, 0xDF	; 223
    1b20:	84 bd       	out	0x24, r24	; 36
    1b22:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    1b24:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    1b28:	8f 77       	andi	r24, 0x7F	; 127
    1b2a:	03 c0       	rjmp	.+6      	; 0x1b32 <turnOffPWM+0x44>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    1b2c:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    1b30:	8f 7d       	andi	r24, 0xDF	; 223
    1b32:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    1b36:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
    1b38:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7f8090>
    1b3c:	8f 77       	andi	r24, 0x7F	; 127
    1b3e:	03 c0       	rjmp	.+6      	; 0x1b46 <turnOffPWM+0x58>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    1b40:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7f8090>
    1b44:	8f 7d       	andi	r24, 0xDF	; 223
    1b46:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7f8090>
    1b4a:	08 95       	ret
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
    1b4c:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7f80a0>
    1b50:	8f 77       	andi	r24, 0x7F	; 127
    1b52:	03 c0       	rjmp	.+6      	; 0x1b5a <turnOffPWM+0x6c>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
    1b54:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7f80a0>
    1b58:	8f 7d       	andi	r24, 0xDF	; 223
    1b5a:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7f80a0>
    1b5e:	08 95       	ret

00001b60 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    1b60:	cf 93       	push	r28
    1b62:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    1b64:	90 e0       	ldi	r25, 0x00	; 0
    1b66:	fc 01       	movw	r30, r24
    1b68:	ee 5c       	subi	r30, 0xCE	; 206
    1b6a:	fe 4f       	sbci	r31, 0xFE	; 254
    1b6c:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    1b6e:	fc 01       	movw	r30, r24
    1b70:	ea 5b       	subi	r30, 0xBA	; 186
    1b72:	fe 4f       	sbci	r31, 0xFE	; 254
    1b74:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    1b76:	88 23       	and	r24, r24
    1b78:	61 f1       	breq	.+88     	; 0x1bd2 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    1b7a:	90 e0       	ldi	r25, 0x00	; 0
    1b7c:	88 0f       	add	r24, r24
    1b7e:	99 1f       	adc	r25, r25
    1b80:	fc 01       	movw	r30, r24
    1b82:	ec 59       	subi	r30, 0x9C	; 156
    1b84:	fe 4f       	sbci	r31, 0xFE	; 254
    1b86:	c5 91       	lpm	r28, Z+
    1b88:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    1b8a:	fc 01       	movw	r30, r24
    1b8c:	e6 5a       	subi	r30, 0xA6	; 166
    1b8e:	fe 4f       	sbci	r31, 0xFE	; 254
    1b90:	a5 91       	lpm	r26, Z+
    1b92:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    1b94:	61 11       	cpse	r22, r1
    1b96:	09 c0       	rjmp	.+18     	; 0x1baa <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    1b98:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1b9a:	f8 94       	cli
		*reg &= ~bit;
    1b9c:	88 81       	ld	r24, Y
    1b9e:	20 95       	com	r18
    1ba0:	82 23       	and	r24, r18
    1ba2:	88 83       	st	Y, r24
		*out &= ~bit;
    1ba4:	ec 91       	ld	r30, X
    1ba6:	2e 23       	and	r18, r30
    1ba8:	0b c0       	rjmp	.+22     	; 0x1bc0 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    1baa:	62 30       	cpi	r22, 0x02	; 2
    1bac:	61 f4       	brne	.+24     	; 0x1bc6 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    1bae:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1bb0:	f8 94       	cli
		*reg &= ~bit;
    1bb2:	88 81       	ld	r24, Y
    1bb4:	32 2f       	mov	r19, r18
    1bb6:	30 95       	com	r19
    1bb8:	83 23       	and	r24, r19
    1bba:	88 83       	st	Y, r24
		*out |= bit;
    1bbc:	ec 91       	ld	r30, X
    1bbe:	2e 2b       	or	r18, r30
    1bc0:	2c 93       	st	X, r18
		SREG = oldSREG;
    1bc2:	9f bf       	out	0x3f, r25	; 63
    1bc4:	06 c0       	rjmp	.+12     	; 0x1bd2 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    1bc6:	8f b7       	in	r24, 0x3f	; 63
                cli();
    1bc8:	f8 94       	cli
		*reg |= bit;
    1bca:	e8 81       	ld	r30, Y
    1bcc:	2e 2b       	or	r18, r30
    1bce:	28 83       	st	Y, r18
		SREG = oldSREG;
    1bd0:	8f bf       	out	0x3f, r24	; 63
	}
}
    1bd2:	df 91       	pop	r29
    1bd4:	cf 91       	pop	r28
    1bd6:	08 95       	ret

00001bd8 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    1bd8:	1f 93       	push	r17
    1bda:	cf 93       	push	r28
    1bdc:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    1bde:	28 2f       	mov	r18, r24
    1be0:	30 e0       	ldi	r19, 0x00	; 0
    1be2:	f9 01       	movw	r30, r18
    1be4:	e2 5e       	subi	r30, 0xE2	; 226
    1be6:	fe 4f       	sbci	r31, 0xFE	; 254
    1be8:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    1bea:	f9 01       	movw	r30, r18
    1bec:	ee 5c       	subi	r30, 0xCE	; 206
    1bee:	fe 4f       	sbci	r31, 0xFE	; 254
    1bf0:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    1bf2:	f9 01       	movw	r30, r18
    1bf4:	ea 5b       	subi	r30, 0xBA	; 186
    1bf6:	fe 4f       	sbci	r31, 0xFE	; 254
    1bf8:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    1bfa:	cc 23       	and	r28, r28
    1bfc:	c1 f0       	breq	.+48     	; 0x1c2e <digitalWrite+0x56>
    1bfe:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1c00:	81 11       	cpse	r24, r1
    1c02:	0e 94 77 0d 	call	0x1aee	; 0x1aee <turnOffPWM>

	out = portOutputRegister(port);
    1c06:	ec 2f       	mov	r30, r28
    1c08:	f0 e0       	ldi	r31, 0x00	; 0
    1c0a:	ee 0f       	add	r30, r30
    1c0c:	ff 1f       	adc	r31, r31
    1c0e:	e6 5a       	subi	r30, 0xA6	; 166
    1c10:	fe 4f       	sbci	r31, 0xFE	; 254
    1c12:	a5 91       	lpm	r26, Z+
    1c14:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    1c16:	9f b7       	in	r25, 0x3f	; 63
	cli();
    1c18:	f8 94       	cli

	if (val == LOW) {
    1c1a:	11 11       	cpse	r17, r1
    1c1c:	04 c0       	rjmp	.+8      	; 0x1c26 <digitalWrite+0x4e>
		*out &= ~bit;
    1c1e:	8c 91       	ld	r24, X
    1c20:	d0 95       	com	r29
    1c22:	d8 23       	and	r29, r24
    1c24:	02 c0       	rjmp	.+4      	; 0x1c2a <digitalWrite+0x52>
	} else {
		*out |= bit;
    1c26:	ec 91       	ld	r30, X
    1c28:	de 2b       	or	r29, r30
    1c2a:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    1c2c:	9f bf       	out	0x3f, r25	; 63
}
    1c2e:	df 91       	pop	r29
    1c30:	cf 91       	pop	r28
    1c32:	1f 91       	pop	r17
    1c34:	08 95       	ret

00001c36 <__udivmodsi4>:
    1c36:	a1 e2       	ldi	r26, 0x21	; 33
    1c38:	1a 2e       	mov	r1, r26
    1c3a:	aa 1b       	sub	r26, r26
    1c3c:	bb 1b       	sub	r27, r27
    1c3e:	fd 01       	movw	r30, r26
    1c40:	0d c0       	rjmp	.+26     	; 0x1c5c <__udivmodsi4_ep>

00001c42 <__udivmodsi4_loop>:
    1c42:	aa 1f       	adc	r26, r26
    1c44:	bb 1f       	adc	r27, r27
    1c46:	ee 1f       	adc	r30, r30
    1c48:	ff 1f       	adc	r31, r31
    1c4a:	a2 17       	cp	r26, r18
    1c4c:	b3 07       	cpc	r27, r19
    1c4e:	e4 07       	cpc	r30, r20
    1c50:	f5 07       	cpc	r31, r21
    1c52:	20 f0       	brcs	.+8      	; 0x1c5c <__udivmodsi4_ep>
    1c54:	a2 1b       	sub	r26, r18
    1c56:	b3 0b       	sbc	r27, r19
    1c58:	e4 0b       	sbc	r30, r20
    1c5a:	f5 0b       	sbc	r31, r21

00001c5c <__udivmodsi4_ep>:
    1c5c:	66 1f       	adc	r22, r22
    1c5e:	77 1f       	adc	r23, r23
    1c60:	88 1f       	adc	r24, r24
    1c62:	99 1f       	adc	r25, r25
    1c64:	1a 94       	dec	r1
    1c66:	69 f7       	brne	.-38     	; 0x1c42 <__udivmodsi4_loop>
    1c68:	60 95       	com	r22
    1c6a:	70 95       	com	r23
    1c6c:	80 95       	com	r24
    1c6e:	90 95       	com	r25
    1c70:	9b 01       	movw	r18, r22
    1c72:	ac 01       	movw	r20, r24
    1c74:	bd 01       	movw	r22, r26
    1c76:	cf 01       	movw	r24, r30
    1c78:	08 95       	ret

00001c7a <__tablejump2__>:
    1c7a:	ee 0f       	add	r30, r30
    1c7c:	ff 1f       	adc	r31, r31
    1c7e:	05 90       	lpm	r0, Z+
    1c80:	f4 91       	lpm	r31, Z
    1c82:	e0 2d       	mov	r30, r0
    1c84:	09 94       	ijmp

00001c86 <malloc>:
    1c86:	0f 93       	push	r16
    1c88:	1f 93       	push	r17
    1c8a:	cf 93       	push	r28
    1c8c:	df 93       	push	r29
    1c8e:	82 30       	cpi	r24, 0x02	; 2
    1c90:	91 05       	cpc	r25, r1
    1c92:	10 f4       	brcc	.+4      	; 0x1c98 <malloc+0x12>
    1c94:	82 e0       	ldi	r24, 0x02	; 2
    1c96:	90 e0       	ldi	r25, 0x00	; 0
    1c98:	e0 91 fd 03 	lds	r30, 0x03FD	; 0x8003fd <__flp>
    1c9c:	f0 91 fe 03 	lds	r31, 0x03FE	; 0x8003fe <__flp+0x1>
    1ca0:	20 e0       	ldi	r18, 0x00	; 0
    1ca2:	30 e0       	ldi	r19, 0x00	; 0
    1ca4:	a0 e0       	ldi	r26, 0x00	; 0
    1ca6:	b0 e0       	ldi	r27, 0x00	; 0
    1ca8:	30 97       	sbiw	r30, 0x00	; 0
    1caa:	19 f1       	breq	.+70     	; 0x1cf2 <malloc+0x6c>
    1cac:	40 81       	ld	r20, Z
    1cae:	51 81       	ldd	r21, Z+1	; 0x01
    1cb0:	02 81       	ldd	r16, Z+2	; 0x02
    1cb2:	13 81       	ldd	r17, Z+3	; 0x03
    1cb4:	48 17       	cp	r20, r24
    1cb6:	59 07       	cpc	r21, r25
    1cb8:	c8 f0       	brcs	.+50     	; 0x1cec <malloc+0x66>
    1cba:	84 17       	cp	r24, r20
    1cbc:	95 07       	cpc	r25, r21
    1cbe:	69 f4       	brne	.+26     	; 0x1cda <malloc+0x54>
    1cc0:	10 97       	sbiw	r26, 0x00	; 0
    1cc2:	31 f0       	breq	.+12     	; 0x1cd0 <malloc+0x4a>
    1cc4:	12 96       	adiw	r26, 0x02	; 2
    1cc6:	0c 93       	st	X, r16
    1cc8:	12 97       	sbiw	r26, 0x02	; 2
    1cca:	13 96       	adiw	r26, 0x03	; 3
    1ccc:	1c 93       	st	X, r17
    1cce:	27 c0       	rjmp	.+78     	; 0x1d1e <malloc+0x98>
    1cd0:	00 93 fd 03 	sts	0x03FD, r16	; 0x8003fd <__flp>
    1cd4:	10 93 fe 03 	sts	0x03FE, r17	; 0x8003fe <__flp+0x1>
    1cd8:	22 c0       	rjmp	.+68     	; 0x1d1e <malloc+0x98>
    1cda:	21 15       	cp	r18, r1
    1cdc:	31 05       	cpc	r19, r1
    1cde:	19 f0       	breq	.+6      	; 0x1ce6 <malloc+0x60>
    1ce0:	42 17       	cp	r20, r18
    1ce2:	53 07       	cpc	r21, r19
    1ce4:	18 f4       	brcc	.+6      	; 0x1cec <malloc+0x66>
    1ce6:	9a 01       	movw	r18, r20
    1ce8:	bd 01       	movw	r22, r26
    1cea:	ef 01       	movw	r28, r30
    1cec:	df 01       	movw	r26, r30
    1cee:	f8 01       	movw	r30, r16
    1cf0:	db cf       	rjmp	.-74     	; 0x1ca8 <malloc+0x22>
    1cf2:	21 15       	cp	r18, r1
    1cf4:	31 05       	cpc	r19, r1
    1cf6:	f9 f0       	breq	.+62     	; 0x1d36 <malloc+0xb0>
    1cf8:	28 1b       	sub	r18, r24
    1cfa:	39 0b       	sbc	r19, r25
    1cfc:	24 30       	cpi	r18, 0x04	; 4
    1cfe:	31 05       	cpc	r19, r1
    1d00:	80 f4       	brcc	.+32     	; 0x1d22 <malloc+0x9c>
    1d02:	8a 81       	ldd	r24, Y+2	; 0x02
    1d04:	9b 81       	ldd	r25, Y+3	; 0x03
    1d06:	61 15       	cp	r22, r1
    1d08:	71 05       	cpc	r23, r1
    1d0a:	21 f0       	breq	.+8      	; 0x1d14 <malloc+0x8e>
    1d0c:	fb 01       	movw	r30, r22
    1d0e:	93 83       	std	Z+3, r25	; 0x03
    1d10:	82 83       	std	Z+2, r24	; 0x02
    1d12:	04 c0       	rjmp	.+8      	; 0x1d1c <malloc+0x96>
    1d14:	90 93 fe 03 	sts	0x03FE, r25	; 0x8003fe <__flp+0x1>
    1d18:	80 93 fd 03 	sts	0x03FD, r24	; 0x8003fd <__flp>
    1d1c:	fe 01       	movw	r30, r28
    1d1e:	32 96       	adiw	r30, 0x02	; 2
    1d20:	44 c0       	rjmp	.+136    	; 0x1daa <malloc+0x124>
    1d22:	fe 01       	movw	r30, r28
    1d24:	e2 0f       	add	r30, r18
    1d26:	f3 1f       	adc	r31, r19
    1d28:	81 93       	st	Z+, r24
    1d2a:	91 93       	st	Z+, r25
    1d2c:	22 50       	subi	r18, 0x02	; 2
    1d2e:	31 09       	sbc	r19, r1
    1d30:	39 83       	std	Y+1, r19	; 0x01
    1d32:	28 83       	st	Y, r18
    1d34:	3a c0       	rjmp	.+116    	; 0x1daa <malloc+0x124>
    1d36:	20 91 fb 03 	lds	r18, 0x03FB	; 0x8003fb <__brkval>
    1d3a:	30 91 fc 03 	lds	r19, 0x03FC	; 0x8003fc <__brkval+0x1>
    1d3e:	23 2b       	or	r18, r19
    1d40:	41 f4       	brne	.+16     	; 0x1d52 <malloc+0xcc>
    1d42:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    1d46:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    1d4a:	30 93 fc 03 	sts	0x03FC, r19	; 0x8003fc <__brkval+0x1>
    1d4e:	20 93 fb 03 	sts	0x03FB, r18	; 0x8003fb <__brkval>
    1d52:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1d56:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    1d5a:	21 15       	cp	r18, r1
    1d5c:	31 05       	cpc	r19, r1
    1d5e:	41 f4       	brne	.+16     	; 0x1d70 <malloc+0xea>
    1d60:	2d b7       	in	r18, 0x3d	; 61
    1d62:	3e b7       	in	r19, 0x3e	; 62
    1d64:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    1d68:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    1d6c:	24 1b       	sub	r18, r20
    1d6e:	35 0b       	sbc	r19, r21
    1d70:	e0 91 fb 03 	lds	r30, 0x03FB	; 0x8003fb <__brkval>
    1d74:	f0 91 fc 03 	lds	r31, 0x03FC	; 0x8003fc <__brkval+0x1>
    1d78:	e2 17       	cp	r30, r18
    1d7a:	f3 07       	cpc	r31, r19
    1d7c:	a0 f4       	brcc	.+40     	; 0x1da6 <malloc+0x120>
    1d7e:	2e 1b       	sub	r18, r30
    1d80:	3f 0b       	sbc	r19, r31
    1d82:	28 17       	cp	r18, r24
    1d84:	39 07       	cpc	r19, r25
    1d86:	78 f0       	brcs	.+30     	; 0x1da6 <malloc+0x120>
    1d88:	ac 01       	movw	r20, r24
    1d8a:	4e 5f       	subi	r20, 0xFE	; 254
    1d8c:	5f 4f       	sbci	r21, 0xFF	; 255
    1d8e:	24 17       	cp	r18, r20
    1d90:	35 07       	cpc	r19, r21
    1d92:	48 f0       	brcs	.+18     	; 0x1da6 <malloc+0x120>
    1d94:	4e 0f       	add	r20, r30
    1d96:	5f 1f       	adc	r21, r31
    1d98:	50 93 fc 03 	sts	0x03FC, r21	; 0x8003fc <__brkval+0x1>
    1d9c:	40 93 fb 03 	sts	0x03FB, r20	; 0x8003fb <__brkval>
    1da0:	81 93       	st	Z+, r24
    1da2:	91 93       	st	Z+, r25
    1da4:	02 c0       	rjmp	.+4      	; 0x1daa <malloc+0x124>
    1da6:	e0 e0       	ldi	r30, 0x00	; 0
    1da8:	f0 e0       	ldi	r31, 0x00	; 0
    1daa:	cf 01       	movw	r24, r30
    1dac:	df 91       	pop	r29
    1dae:	cf 91       	pop	r28
    1db0:	1f 91       	pop	r17
    1db2:	0f 91       	pop	r16
    1db4:	08 95       	ret

00001db6 <free>:
    1db6:	cf 93       	push	r28
    1db8:	df 93       	push	r29
    1dba:	00 97       	sbiw	r24, 0x00	; 0
    1dbc:	09 f4       	brne	.+2      	; 0x1dc0 <free+0xa>
    1dbe:	81 c0       	rjmp	.+258    	; 0x1ec2 <free+0x10c>
    1dc0:	fc 01       	movw	r30, r24
    1dc2:	32 97       	sbiw	r30, 0x02	; 2
    1dc4:	13 82       	std	Z+3, r1	; 0x03
    1dc6:	12 82       	std	Z+2, r1	; 0x02
    1dc8:	a0 91 fd 03 	lds	r26, 0x03FD	; 0x8003fd <__flp>
    1dcc:	b0 91 fe 03 	lds	r27, 0x03FE	; 0x8003fe <__flp+0x1>
    1dd0:	10 97       	sbiw	r26, 0x00	; 0
    1dd2:	81 f4       	brne	.+32     	; 0x1df4 <free+0x3e>
    1dd4:	20 81       	ld	r18, Z
    1dd6:	31 81       	ldd	r19, Z+1	; 0x01
    1dd8:	82 0f       	add	r24, r18
    1dda:	93 1f       	adc	r25, r19
    1ddc:	20 91 fb 03 	lds	r18, 0x03FB	; 0x8003fb <__brkval>
    1de0:	30 91 fc 03 	lds	r19, 0x03FC	; 0x8003fc <__brkval+0x1>
    1de4:	28 17       	cp	r18, r24
    1de6:	39 07       	cpc	r19, r25
    1de8:	51 f5       	brne	.+84     	; 0x1e3e <free+0x88>
    1dea:	f0 93 fc 03 	sts	0x03FC, r31	; 0x8003fc <__brkval+0x1>
    1dee:	e0 93 fb 03 	sts	0x03FB, r30	; 0x8003fb <__brkval>
    1df2:	67 c0       	rjmp	.+206    	; 0x1ec2 <free+0x10c>
    1df4:	ed 01       	movw	r28, r26
    1df6:	20 e0       	ldi	r18, 0x00	; 0
    1df8:	30 e0       	ldi	r19, 0x00	; 0
    1dfa:	ce 17       	cp	r28, r30
    1dfc:	df 07       	cpc	r29, r31
    1dfe:	40 f4       	brcc	.+16     	; 0x1e10 <free+0x5a>
    1e00:	4a 81       	ldd	r20, Y+2	; 0x02
    1e02:	5b 81       	ldd	r21, Y+3	; 0x03
    1e04:	9e 01       	movw	r18, r28
    1e06:	41 15       	cp	r20, r1
    1e08:	51 05       	cpc	r21, r1
    1e0a:	f1 f0       	breq	.+60     	; 0x1e48 <free+0x92>
    1e0c:	ea 01       	movw	r28, r20
    1e0e:	f5 cf       	rjmp	.-22     	; 0x1dfa <free+0x44>
    1e10:	d3 83       	std	Z+3, r29	; 0x03
    1e12:	c2 83       	std	Z+2, r28	; 0x02
    1e14:	40 81       	ld	r20, Z
    1e16:	51 81       	ldd	r21, Z+1	; 0x01
    1e18:	84 0f       	add	r24, r20
    1e1a:	95 1f       	adc	r25, r21
    1e1c:	c8 17       	cp	r28, r24
    1e1e:	d9 07       	cpc	r29, r25
    1e20:	59 f4       	brne	.+22     	; 0x1e38 <free+0x82>
    1e22:	88 81       	ld	r24, Y
    1e24:	99 81       	ldd	r25, Y+1	; 0x01
    1e26:	84 0f       	add	r24, r20
    1e28:	95 1f       	adc	r25, r21
    1e2a:	02 96       	adiw	r24, 0x02	; 2
    1e2c:	91 83       	std	Z+1, r25	; 0x01
    1e2e:	80 83       	st	Z, r24
    1e30:	8a 81       	ldd	r24, Y+2	; 0x02
    1e32:	9b 81       	ldd	r25, Y+3	; 0x03
    1e34:	93 83       	std	Z+3, r25	; 0x03
    1e36:	82 83       	std	Z+2, r24	; 0x02
    1e38:	21 15       	cp	r18, r1
    1e3a:	31 05       	cpc	r19, r1
    1e3c:	29 f4       	brne	.+10     	; 0x1e48 <free+0x92>
    1e3e:	f0 93 fe 03 	sts	0x03FE, r31	; 0x8003fe <__flp+0x1>
    1e42:	e0 93 fd 03 	sts	0x03FD, r30	; 0x8003fd <__flp>
    1e46:	3d c0       	rjmp	.+122    	; 0x1ec2 <free+0x10c>
    1e48:	e9 01       	movw	r28, r18
    1e4a:	fb 83       	std	Y+3, r31	; 0x03
    1e4c:	ea 83       	std	Y+2, r30	; 0x02
    1e4e:	49 91       	ld	r20, Y+
    1e50:	59 91       	ld	r21, Y+
    1e52:	c4 0f       	add	r28, r20
    1e54:	d5 1f       	adc	r29, r21
    1e56:	ec 17       	cp	r30, r28
    1e58:	fd 07       	cpc	r31, r29
    1e5a:	61 f4       	brne	.+24     	; 0x1e74 <free+0xbe>
    1e5c:	80 81       	ld	r24, Z
    1e5e:	91 81       	ldd	r25, Z+1	; 0x01
    1e60:	84 0f       	add	r24, r20
    1e62:	95 1f       	adc	r25, r21
    1e64:	02 96       	adiw	r24, 0x02	; 2
    1e66:	e9 01       	movw	r28, r18
    1e68:	99 83       	std	Y+1, r25	; 0x01
    1e6a:	88 83       	st	Y, r24
    1e6c:	82 81       	ldd	r24, Z+2	; 0x02
    1e6e:	93 81       	ldd	r25, Z+3	; 0x03
    1e70:	9b 83       	std	Y+3, r25	; 0x03
    1e72:	8a 83       	std	Y+2, r24	; 0x02
    1e74:	e0 e0       	ldi	r30, 0x00	; 0
    1e76:	f0 e0       	ldi	r31, 0x00	; 0
    1e78:	12 96       	adiw	r26, 0x02	; 2
    1e7a:	8d 91       	ld	r24, X+
    1e7c:	9c 91       	ld	r25, X
    1e7e:	13 97       	sbiw	r26, 0x03	; 3
    1e80:	00 97       	sbiw	r24, 0x00	; 0
    1e82:	19 f0       	breq	.+6      	; 0x1e8a <free+0xd4>
    1e84:	fd 01       	movw	r30, r26
    1e86:	dc 01       	movw	r26, r24
    1e88:	f7 cf       	rjmp	.-18     	; 0x1e78 <free+0xc2>
    1e8a:	8d 91       	ld	r24, X+
    1e8c:	9c 91       	ld	r25, X
    1e8e:	11 97       	sbiw	r26, 0x01	; 1
    1e90:	9d 01       	movw	r18, r26
    1e92:	2e 5f       	subi	r18, 0xFE	; 254
    1e94:	3f 4f       	sbci	r19, 0xFF	; 255
    1e96:	82 0f       	add	r24, r18
    1e98:	93 1f       	adc	r25, r19
    1e9a:	20 91 fb 03 	lds	r18, 0x03FB	; 0x8003fb <__brkval>
    1e9e:	30 91 fc 03 	lds	r19, 0x03FC	; 0x8003fc <__brkval+0x1>
    1ea2:	28 17       	cp	r18, r24
    1ea4:	39 07       	cpc	r19, r25
    1ea6:	69 f4       	brne	.+26     	; 0x1ec2 <free+0x10c>
    1ea8:	30 97       	sbiw	r30, 0x00	; 0
    1eaa:	29 f4       	brne	.+10     	; 0x1eb6 <free+0x100>
    1eac:	10 92 fe 03 	sts	0x03FE, r1	; 0x8003fe <__flp+0x1>
    1eb0:	10 92 fd 03 	sts	0x03FD, r1	; 0x8003fd <__flp>
    1eb4:	02 c0       	rjmp	.+4      	; 0x1eba <free+0x104>
    1eb6:	13 82       	std	Z+3, r1	; 0x03
    1eb8:	12 82       	std	Z+2, r1	; 0x02
    1eba:	b0 93 fc 03 	sts	0x03FC, r27	; 0x8003fc <__brkval+0x1>
    1ebe:	a0 93 fb 03 	sts	0x03FB, r26	; 0x8003fb <__brkval>
    1ec2:	df 91       	pop	r29
    1ec4:	cf 91       	pop	r28
    1ec6:	08 95       	ret

00001ec8 <atoi>:
    1ec8:	fc 01       	movw	r30, r24
    1eca:	88 27       	eor	r24, r24
    1ecc:	99 27       	eor	r25, r25
    1ece:	e8 94       	clt
    1ed0:	21 91       	ld	r18, Z+
    1ed2:	20 32       	cpi	r18, 0x20	; 32
    1ed4:	e9 f3       	breq	.-6      	; 0x1ed0 <atoi+0x8>
    1ed6:	29 30       	cpi	r18, 0x09	; 9
    1ed8:	10 f0       	brcs	.+4      	; 0x1ede <atoi+0x16>
    1eda:	2e 30       	cpi	r18, 0x0E	; 14
    1edc:	c8 f3       	brcs	.-14     	; 0x1ed0 <atoi+0x8>
    1ede:	2b 32       	cpi	r18, 0x2B	; 43
    1ee0:	41 f0       	breq	.+16     	; 0x1ef2 <atoi+0x2a>
    1ee2:	2d 32       	cpi	r18, 0x2D	; 45
    1ee4:	39 f4       	brne	.+14     	; 0x1ef4 <atoi+0x2c>
    1ee6:	68 94       	set
    1ee8:	04 c0       	rjmp	.+8      	; 0x1ef2 <atoi+0x2a>
    1eea:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <__mulhi_const_10>
    1eee:	82 0f       	add	r24, r18
    1ef0:	91 1d       	adc	r25, r1
    1ef2:	21 91       	ld	r18, Z+
    1ef4:	20 53       	subi	r18, 0x30	; 48
    1ef6:	2a 30       	cpi	r18, 0x0A	; 10
    1ef8:	c0 f3       	brcs	.-16     	; 0x1eea <atoi+0x22>
    1efa:	1e f4       	brtc	.+6      	; 0x1f02 <atoi+0x3a>
    1efc:	90 95       	com	r25
    1efe:	81 95       	neg	r24
    1f00:	9f 4f       	sbci	r25, 0xFF	; 255
    1f02:	08 95       	ret

00001f04 <memmove>:
    1f04:	68 17       	cp	r22, r24
    1f06:	79 07       	cpc	r23, r25
    1f08:	68 f4       	brcc	.+26     	; 0x1f24 <memmove+0x20>
    1f0a:	fb 01       	movw	r30, r22
    1f0c:	dc 01       	movw	r26, r24
    1f0e:	e4 0f       	add	r30, r20
    1f10:	f5 1f       	adc	r31, r21
    1f12:	a4 0f       	add	r26, r20
    1f14:	b5 1f       	adc	r27, r21
    1f16:	02 c0       	rjmp	.+4      	; 0x1f1c <memmove+0x18>
    1f18:	02 90       	ld	r0, -Z
    1f1a:	0e 92       	st	-X, r0
    1f1c:	41 50       	subi	r20, 0x01	; 1
    1f1e:	50 40       	sbci	r21, 0x00	; 0
    1f20:	d8 f7       	brcc	.-10     	; 0x1f18 <memmove+0x14>
    1f22:	08 95       	ret
    1f24:	0c 94 b4 11 	jmp	0x2368	; 0x2368 <memcpy>

00001f28 <__mulhi_const_10>:
    1f28:	7a e0       	ldi	r23, 0x0A	; 10
    1f2a:	97 9f       	mul	r25, r23
    1f2c:	90 2d       	mov	r25, r0
    1f2e:	87 9f       	mul	r24, r23
    1f30:	80 2d       	mov	r24, r0
    1f32:	91 0d       	add	r25, r1
    1f34:	11 24       	eor	r1, r1
    1f36:	08 95       	ret

00001f38 <vsnprintf_P>:
    1f38:	ae e0       	ldi	r26, 0x0E	; 14
    1f3a:	b0 e0       	ldi	r27, 0x00	; 0
    1f3c:	e2 ea       	ldi	r30, 0xA2	; 162
    1f3e:	ff e0       	ldi	r31, 0x0F	; 15
    1f40:	0c 94 70 12 	jmp	0x24e0	; 0x24e0 <__prologue_saves__+0x1c>
    1f44:	8c 01       	movw	r16, r24
    1f46:	fa 01       	movw	r30, r20
    1f48:	8e e0       	ldi	r24, 0x0E	; 14
    1f4a:	8c 83       	std	Y+4, r24	; 0x04
    1f4c:	1a 83       	std	Y+2, r17	; 0x02
    1f4e:	09 83       	std	Y+1, r16	; 0x01
    1f50:	77 ff       	sbrs	r23, 7
    1f52:	02 c0       	rjmp	.+4      	; 0x1f58 <vsnprintf_P+0x20>
    1f54:	60 e0       	ldi	r22, 0x00	; 0
    1f56:	70 e8       	ldi	r23, 0x80	; 128
    1f58:	cb 01       	movw	r24, r22
    1f5a:	01 97       	sbiw	r24, 0x01	; 1
    1f5c:	9e 83       	std	Y+6, r25	; 0x06
    1f5e:	8d 83       	std	Y+5, r24	; 0x05
    1f60:	a9 01       	movw	r20, r18
    1f62:	bf 01       	movw	r22, r30
    1f64:	ce 01       	movw	r24, r28
    1f66:	01 96       	adiw	r24, 0x01	; 1
    1f68:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <vfprintf>
    1f6c:	4d 81       	ldd	r20, Y+5	; 0x05
    1f6e:	5e 81       	ldd	r21, Y+6	; 0x06
    1f70:	57 fd       	sbrc	r21, 7
    1f72:	0a c0       	rjmp	.+20     	; 0x1f88 <vsnprintf_P+0x50>
    1f74:	2f 81       	ldd	r18, Y+7	; 0x07
    1f76:	38 85       	ldd	r19, Y+8	; 0x08
    1f78:	42 17       	cp	r20, r18
    1f7a:	53 07       	cpc	r21, r19
    1f7c:	0c f4       	brge	.+2      	; 0x1f80 <vsnprintf_P+0x48>
    1f7e:	9a 01       	movw	r18, r20
    1f80:	f8 01       	movw	r30, r16
    1f82:	e2 0f       	add	r30, r18
    1f84:	f3 1f       	adc	r31, r19
    1f86:	10 82       	st	Z, r1
    1f88:	2e 96       	adiw	r28, 0x0e	; 14
    1f8a:	e4 e0       	ldi	r30, 0x04	; 4
    1f8c:	0c 94 8c 12 	jmp	0x2518	; 0x2518 <__epilogue_restores__+0x1c>

00001f90 <vfprintf>:
    1f90:	ab e0       	ldi	r26, 0x0B	; 11
    1f92:	b0 e0       	ldi	r27, 0x00	; 0
    1f94:	ee ec       	ldi	r30, 0xCE	; 206
    1f96:	ff e0       	ldi	r31, 0x0F	; 15
    1f98:	0c 94 62 12 	jmp	0x24c4	; 0x24c4 <__prologue_saves__>
    1f9c:	6c 01       	movw	r12, r24
    1f9e:	7b 01       	movw	r14, r22
    1fa0:	8a 01       	movw	r16, r20
    1fa2:	fc 01       	movw	r30, r24
    1fa4:	17 82       	std	Z+7, r1	; 0x07
    1fa6:	16 82       	std	Z+6, r1	; 0x06
    1fa8:	83 81       	ldd	r24, Z+3	; 0x03
    1faa:	81 ff       	sbrs	r24, 1
    1fac:	cc c1       	rjmp	.+920    	; 0x2346 <vfprintf+0x3b6>
    1fae:	ce 01       	movw	r24, r28
    1fb0:	01 96       	adiw	r24, 0x01	; 1
    1fb2:	3c 01       	movw	r6, r24
    1fb4:	f6 01       	movw	r30, r12
    1fb6:	93 81       	ldd	r25, Z+3	; 0x03
    1fb8:	f7 01       	movw	r30, r14
    1fba:	93 fd       	sbrc	r25, 3
    1fbc:	85 91       	lpm	r24, Z+
    1fbe:	93 ff       	sbrs	r25, 3
    1fc0:	81 91       	ld	r24, Z+
    1fc2:	7f 01       	movw	r14, r30
    1fc4:	88 23       	and	r24, r24
    1fc6:	09 f4       	brne	.+2      	; 0x1fca <vfprintf+0x3a>
    1fc8:	ba c1       	rjmp	.+884    	; 0x233e <vfprintf+0x3ae>
    1fca:	85 32       	cpi	r24, 0x25	; 37
    1fcc:	39 f4       	brne	.+14     	; 0x1fdc <vfprintf+0x4c>
    1fce:	93 fd       	sbrc	r25, 3
    1fd0:	85 91       	lpm	r24, Z+
    1fd2:	93 ff       	sbrs	r25, 3
    1fd4:	81 91       	ld	r24, Z+
    1fd6:	7f 01       	movw	r14, r30
    1fd8:	85 32       	cpi	r24, 0x25	; 37
    1fda:	29 f4       	brne	.+10     	; 0x1fe6 <vfprintf+0x56>
    1fdc:	b6 01       	movw	r22, r12
    1fde:	90 e0       	ldi	r25, 0x00	; 0
    1fe0:	0e 94 c8 11 	call	0x2390	; 0x2390 <fputc>
    1fe4:	e7 cf       	rjmp	.-50     	; 0x1fb4 <vfprintf+0x24>
    1fe6:	91 2c       	mov	r9, r1
    1fe8:	21 2c       	mov	r2, r1
    1fea:	31 2c       	mov	r3, r1
    1fec:	ff e1       	ldi	r31, 0x1F	; 31
    1fee:	f3 15       	cp	r31, r3
    1ff0:	d8 f0       	brcs	.+54     	; 0x2028 <vfprintf+0x98>
    1ff2:	8b 32       	cpi	r24, 0x2B	; 43
    1ff4:	79 f0       	breq	.+30     	; 0x2014 <vfprintf+0x84>
    1ff6:	38 f4       	brcc	.+14     	; 0x2006 <vfprintf+0x76>
    1ff8:	80 32       	cpi	r24, 0x20	; 32
    1ffa:	79 f0       	breq	.+30     	; 0x201a <vfprintf+0x8a>
    1ffc:	83 32       	cpi	r24, 0x23	; 35
    1ffe:	a1 f4       	brne	.+40     	; 0x2028 <vfprintf+0x98>
    2000:	23 2d       	mov	r18, r3
    2002:	20 61       	ori	r18, 0x10	; 16
    2004:	1d c0       	rjmp	.+58     	; 0x2040 <vfprintf+0xb0>
    2006:	8d 32       	cpi	r24, 0x2D	; 45
    2008:	61 f0       	breq	.+24     	; 0x2022 <vfprintf+0x92>
    200a:	80 33       	cpi	r24, 0x30	; 48
    200c:	69 f4       	brne	.+26     	; 0x2028 <vfprintf+0x98>
    200e:	23 2d       	mov	r18, r3
    2010:	21 60       	ori	r18, 0x01	; 1
    2012:	16 c0       	rjmp	.+44     	; 0x2040 <vfprintf+0xb0>
    2014:	83 2d       	mov	r24, r3
    2016:	82 60       	ori	r24, 0x02	; 2
    2018:	38 2e       	mov	r3, r24
    201a:	e3 2d       	mov	r30, r3
    201c:	e4 60       	ori	r30, 0x04	; 4
    201e:	3e 2e       	mov	r3, r30
    2020:	2a c0       	rjmp	.+84     	; 0x2076 <vfprintf+0xe6>
    2022:	f3 2d       	mov	r31, r3
    2024:	f8 60       	ori	r31, 0x08	; 8
    2026:	1d c0       	rjmp	.+58     	; 0x2062 <vfprintf+0xd2>
    2028:	37 fc       	sbrc	r3, 7
    202a:	2d c0       	rjmp	.+90     	; 0x2086 <vfprintf+0xf6>
    202c:	20 ed       	ldi	r18, 0xD0	; 208
    202e:	28 0f       	add	r18, r24
    2030:	2a 30       	cpi	r18, 0x0A	; 10
    2032:	40 f0       	brcs	.+16     	; 0x2044 <vfprintf+0xb4>
    2034:	8e 32       	cpi	r24, 0x2E	; 46
    2036:	b9 f4       	brne	.+46     	; 0x2066 <vfprintf+0xd6>
    2038:	36 fc       	sbrc	r3, 6
    203a:	81 c1       	rjmp	.+770    	; 0x233e <vfprintf+0x3ae>
    203c:	23 2d       	mov	r18, r3
    203e:	20 64       	ori	r18, 0x40	; 64
    2040:	32 2e       	mov	r3, r18
    2042:	19 c0       	rjmp	.+50     	; 0x2076 <vfprintf+0xe6>
    2044:	36 fe       	sbrs	r3, 6
    2046:	06 c0       	rjmp	.+12     	; 0x2054 <vfprintf+0xc4>
    2048:	8a e0       	ldi	r24, 0x0A	; 10
    204a:	98 9e       	mul	r9, r24
    204c:	20 0d       	add	r18, r0
    204e:	11 24       	eor	r1, r1
    2050:	92 2e       	mov	r9, r18
    2052:	11 c0       	rjmp	.+34     	; 0x2076 <vfprintf+0xe6>
    2054:	ea e0       	ldi	r30, 0x0A	; 10
    2056:	2e 9e       	mul	r2, r30
    2058:	20 0d       	add	r18, r0
    205a:	11 24       	eor	r1, r1
    205c:	22 2e       	mov	r2, r18
    205e:	f3 2d       	mov	r31, r3
    2060:	f0 62       	ori	r31, 0x20	; 32
    2062:	3f 2e       	mov	r3, r31
    2064:	08 c0       	rjmp	.+16     	; 0x2076 <vfprintf+0xe6>
    2066:	8c 36       	cpi	r24, 0x6C	; 108
    2068:	21 f4       	brne	.+8      	; 0x2072 <vfprintf+0xe2>
    206a:	83 2d       	mov	r24, r3
    206c:	80 68       	ori	r24, 0x80	; 128
    206e:	38 2e       	mov	r3, r24
    2070:	02 c0       	rjmp	.+4      	; 0x2076 <vfprintf+0xe6>
    2072:	88 36       	cpi	r24, 0x68	; 104
    2074:	41 f4       	brne	.+16     	; 0x2086 <vfprintf+0xf6>
    2076:	f7 01       	movw	r30, r14
    2078:	93 fd       	sbrc	r25, 3
    207a:	85 91       	lpm	r24, Z+
    207c:	93 ff       	sbrs	r25, 3
    207e:	81 91       	ld	r24, Z+
    2080:	7f 01       	movw	r14, r30
    2082:	81 11       	cpse	r24, r1
    2084:	b3 cf       	rjmp	.-154    	; 0x1fec <vfprintf+0x5c>
    2086:	98 2f       	mov	r25, r24
    2088:	9f 7d       	andi	r25, 0xDF	; 223
    208a:	95 54       	subi	r25, 0x45	; 69
    208c:	93 30       	cpi	r25, 0x03	; 3
    208e:	28 f4       	brcc	.+10     	; 0x209a <vfprintf+0x10a>
    2090:	0c 5f       	subi	r16, 0xFC	; 252
    2092:	1f 4f       	sbci	r17, 0xFF	; 255
    2094:	9f e3       	ldi	r25, 0x3F	; 63
    2096:	99 83       	std	Y+1, r25	; 0x01
    2098:	0d c0       	rjmp	.+26     	; 0x20b4 <vfprintf+0x124>
    209a:	83 36       	cpi	r24, 0x63	; 99
    209c:	31 f0       	breq	.+12     	; 0x20aa <vfprintf+0x11a>
    209e:	83 37       	cpi	r24, 0x73	; 115
    20a0:	71 f0       	breq	.+28     	; 0x20be <vfprintf+0x12e>
    20a2:	83 35       	cpi	r24, 0x53	; 83
    20a4:	09 f0       	breq	.+2      	; 0x20a8 <vfprintf+0x118>
    20a6:	59 c0       	rjmp	.+178    	; 0x215a <vfprintf+0x1ca>
    20a8:	21 c0       	rjmp	.+66     	; 0x20ec <vfprintf+0x15c>
    20aa:	f8 01       	movw	r30, r16
    20ac:	80 81       	ld	r24, Z
    20ae:	89 83       	std	Y+1, r24	; 0x01
    20b0:	0e 5f       	subi	r16, 0xFE	; 254
    20b2:	1f 4f       	sbci	r17, 0xFF	; 255
    20b4:	88 24       	eor	r8, r8
    20b6:	83 94       	inc	r8
    20b8:	91 2c       	mov	r9, r1
    20ba:	53 01       	movw	r10, r6
    20bc:	13 c0       	rjmp	.+38     	; 0x20e4 <vfprintf+0x154>
    20be:	28 01       	movw	r4, r16
    20c0:	f2 e0       	ldi	r31, 0x02	; 2
    20c2:	4f 0e       	add	r4, r31
    20c4:	51 1c       	adc	r5, r1
    20c6:	f8 01       	movw	r30, r16
    20c8:	a0 80       	ld	r10, Z
    20ca:	b1 80       	ldd	r11, Z+1	; 0x01
    20cc:	36 fe       	sbrs	r3, 6
    20ce:	03 c0       	rjmp	.+6      	; 0x20d6 <vfprintf+0x146>
    20d0:	69 2d       	mov	r22, r9
    20d2:	70 e0       	ldi	r23, 0x00	; 0
    20d4:	02 c0       	rjmp	.+4      	; 0x20da <vfprintf+0x14a>
    20d6:	6f ef       	ldi	r22, 0xFF	; 255
    20d8:	7f ef       	ldi	r23, 0xFF	; 255
    20da:	c5 01       	movw	r24, r10
    20dc:	0e 94 bd 11 	call	0x237a	; 0x237a <strnlen>
    20e0:	4c 01       	movw	r8, r24
    20e2:	82 01       	movw	r16, r4
    20e4:	f3 2d       	mov	r31, r3
    20e6:	ff 77       	andi	r31, 0x7F	; 127
    20e8:	3f 2e       	mov	r3, r31
    20ea:	16 c0       	rjmp	.+44     	; 0x2118 <vfprintf+0x188>
    20ec:	28 01       	movw	r4, r16
    20ee:	22 e0       	ldi	r18, 0x02	; 2
    20f0:	42 0e       	add	r4, r18
    20f2:	51 1c       	adc	r5, r1
    20f4:	f8 01       	movw	r30, r16
    20f6:	a0 80       	ld	r10, Z
    20f8:	b1 80       	ldd	r11, Z+1	; 0x01
    20fa:	36 fe       	sbrs	r3, 6
    20fc:	03 c0       	rjmp	.+6      	; 0x2104 <vfprintf+0x174>
    20fe:	69 2d       	mov	r22, r9
    2100:	70 e0       	ldi	r23, 0x00	; 0
    2102:	02 c0       	rjmp	.+4      	; 0x2108 <vfprintf+0x178>
    2104:	6f ef       	ldi	r22, 0xFF	; 255
    2106:	7f ef       	ldi	r23, 0xFF	; 255
    2108:	c5 01       	movw	r24, r10
    210a:	0e 94 a9 11 	call	0x2352	; 0x2352 <strnlen_P>
    210e:	4c 01       	movw	r8, r24
    2110:	f3 2d       	mov	r31, r3
    2112:	f0 68       	ori	r31, 0x80	; 128
    2114:	3f 2e       	mov	r3, r31
    2116:	82 01       	movw	r16, r4
    2118:	33 fc       	sbrc	r3, 3
    211a:	1b c0       	rjmp	.+54     	; 0x2152 <vfprintf+0x1c2>
    211c:	82 2d       	mov	r24, r2
    211e:	90 e0       	ldi	r25, 0x00	; 0
    2120:	88 16       	cp	r8, r24
    2122:	99 06       	cpc	r9, r25
    2124:	b0 f4       	brcc	.+44     	; 0x2152 <vfprintf+0x1c2>
    2126:	b6 01       	movw	r22, r12
    2128:	80 e2       	ldi	r24, 0x20	; 32
    212a:	90 e0       	ldi	r25, 0x00	; 0
    212c:	0e 94 c8 11 	call	0x2390	; 0x2390 <fputc>
    2130:	2a 94       	dec	r2
    2132:	f4 cf       	rjmp	.-24     	; 0x211c <vfprintf+0x18c>
    2134:	f5 01       	movw	r30, r10
    2136:	37 fc       	sbrc	r3, 7
    2138:	85 91       	lpm	r24, Z+
    213a:	37 fe       	sbrs	r3, 7
    213c:	81 91       	ld	r24, Z+
    213e:	5f 01       	movw	r10, r30
    2140:	b6 01       	movw	r22, r12
    2142:	90 e0       	ldi	r25, 0x00	; 0
    2144:	0e 94 c8 11 	call	0x2390	; 0x2390 <fputc>
    2148:	21 10       	cpse	r2, r1
    214a:	2a 94       	dec	r2
    214c:	21 e0       	ldi	r18, 0x01	; 1
    214e:	82 1a       	sub	r8, r18
    2150:	91 08       	sbc	r9, r1
    2152:	81 14       	cp	r8, r1
    2154:	91 04       	cpc	r9, r1
    2156:	71 f7       	brne	.-36     	; 0x2134 <vfprintf+0x1a4>
    2158:	e8 c0       	rjmp	.+464    	; 0x232a <vfprintf+0x39a>
    215a:	84 36       	cpi	r24, 0x64	; 100
    215c:	11 f0       	breq	.+4      	; 0x2162 <vfprintf+0x1d2>
    215e:	89 36       	cpi	r24, 0x69	; 105
    2160:	41 f5       	brne	.+80     	; 0x21b2 <vfprintf+0x222>
    2162:	f8 01       	movw	r30, r16
    2164:	37 fe       	sbrs	r3, 7
    2166:	07 c0       	rjmp	.+14     	; 0x2176 <vfprintf+0x1e6>
    2168:	60 81       	ld	r22, Z
    216a:	71 81       	ldd	r23, Z+1	; 0x01
    216c:	82 81       	ldd	r24, Z+2	; 0x02
    216e:	93 81       	ldd	r25, Z+3	; 0x03
    2170:	0c 5f       	subi	r16, 0xFC	; 252
    2172:	1f 4f       	sbci	r17, 0xFF	; 255
    2174:	08 c0       	rjmp	.+16     	; 0x2186 <vfprintf+0x1f6>
    2176:	60 81       	ld	r22, Z
    2178:	71 81       	ldd	r23, Z+1	; 0x01
    217a:	07 2e       	mov	r0, r23
    217c:	00 0c       	add	r0, r0
    217e:	88 0b       	sbc	r24, r24
    2180:	99 0b       	sbc	r25, r25
    2182:	0e 5f       	subi	r16, 0xFE	; 254
    2184:	1f 4f       	sbci	r17, 0xFF	; 255
    2186:	f3 2d       	mov	r31, r3
    2188:	ff 76       	andi	r31, 0x6F	; 111
    218a:	3f 2e       	mov	r3, r31
    218c:	97 ff       	sbrs	r25, 7
    218e:	09 c0       	rjmp	.+18     	; 0x21a2 <vfprintf+0x212>
    2190:	90 95       	com	r25
    2192:	80 95       	com	r24
    2194:	70 95       	com	r23
    2196:	61 95       	neg	r22
    2198:	7f 4f       	sbci	r23, 0xFF	; 255
    219a:	8f 4f       	sbci	r24, 0xFF	; 255
    219c:	9f 4f       	sbci	r25, 0xFF	; 255
    219e:	f0 68       	ori	r31, 0x80	; 128
    21a0:	3f 2e       	mov	r3, r31
    21a2:	2a e0       	ldi	r18, 0x0A	; 10
    21a4:	30 e0       	ldi	r19, 0x00	; 0
    21a6:	a3 01       	movw	r20, r6
    21a8:	0e 94 04 12 	call	0x2408	; 0x2408 <__ultoa_invert>
    21ac:	88 2e       	mov	r8, r24
    21ae:	86 18       	sub	r8, r6
    21b0:	45 c0       	rjmp	.+138    	; 0x223c <vfprintf+0x2ac>
    21b2:	85 37       	cpi	r24, 0x75	; 117
    21b4:	31 f4       	brne	.+12     	; 0x21c2 <vfprintf+0x232>
    21b6:	23 2d       	mov	r18, r3
    21b8:	2f 7e       	andi	r18, 0xEF	; 239
    21ba:	b2 2e       	mov	r11, r18
    21bc:	2a e0       	ldi	r18, 0x0A	; 10
    21be:	30 e0       	ldi	r19, 0x00	; 0
    21c0:	25 c0       	rjmp	.+74     	; 0x220c <vfprintf+0x27c>
    21c2:	93 2d       	mov	r25, r3
    21c4:	99 7f       	andi	r25, 0xF9	; 249
    21c6:	b9 2e       	mov	r11, r25
    21c8:	8f 36       	cpi	r24, 0x6F	; 111
    21ca:	c1 f0       	breq	.+48     	; 0x21fc <vfprintf+0x26c>
    21cc:	18 f4       	brcc	.+6      	; 0x21d4 <vfprintf+0x244>
    21ce:	88 35       	cpi	r24, 0x58	; 88
    21d0:	79 f0       	breq	.+30     	; 0x21f0 <vfprintf+0x260>
    21d2:	b5 c0       	rjmp	.+362    	; 0x233e <vfprintf+0x3ae>
    21d4:	80 37       	cpi	r24, 0x70	; 112
    21d6:	19 f0       	breq	.+6      	; 0x21de <vfprintf+0x24e>
    21d8:	88 37       	cpi	r24, 0x78	; 120
    21da:	21 f0       	breq	.+8      	; 0x21e4 <vfprintf+0x254>
    21dc:	b0 c0       	rjmp	.+352    	; 0x233e <vfprintf+0x3ae>
    21de:	e9 2f       	mov	r30, r25
    21e0:	e0 61       	ori	r30, 0x10	; 16
    21e2:	be 2e       	mov	r11, r30
    21e4:	b4 fe       	sbrs	r11, 4
    21e6:	0d c0       	rjmp	.+26     	; 0x2202 <vfprintf+0x272>
    21e8:	fb 2d       	mov	r31, r11
    21ea:	f4 60       	ori	r31, 0x04	; 4
    21ec:	bf 2e       	mov	r11, r31
    21ee:	09 c0       	rjmp	.+18     	; 0x2202 <vfprintf+0x272>
    21f0:	34 fe       	sbrs	r3, 4
    21f2:	0a c0       	rjmp	.+20     	; 0x2208 <vfprintf+0x278>
    21f4:	29 2f       	mov	r18, r25
    21f6:	26 60       	ori	r18, 0x06	; 6
    21f8:	b2 2e       	mov	r11, r18
    21fa:	06 c0       	rjmp	.+12     	; 0x2208 <vfprintf+0x278>
    21fc:	28 e0       	ldi	r18, 0x08	; 8
    21fe:	30 e0       	ldi	r19, 0x00	; 0
    2200:	05 c0       	rjmp	.+10     	; 0x220c <vfprintf+0x27c>
    2202:	20 e1       	ldi	r18, 0x10	; 16
    2204:	30 e0       	ldi	r19, 0x00	; 0
    2206:	02 c0       	rjmp	.+4      	; 0x220c <vfprintf+0x27c>
    2208:	20 e1       	ldi	r18, 0x10	; 16
    220a:	32 e0       	ldi	r19, 0x02	; 2
    220c:	f8 01       	movw	r30, r16
    220e:	b7 fe       	sbrs	r11, 7
    2210:	07 c0       	rjmp	.+14     	; 0x2220 <vfprintf+0x290>
    2212:	60 81       	ld	r22, Z
    2214:	71 81       	ldd	r23, Z+1	; 0x01
    2216:	82 81       	ldd	r24, Z+2	; 0x02
    2218:	93 81       	ldd	r25, Z+3	; 0x03
    221a:	0c 5f       	subi	r16, 0xFC	; 252
    221c:	1f 4f       	sbci	r17, 0xFF	; 255
    221e:	06 c0       	rjmp	.+12     	; 0x222c <vfprintf+0x29c>
    2220:	60 81       	ld	r22, Z
    2222:	71 81       	ldd	r23, Z+1	; 0x01
    2224:	80 e0       	ldi	r24, 0x00	; 0
    2226:	90 e0       	ldi	r25, 0x00	; 0
    2228:	0e 5f       	subi	r16, 0xFE	; 254
    222a:	1f 4f       	sbci	r17, 0xFF	; 255
    222c:	a3 01       	movw	r20, r6
    222e:	0e 94 04 12 	call	0x2408	; 0x2408 <__ultoa_invert>
    2232:	88 2e       	mov	r8, r24
    2234:	86 18       	sub	r8, r6
    2236:	fb 2d       	mov	r31, r11
    2238:	ff 77       	andi	r31, 0x7F	; 127
    223a:	3f 2e       	mov	r3, r31
    223c:	36 fe       	sbrs	r3, 6
    223e:	0d c0       	rjmp	.+26     	; 0x225a <vfprintf+0x2ca>
    2240:	23 2d       	mov	r18, r3
    2242:	2e 7f       	andi	r18, 0xFE	; 254
    2244:	a2 2e       	mov	r10, r18
    2246:	89 14       	cp	r8, r9
    2248:	58 f4       	brcc	.+22     	; 0x2260 <vfprintf+0x2d0>
    224a:	34 fe       	sbrs	r3, 4
    224c:	0b c0       	rjmp	.+22     	; 0x2264 <vfprintf+0x2d4>
    224e:	32 fc       	sbrc	r3, 2
    2250:	09 c0       	rjmp	.+18     	; 0x2264 <vfprintf+0x2d4>
    2252:	83 2d       	mov	r24, r3
    2254:	8e 7e       	andi	r24, 0xEE	; 238
    2256:	a8 2e       	mov	r10, r24
    2258:	05 c0       	rjmp	.+10     	; 0x2264 <vfprintf+0x2d4>
    225a:	b8 2c       	mov	r11, r8
    225c:	a3 2c       	mov	r10, r3
    225e:	03 c0       	rjmp	.+6      	; 0x2266 <vfprintf+0x2d6>
    2260:	b8 2c       	mov	r11, r8
    2262:	01 c0       	rjmp	.+2      	; 0x2266 <vfprintf+0x2d6>
    2264:	b9 2c       	mov	r11, r9
    2266:	a4 fe       	sbrs	r10, 4
    2268:	0f c0       	rjmp	.+30     	; 0x2288 <vfprintf+0x2f8>
    226a:	fe 01       	movw	r30, r28
    226c:	e8 0d       	add	r30, r8
    226e:	f1 1d       	adc	r31, r1
    2270:	80 81       	ld	r24, Z
    2272:	80 33       	cpi	r24, 0x30	; 48
    2274:	21 f4       	brne	.+8      	; 0x227e <vfprintf+0x2ee>
    2276:	9a 2d       	mov	r25, r10
    2278:	99 7e       	andi	r25, 0xE9	; 233
    227a:	a9 2e       	mov	r10, r25
    227c:	09 c0       	rjmp	.+18     	; 0x2290 <vfprintf+0x300>
    227e:	a2 fe       	sbrs	r10, 2
    2280:	06 c0       	rjmp	.+12     	; 0x228e <vfprintf+0x2fe>
    2282:	b3 94       	inc	r11
    2284:	b3 94       	inc	r11
    2286:	04 c0       	rjmp	.+8      	; 0x2290 <vfprintf+0x300>
    2288:	8a 2d       	mov	r24, r10
    228a:	86 78       	andi	r24, 0x86	; 134
    228c:	09 f0       	breq	.+2      	; 0x2290 <vfprintf+0x300>
    228e:	b3 94       	inc	r11
    2290:	a3 fc       	sbrc	r10, 3
    2292:	11 c0       	rjmp	.+34     	; 0x22b6 <vfprintf+0x326>
    2294:	a0 fe       	sbrs	r10, 0
    2296:	06 c0       	rjmp	.+12     	; 0x22a4 <vfprintf+0x314>
    2298:	b2 14       	cp	r11, r2
    229a:	88 f4       	brcc	.+34     	; 0x22be <vfprintf+0x32e>
    229c:	28 0c       	add	r2, r8
    229e:	92 2c       	mov	r9, r2
    22a0:	9b 18       	sub	r9, r11
    22a2:	0e c0       	rjmp	.+28     	; 0x22c0 <vfprintf+0x330>
    22a4:	b2 14       	cp	r11, r2
    22a6:	60 f4       	brcc	.+24     	; 0x22c0 <vfprintf+0x330>
    22a8:	b6 01       	movw	r22, r12
    22aa:	80 e2       	ldi	r24, 0x20	; 32
    22ac:	90 e0       	ldi	r25, 0x00	; 0
    22ae:	0e 94 c8 11 	call	0x2390	; 0x2390 <fputc>
    22b2:	b3 94       	inc	r11
    22b4:	f7 cf       	rjmp	.-18     	; 0x22a4 <vfprintf+0x314>
    22b6:	b2 14       	cp	r11, r2
    22b8:	18 f4       	brcc	.+6      	; 0x22c0 <vfprintf+0x330>
    22ba:	2b 18       	sub	r2, r11
    22bc:	02 c0       	rjmp	.+4      	; 0x22c2 <vfprintf+0x332>
    22be:	98 2c       	mov	r9, r8
    22c0:	21 2c       	mov	r2, r1
    22c2:	a4 fe       	sbrs	r10, 4
    22c4:	10 c0       	rjmp	.+32     	; 0x22e6 <vfprintf+0x356>
    22c6:	b6 01       	movw	r22, r12
    22c8:	80 e3       	ldi	r24, 0x30	; 48
    22ca:	90 e0       	ldi	r25, 0x00	; 0
    22cc:	0e 94 c8 11 	call	0x2390	; 0x2390 <fputc>
    22d0:	a2 fe       	sbrs	r10, 2
    22d2:	17 c0       	rjmp	.+46     	; 0x2302 <vfprintf+0x372>
    22d4:	a1 fc       	sbrc	r10, 1
    22d6:	03 c0       	rjmp	.+6      	; 0x22de <vfprintf+0x34e>
    22d8:	88 e7       	ldi	r24, 0x78	; 120
    22da:	90 e0       	ldi	r25, 0x00	; 0
    22dc:	02 c0       	rjmp	.+4      	; 0x22e2 <vfprintf+0x352>
    22de:	88 e5       	ldi	r24, 0x58	; 88
    22e0:	90 e0       	ldi	r25, 0x00	; 0
    22e2:	b6 01       	movw	r22, r12
    22e4:	0c c0       	rjmp	.+24     	; 0x22fe <vfprintf+0x36e>
    22e6:	8a 2d       	mov	r24, r10
    22e8:	86 78       	andi	r24, 0x86	; 134
    22ea:	59 f0       	breq	.+22     	; 0x2302 <vfprintf+0x372>
    22ec:	a1 fe       	sbrs	r10, 1
    22ee:	02 c0       	rjmp	.+4      	; 0x22f4 <vfprintf+0x364>
    22f0:	8b e2       	ldi	r24, 0x2B	; 43
    22f2:	01 c0       	rjmp	.+2      	; 0x22f6 <vfprintf+0x366>
    22f4:	80 e2       	ldi	r24, 0x20	; 32
    22f6:	a7 fc       	sbrc	r10, 7
    22f8:	8d e2       	ldi	r24, 0x2D	; 45
    22fa:	b6 01       	movw	r22, r12
    22fc:	90 e0       	ldi	r25, 0x00	; 0
    22fe:	0e 94 c8 11 	call	0x2390	; 0x2390 <fputc>
    2302:	89 14       	cp	r8, r9
    2304:	38 f4       	brcc	.+14     	; 0x2314 <vfprintf+0x384>
    2306:	b6 01       	movw	r22, r12
    2308:	80 e3       	ldi	r24, 0x30	; 48
    230a:	90 e0       	ldi	r25, 0x00	; 0
    230c:	0e 94 c8 11 	call	0x2390	; 0x2390 <fputc>
    2310:	9a 94       	dec	r9
    2312:	f7 cf       	rjmp	.-18     	; 0x2302 <vfprintf+0x372>
    2314:	8a 94       	dec	r8
    2316:	f3 01       	movw	r30, r6
    2318:	e8 0d       	add	r30, r8
    231a:	f1 1d       	adc	r31, r1
    231c:	80 81       	ld	r24, Z
    231e:	b6 01       	movw	r22, r12
    2320:	90 e0       	ldi	r25, 0x00	; 0
    2322:	0e 94 c8 11 	call	0x2390	; 0x2390 <fputc>
    2326:	81 10       	cpse	r8, r1
    2328:	f5 cf       	rjmp	.-22     	; 0x2314 <vfprintf+0x384>
    232a:	22 20       	and	r2, r2
    232c:	09 f4       	brne	.+2      	; 0x2330 <vfprintf+0x3a0>
    232e:	42 ce       	rjmp	.-892    	; 0x1fb4 <vfprintf+0x24>
    2330:	b6 01       	movw	r22, r12
    2332:	80 e2       	ldi	r24, 0x20	; 32
    2334:	90 e0       	ldi	r25, 0x00	; 0
    2336:	0e 94 c8 11 	call	0x2390	; 0x2390 <fputc>
    233a:	2a 94       	dec	r2
    233c:	f6 cf       	rjmp	.-20     	; 0x232a <vfprintf+0x39a>
    233e:	f6 01       	movw	r30, r12
    2340:	86 81       	ldd	r24, Z+6	; 0x06
    2342:	97 81       	ldd	r25, Z+7	; 0x07
    2344:	02 c0       	rjmp	.+4      	; 0x234a <vfprintf+0x3ba>
    2346:	8f ef       	ldi	r24, 0xFF	; 255
    2348:	9f ef       	ldi	r25, 0xFF	; 255
    234a:	2b 96       	adiw	r28, 0x0b	; 11
    234c:	e2 e1       	ldi	r30, 0x12	; 18
    234e:	0c 94 7e 12 	jmp	0x24fc	; 0x24fc <__epilogue_restores__>

00002352 <strnlen_P>:
    2352:	fc 01       	movw	r30, r24
    2354:	05 90       	lpm	r0, Z+
    2356:	61 50       	subi	r22, 0x01	; 1
    2358:	70 40       	sbci	r23, 0x00	; 0
    235a:	01 10       	cpse	r0, r1
    235c:	d8 f7       	brcc	.-10     	; 0x2354 <strnlen_P+0x2>
    235e:	80 95       	com	r24
    2360:	90 95       	com	r25
    2362:	8e 0f       	add	r24, r30
    2364:	9f 1f       	adc	r25, r31
    2366:	08 95       	ret

00002368 <memcpy>:
    2368:	fb 01       	movw	r30, r22
    236a:	dc 01       	movw	r26, r24
    236c:	02 c0       	rjmp	.+4      	; 0x2372 <memcpy+0xa>
    236e:	01 90       	ld	r0, Z+
    2370:	0d 92       	st	X+, r0
    2372:	41 50       	subi	r20, 0x01	; 1
    2374:	50 40       	sbci	r21, 0x00	; 0
    2376:	d8 f7       	brcc	.-10     	; 0x236e <memcpy+0x6>
    2378:	08 95       	ret

0000237a <strnlen>:
    237a:	fc 01       	movw	r30, r24
    237c:	61 50       	subi	r22, 0x01	; 1
    237e:	70 40       	sbci	r23, 0x00	; 0
    2380:	01 90       	ld	r0, Z+
    2382:	01 10       	cpse	r0, r1
    2384:	d8 f7       	brcc	.-10     	; 0x237c <strnlen+0x2>
    2386:	80 95       	com	r24
    2388:	90 95       	com	r25
    238a:	8e 0f       	add	r24, r30
    238c:	9f 1f       	adc	r25, r31
    238e:	08 95       	ret

00002390 <fputc>:
    2390:	0f 93       	push	r16
    2392:	1f 93       	push	r17
    2394:	cf 93       	push	r28
    2396:	df 93       	push	r29
    2398:	fb 01       	movw	r30, r22
    239a:	23 81       	ldd	r18, Z+3	; 0x03
    239c:	21 fd       	sbrc	r18, 1
    239e:	03 c0       	rjmp	.+6      	; 0x23a6 <fputc+0x16>
    23a0:	8f ef       	ldi	r24, 0xFF	; 255
    23a2:	9f ef       	ldi	r25, 0xFF	; 255
    23a4:	2c c0       	rjmp	.+88     	; 0x23fe <fputc+0x6e>
    23a6:	22 ff       	sbrs	r18, 2
    23a8:	16 c0       	rjmp	.+44     	; 0x23d6 <fputc+0x46>
    23aa:	46 81       	ldd	r20, Z+6	; 0x06
    23ac:	57 81       	ldd	r21, Z+7	; 0x07
    23ae:	24 81       	ldd	r18, Z+4	; 0x04
    23b0:	35 81       	ldd	r19, Z+5	; 0x05
    23b2:	42 17       	cp	r20, r18
    23b4:	53 07       	cpc	r21, r19
    23b6:	44 f4       	brge	.+16     	; 0x23c8 <fputc+0x38>
    23b8:	a0 81       	ld	r26, Z
    23ba:	b1 81       	ldd	r27, Z+1	; 0x01
    23bc:	9d 01       	movw	r18, r26
    23be:	2f 5f       	subi	r18, 0xFF	; 255
    23c0:	3f 4f       	sbci	r19, 0xFF	; 255
    23c2:	31 83       	std	Z+1, r19	; 0x01
    23c4:	20 83       	st	Z, r18
    23c6:	8c 93       	st	X, r24
    23c8:	26 81       	ldd	r18, Z+6	; 0x06
    23ca:	37 81       	ldd	r19, Z+7	; 0x07
    23cc:	2f 5f       	subi	r18, 0xFF	; 255
    23ce:	3f 4f       	sbci	r19, 0xFF	; 255
    23d0:	37 83       	std	Z+7, r19	; 0x07
    23d2:	26 83       	std	Z+6, r18	; 0x06
    23d4:	14 c0       	rjmp	.+40     	; 0x23fe <fputc+0x6e>
    23d6:	8b 01       	movw	r16, r22
    23d8:	ec 01       	movw	r28, r24
    23da:	fb 01       	movw	r30, r22
    23dc:	00 84       	ldd	r0, Z+8	; 0x08
    23de:	f1 85       	ldd	r31, Z+9	; 0x09
    23e0:	e0 2d       	mov	r30, r0
    23e2:	09 95       	icall
    23e4:	89 2b       	or	r24, r25
    23e6:	e1 f6       	brne	.-72     	; 0x23a0 <fputc+0x10>
    23e8:	d8 01       	movw	r26, r16
    23ea:	16 96       	adiw	r26, 0x06	; 6
    23ec:	8d 91       	ld	r24, X+
    23ee:	9c 91       	ld	r25, X
    23f0:	17 97       	sbiw	r26, 0x07	; 7
    23f2:	01 96       	adiw	r24, 0x01	; 1
    23f4:	17 96       	adiw	r26, 0x07	; 7
    23f6:	9c 93       	st	X, r25
    23f8:	8e 93       	st	-X, r24
    23fa:	16 97       	sbiw	r26, 0x06	; 6
    23fc:	ce 01       	movw	r24, r28
    23fe:	df 91       	pop	r29
    2400:	cf 91       	pop	r28
    2402:	1f 91       	pop	r17
    2404:	0f 91       	pop	r16
    2406:	08 95       	ret

00002408 <__ultoa_invert>:
    2408:	fa 01       	movw	r30, r20
    240a:	aa 27       	eor	r26, r26
    240c:	28 30       	cpi	r18, 0x08	; 8
    240e:	51 f1       	breq	.+84     	; 0x2464 <__ultoa_invert+0x5c>
    2410:	20 31       	cpi	r18, 0x10	; 16
    2412:	81 f1       	breq	.+96     	; 0x2474 <__ultoa_invert+0x6c>
    2414:	e8 94       	clt
    2416:	6f 93       	push	r22
    2418:	6e 7f       	andi	r22, 0xFE	; 254
    241a:	6e 5f       	subi	r22, 0xFE	; 254
    241c:	7f 4f       	sbci	r23, 0xFF	; 255
    241e:	8f 4f       	sbci	r24, 0xFF	; 255
    2420:	9f 4f       	sbci	r25, 0xFF	; 255
    2422:	af 4f       	sbci	r26, 0xFF	; 255
    2424:	b1 e0       	ldi	r27, 0x01	; 1
    2426:	3e d0       	rcall	.+124    	; 0x24a4 <__ultoa_invert+0x9c>
    2428:	b4 e0       	ldi	r27, 0x04	; 4
    242a:	3c d0       	rcall	.+120    	; 0x24a4 <__ultoa_invert+0x9c>
    242c:	67 0f       	add	r22, r23
    242e:	78 1f       	adc	r23, r24
    2430:	89 1f       	adc	r24, r25
    2432:	9a 1f       	adc	r25, r26
    2434:	a1 1d       	adc	r26, r1
    2436:	68 0f       	add	r22, r24
    2438:	79 1f       	adc	r23, r25
    243a:	8a 1f       	adc	r24, r26
    243c:	91 1d       	adc	r25, r1
    243e:	a1 1d       	adc	r26, r1
    2440:	6a 0f       	add	r22, r26
    2442:	71 1d       	adc	r23, r1
    2444:	81 1d       	adc	r24, r1
    2446:	91 1d       	adc	r25, r1
    2448:	a1 1d       	adc	r26, r1
    244a:	20 d0       	rcall	.+64     	; 0x248c <__ultoa_invert+0x84>
    244c:	09 f4       	brne	.+2      	; 0x2450 <__ultoa_invert+0x48>
    244e:	68 94       	set
    2450:	3f 91       	pop	r19
    2452:	2a e0       	ldi	r18, 0x0A	; 10
    2454:	26 9f       	mul	r18, r22
    2456:	11 24       	eor	r1, r1
    2458:	30 19       	sub	r19, r0
    245a:	30 5d       	subi	r19, 0xD0	; 208
    245c:	31 93       	st	Z+, r19
    245e:	de f6       	brtc	.-74     	; 0x2416 <__ultoa_invert+0xe>
    2460:	cf 01       	movw	r24, r30
    2462:	08 95       	ret
    2464:	46 2f       	mov	r20, r22
    2466:	47 70       	andi	r20, 0x07	; 7
    2468:	40 5d       	subi	r20, 0xD0	; 208
    246a:	41 93       	st	Z+, r20
    246c:	b3 e0       	ldi	r27, 0x03	; 3
    246e:	0f d0       	rcall	.+30     	; 0x248e <__ultoa_invert+0x86>
    2470:	c9 f7       	brne	.-14     	; 0x2464 <__ultoa_invert+0x5c>
    2472:	f6 cf       	rjmp	.-20     	; 0x2460 <__ultoa_invert+0x58>
    2474:	46 2f       	mov	r20, r22
    2476:	4f 70       	andi	r20, 0x0F	; 15
    2478:	40 5d       	subi	r20, 0xD0	; 208
    247a:	4a 33       	cpi	r20, 0x3A	; 58
    247c:	18 f0       	brcs	.+6      	; 0x2484 <__ultoa_invert+0x7c>
    247e:	49 5d       	subi	r20, 0xD9	; 217
    2480:	31 fd       	sbrc	r19, 1
    2482:	40 52       	subi	r20, 0x20	; 32
    2484:	41 93       	st	Z+, r20
    2486:	02 d0       	rcall	.+4      	; 0x248c <__ultoa_invert+0x84>
    2488:	a9 f7       	brne	.-22     	; 0x2474 <__ultoa_invert+0x6c>
    248a:	ea cf       	rjmp	.-44     	; 0x2460 <__ultoa_invert+0x58>
    248c:	b4 e0       	ldi	r27, 0x04	; 4
    248e:	a6 95       	lsr	r26
    2490:	97 95       	ror	r25
    2492:	87 95       	ror	r24
    2494:	77 95       	ror	r23
    2496:	67 95       	ror	r22
    2498:	ba 95       	dec	r27
    249a:	c9 f7       	brne	.-14     	; 0x248e <__ultoa_invert+0x86>
    249c:	00 97       	sbiw	r24, 0x00	; 0
    249e:	61 05       	cpc	r22, r1
    24a0:	71 05       	cpc	r23, r1
    24a2:	08 95       	ret
    24a4:	9b 01       	movw	r18, r22
    24a6:	ac 01       	movw	r20, r24
    24a8:	0a 2e       	mov	r0, r26
    24aa:	06 94       	lsr	r0
    24ac:	57 95       	ror	r21
    24ae:	47 95       	ror	r20
    24b0:	37 95       	ror	r19
    24b2:	27 95       	ror	r18
    24b4:	ba 95       	dec	r27
    24b6:	c9 f7       	brne	.-14     	; 0x24aa <__ultoa_invert+0xa2>
    24b8:	62 0f       	add	r22, r18
    24ba:	73 1f       	adc	r23, r19
    24bc:	84 1f       	adc	r24, r20
    24be:	95 1f       	adc	r25, r21
    24c0:	a0 1d       	adc	r26, r0
    24c2:	08 95       	ret

000024c4 <__prologue_saves__>:
    24c4:	2f 92       	push	r2
    24c6:	3f 92       	push	r3
    24c8:	4f 92       	push	r4
    24ca:	5f 92       	push	r5
    24cc:	6f 92       	push	r6
    24ce:	7f 92       	push	r7
    24d0:	8f 92       	push	r8
    24d2:	9f 92       	push	r9
    24d4:	af 92       	push	r10
    24d6:	bf 92       	push	r11
    24d8:	cf 92       	push	r12
    24da:	df 92       	push	r13
    24dc:	ef 92       	push	r14
    24de:	ff 92       	push	r15
    24e0:	0f 93       	push	r16
    24e2:	1f 93       	push	r17
    24e4:	cf 93       	push	r28
    24e6:	df 93       	push	r29
    24e8:	cd b7       	in	r28, 0x3d	; 61
    24ea:	de b7       	in	r29, 0x3e	; 62
    24ec:	ca 1b       	sub	r28, r26
    24ee:	db 0b       	sbc	r29, r27
    24f0:	0f b6       	in	r0, 0x3f	; 63
    24f2:	f8 94       	cli
    24f4:	de bf       	out	0x3e, r29	; 62
    24f6:	0f be       	out	0x3f, r0	; 63
    24f8:	cd bf       	out	0x3d, r28	; 61
    24fa:	09 94       	ijmp

000024fc <__epilogue_restores__>:
    24fc:	2a 88       	ldd	r2, Y+18	; 0x12
    24fe:	39 88       	ldd	r3, Y+17	; 0x11
    2500:	48 88       	ldd	r4, Y+16	; 0x10
    2502:	5f 84       	ldd	r5, Y+15	; 0x0f
    2504:	6e 84       	ldd	r6, Y+14	; 0x0e
    2506:	7d 84       	ldd	r7, Y+13	; 0x0d
    2508:	8c 84       	ldd	r8, Y+12	; 0x0c
    250a:	9b 84       	ldd	r9, Y+11	; 0x0b
    250c:	aa 84       	ldd	r10, Y+10	; 0x0a
    250e:	b9 84       	ldd	r11, Y+9	; 0x09
    2510:	c8 84       	ldd	r12, Y+8	; 0x08
    2512:	df 80       	ldd	r13, Y+7	; 0x07
    2514:	ee 80       	ldd	r14, Y+6	; 0x06
    2516:	fd 80       	ldd	r15, Y+5	; 0x05
    2518:	0c 81       	ldd	r16, Y+4	; 0x04
    251a:	1b 81       	ldd	r17, Y+3	; 0x03
    251c:	aa 81       	ldd	r26, Y+2	; 0x02
    251e:	b9 81       	ldd	r27, Y+1	; 0x01
    2520:	ce 0f       	add	r28, r30
    2522:	d1 1d       	adc	r29, r1
    2524:	0f b6       	in	r0, 0x3f	; 63
    2526:	f8 94       	cli
    2528:	de bf       	out	0x3e, r29	; 62
    252a:	0f be       	out	0x3f, r0	; 63
    252c:	cd bf       	out	0x3d, r28	; 61
    252e:	ed 01       	movw	r28, r26
    2530:	08 95       	ret

00002532 <_exit>:
    2532:	f8 94       	cli

00002534 <__stop_program>:
    2534:	ff cf       	rjmp	.-2      	; 0x2534 <__stop_program>
