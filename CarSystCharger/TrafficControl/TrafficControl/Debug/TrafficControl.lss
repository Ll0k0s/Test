
TrafficControl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000026  00800100  00001e7a  00001f0e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001e7a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000021f  00800126  00800126  00001f34  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001f34  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001f90  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000658  00000000  00000000  00001fd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001324d  00000000  00000000  00002628  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002f78  00000000  00000000  00015875  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004460  00000000  00000000  000187ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001338  00000000  00000000  0001cc50  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004581  00000000  00000000  0001df88  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00007602  00000000  00000000  00022509  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000678  00000000  00000000  00029b0b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__ctors_end>
       4:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
       8:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
       c:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      10:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      14:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      18:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      1c:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      20:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      24:	0c 94 e3 01 	jmp	0x3c6	; 0x3c6 <__vector_9>
      28:	0c 94 0f 05 	jmp	0xa1e	; 0xa1e <__vector_10>
      2c:	0c 94 41 05 	jmp	0xa82	; 0xa82 <__vector_11>
      30:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      34:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      38:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      3c:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      40:	0c 94 e2 09 	jmp	0x13c4	; 0x13c4 <__vector_16>
      44:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      48:	0c 94 02 09 	jmp	0x1204	; 0x1204 <__vector_18>
      4c:	0c 94 34 09 	jmp	0x1268	; 0x1268 <__vector_19>
      50:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      54:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      58:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      5c:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      60:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      64:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      68:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      6c:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      70:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      74:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      78:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      7c:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      80:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      84:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      88:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      8c:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      90:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      94:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      98:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      9c:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      a0:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      a4:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      a8:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      ac:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      b0:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>

000000b4 <__trampolines_end>:
      b4:	63 6f       	ori	r22, 0xF3	; 243
      b6:	6d 6d       	ori	r22, 0xDD	; 221
      b8:	3a 20       	and	r3, r10
      ba:	75 6e       	ori	r23, 0xE5	; 229
      bc:	64 65       	ori	r22, 0x54	; 84
      be:	66 69       	ori	r22, 0x96	; 150
      c0:	6e 65       	ori	r22, 0x5E	; 94
      c2:	64 20       	and	r6, r4
      c4:	63 6f       	ori	r22, 0xF3	; 243
      c6:	6d 6d       	ori	r22, 0xDD	; 221
      c8:	61 6e       	ori	r22, 0xE1	; 225
      ca:	64 0a       	sbc	r6, r20
	...

000000cd <_ZZN4UART4readEvE3__c_0>:
      cd:	63 6f 6d 6d 3a 20 25 73 0a 00                       comm: %s..

000000d7 <_ZZN4UART4readEvE3__c>:
      d7:	63 6f 6d 6d 3a 20 62 75 66 66 65 72 20 6f 76 65     comm: buffer ove
      e7:	72 66 6c 6f 77 0a 00                                rflow..

000000ee <_ZZ5setupE3__c>:
      ee:	54 65 73 74 20 42 6f 61 72 64 20 25 64 0a 00        Test Board %d..

000000fd <digital_pin_to_bit_mask_PGM>:
      fd:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     10d:	04 08 10 20                                         ... 

00000111 <digital_pin_to_port_PGM>:
     111:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     121:	03 03 03 03                                         ....

00000125 <port_to_output_PGM>:
     125:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

0000012f <port_to_mode_PGM>:
     12f:	00 00 00 00 24 00 27 00 2a 00 00                    ....$.'.*..

0000013a <__ctors_start>:
     13a:	a9 07       	cpc	r26, r25
     13c:	64 09       	sbc	r22, r4

0000013e <__ctors_end>:
     13e:	11 24       	eor	r1, r1
     140:	1f be       	out	0x3f, r1	; 63
     142:	cf ef       	ldi	r28, 0xFF	; 255
     144:	d8 e0       	ldi	r29, 0x08	; 8
     146:	de bf       	out	0x3e, r29	; 62
     148:	cd bf       	out	0x3d, r28	; 61

0000014a <__do_copy_data>:
     14a:	11 e0       	ldi	r17, 0x01	; 1
     14c:	a0 e0       	ldi	r26, 0x00	; 0
     14e:	b1 e0       	ldi	r27, 0x01	; 1
     150:	ea e7       	ldi	r30, 0x7A	; 122
     152:	fe e1       	ldi	r31, 0x1E	; 30
     154:	02 c0       	rjmp	.+4      	; 0x15a <__do_copy_data+0x10>
     156:	05 90       	lpm	r0, Z+
     158:	0d 92       	st	X+, r0
     15a:	a6 32       	cpi	r26, 0x26	; 38
     15c:	b1 07       	cpc	r27, r17
     15e:	d9 f7       	brne	.-10     	; 0x156 <__do_copy_data+0xc>

00000160 <__do_clear_bss>:
     160:	23 e0       	ldi	r18, 0x03	; 3
     162:	a6 e2       	ldi	r26, 0x26	; 38
     164:	b1 e0       	ldi	r27, 0x01	; 1
     166:	01 c0       	rjmp	.+2      	; 0x16a <.do_clear_bss_start>

00000168 <.do_clear_bss_loop>:
     168:	1d 92       	st	X+, r1

0000016a <.do_clear_bss_start>:
     16a:	a5 34       	cpi	r26, 0x45	; 69
     16c:	b2 07       	cpc	r27, r18
     16e:	e1 f7       	brne	.-8      	; 0x168 <.do_clear_bss_loop>

00000170 <__do_global_ctors>:
     170:	10 e0       	ldi	r17, 0x00	; 0
     172:	cf e9       	ldi	r28, 0x9F	; 159
     174:	d0 e0       	ldi	r29, 0x00	; 0
     176:	04 c0       	rjmp	.+8      	; 0x180 <__do_global_ctors+0x10>
     178:	21 97       	sbiw	r28, 0x01	; 1
     17a:	fe 01       	movw	r30, r28
     17c:	0e 94 df 0a 	call	0x15be	; 0x15be <__tablejump2__>
     180:	cd 39       	cpi	r28, 0x9D	; 157
     182:	d1 07       	cpc	r29, r17
     184:	c9 f7       	brne	.-14     	; 0x178 <__do_global_ctors+0x8>
     186:	0e 94 92 09 	call	0x1324	; 0x1324 <main>
     18a:	0c 94 3b 0f 	jmp	0x1e76	; 0x1e76 <_exit>

0000018e <__bad_interrupt>:
     18e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000192 <_ZN10LocoPacketC1Ev>:

#if ENA_MODE_W_EEPROM == 0

extern UART uart;

LocoPacket::LocoPacket()
     192:	fc 01       	movw	r30, r24
     194:	8c ed       	ldi	r24, 0xDC	; 220
     196:	95 e0       	ldi	r25, 0x05	; 5
     198:	93 8b       	std	Z+19, r25	; 0x13
     19a:	82 8b       	std	Z+18, r24	; 0x12
     19c:	88 ec       	ldi	r24, 0xC8	; 200
     19e:	90 e0       	ldi	r25, 0x00	; 0
     1a0:	95 8b       	std	Z+21, r25	; 0x15
     1a2:	84 8b       	std	Z+20, r24	; 0x14
     1a4:	80 ed       	ldi	r24, 0xD0	; 208
     1a6:	97 e0       	ldi	r25, 0x07	; 7
     1a8:	97 8b       	std	Z+23, r25	; 0x17
     1aa:	86 8b       	std	Z+22, r24	; 0x16
     1ac:	08 95       	ret

000001ae <_ZN10LocoPacket7send_B2Ejb>:
	}
}

//отправка по LocoNet2 команды B2
void LocoPacket::send_B2(uint16_t addr_B2, bool state)
{
     1ae:	cf 93       	push	r28
     1b0:	df 93       	push	r29
     1b2:	cd b7       	in	r28, 0x3d	; 61
     1b4:	de b7       	in	r29, 0x3e	; 62
     1b6:	60 97       	sbiw	r28, 0x10	; 16
     1b8:	0f b6       	in	r0, 0x3f	; 63
     1ba:	f8 94       	cli
     1bc:	de bf       	out	0x3e, r29	; 62
     1be:	0f be       	out	0x3f, r0	; 63
     1c0:	cd bf       	out	0x3d, r28	; 61
	#if SHOW_LOCONET
	uart.print(PSTR("[Tx][%dB2_%d]\n"), state, addr_B2);
	#endif
	
	uint8_t board = (addr_B2) / 16;
     1c2:	cb 01       	movw	r24, r22
     1c4:	e4 e0       	ldi	r30, 0x04	; 4
     1c6:	96 95       	lsr	r25
     1c8:	87 95       	ror	r24
     1ca:	ea 95       	dec	r30
     1cc:	e1 f7       	brne	.-8      	; 0x1c6 <_ZN10LocoPacket7send_B2Ejb+0x18>
	uint8_t input = (addr_B2) % 16;
     1ce:	26 2f       	mov	r18, r22
     1d0:	2f 70       	andi	r18, 0x0F	; 15
	uint16_t result, input_2;
	lnMsg	Ln2TxPacket;

	if (input == 0 || input == 1) input_2 = 0;
     1d2:	22 30       	cpi	r18, 0x02	; 2
     1d4:	d0 f0       	brcs	.+52     	; 0x20a <_ZN10LocoPacket7send_B2Ejb+0x5c>
	else if (input == 2 || input == 3) input_2 = 1;
     1d6:	3e ef       	ldi	r19, 0xFE	; 254
     1d8:	32 0f       	add	r19, r18
     1da:	32 30       	cpi	r19, 0x02	; 2
     1dc:	c8 f0       	brcs	.+50     	; 0x210 <_ZN10LocoPacket7send_B2Ejb+0x62>
	else if (input == 4 || input == 5) input_2 = 2;
     1de:	3c ef       	ldi	r19, 0xFC	; 252
     1e0:	32 0f       	add	r19, r18
     1e2:	32 30       	cpi	r19, 0x02	; 2
     1e4:	c0 f0       	brcs	.+48     	; 0x216 <_ZN10LocoPacket7send_B2Ejb+0x68>
	else if (input == 6 || input == 7) input_2 = 3;
     1e6:	3a ef       	ldi	r19, 0xFA	; 250
     1e8:	32 0f       	add	r19, r18
     1ea:	32 30       	cpi	r19, 0x02	; 2
     1ec:	b8 f0       	brcs	.+46     	; 0x21c <_ZN10LocoPacket7send_B2Ejb+0x6e>
	else if (input == 8 || input == 9) input_2 = 4;
     1ee:	38 ef       	ldi	r19, 0xF8	; 248
     1f0:	32 0f       	add	r19, r18
     1f2:	32 30       	cpi	r19, 0x02	; 2
     1f4:	b0 f0       	brcs	.+44     	; 0x222 <_ZN10LocoPacket7send_B2Ejb+0x74>
	else if (input == 10 || input == 11) input_2 = 5;
     1f6:	36 ef       	ldi	r19, 0xF6	; 246
     1f8:	32 0f       	add	r19, r18
     1fa:	32 30       	cpi	r19, 0x02	; 2
     1fc:	a8 f0       	brcs	.+42     	; 0x228 <_ZN10LocoPacket7send_B2Ejb+0x7a>
	else if (input == 12 || input == 13) input_2 = 6;
     1fe:	2c 50       	subi	r18, 0x0C	; 12
     200:	22 30       	cpi	r18, 0x02	; 2
     202:	a8 f4       	brcc	.+42     	; 0x22e <_ZN10LocoPacket7send_B2Ejb+0x80>
     204:	26 e0       	ldi	r18, 0x06	; 6
     206:	30 e0       	ldi	r19, 0x00	; 0
     208:	14 c0       	rjmp	.+40     	; 0x232 <_ZN10LocoPacket7send_B2Ejb+0x84>
	uint8_t board = (addr_B2) / 16;
	uint8_t input = (addr_B2) % 16;
	uint16_t result, input_2;
	lnMsg	Ln2TxPacket;

	if (input == 0 || input == 1) input_2 = 0;
     20a:	20 e0       	ldi	r18, 0x00	; 0
     20c:	30 e0       	ldi	r19, 0x00	; 0
     20e:	11 c0       	rjmp	.+34     	; 0x232 <_ZN10LocoPacket7send_B2Ejb+0x84>
	else if (input == 2 || input == 3) input_2 = 1;
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	0e c0       	rjmp	.+28     	; 0x232 <_ZN10LocoPacket7send_B2Ejb+0x84>
	else if (input == 4 || input == 5) input_2 = 2;
     216:	22 e0       	ldi	r18, 0x02	; 2
     218:	30 e0       	ldi	r19, 0x00	; 0
     21a:	0b c0       	rjmp	.+22     	; 0x232 <_ZN10LocoPacket7send_B2Ejb+0x84>
	else if (input == 6 || input == 7) input_2 = 3;
     21c:	23 e0       	ldi	r18, 0x03	; 3
     21e:	30 e0       	ldi	r19, 0x00	; 0
     220:	08 c0       	rjmp	.+16     	; 0x232 <_ZN10LocoPacket7send_B2Ejb+0x84>
	else if (input == 8 || input == 9) input_2 = 4;
     222:	24 e0       	ldi	r18, 0x04	; 4
     224:	30 e0       	ldi	r19, 0x00	; 0
     226:	05 c0       	rjmp	.+10     	; 0x232 <_ZN10LocoPacket7send_B2Ejb+0x84>
	else if (input == 10 || input == 11) input_2 = 5;
     228:	25 e0       	ldi	r18, 0x05	; 5
     22a:	30 e0       	ldi	r19, 0x00	; 0
     22c:	02 c0       	rjmp	.+4      	; 0x232 <_ZN10LocoPacket7send_B2Ejb+0x84>
	else if (input == 12 || input == 13) input_2 = 6;
	else if (input == 14 || input == 15) input_2 = 7;
     22e:	27 e0       	ldi	r18, 0x07	; 7
     230:	30 e0       	ldi	r19, 0x00	; 0
	else input_2 = 0;

	result = board;                       //    [0,0,0,0,0,0,0,0][B7,B6,B5,B4,B3,B2,B1,B0]
	result <<= 3;                         //    [0,0,0,0,0,B7,B6,B5][B4,B3,B2,B1,B0,0,0,0]
     232:	99 27       	eor	r25, r25
     234:	53 e0       	ldi	r21, 0x03	; 3
     236:	88 0f       	add	r24, r24
     238:	99 1f       	adc	r25, r25
     23a:	5a 95       	dec	r21
     23c:	e1 f7       	brne	.-8      	; 0x236 <_ZN10LocoPacket7send_B2Ejb+0x88>
	result += input_2;                    //	[0,0,0,0,0,B7,B6,B5][B4,B3,B2,B1,B0,I2,I1,I0] == [0,0,0,0,0,A10,A9,A8][A7,A6,A5,A4,A3,A2,A1,A0]
     23e:	82 0f       	add	r24, r18
     240:	93 1f       	adc	r25, r19

	Ln2TxPacket.data[0] = 0xB2;
     242:	22 eb       	ldi	r18, 0xB2	; 178
     244:	29 83       	std	Y+1, r18	; 0x01
	Ln2TxPacket.data[1] = (uint8_t)(result & 0x7F);  //	0b01111111			- select A6....A0
     246:	28 2f       	mov	r18, r24
     248:	2f 77       	andi	r18, 0x7F	; 127
     24a:	2a 83       	std	Y+2, r18	; 0x02
	Ln2TxPacket.data[2] = (uint8_t)(result >> 7);    //	0b11110000000 >> 7	- select A10...A7
     24c:	88 0f       	add	r24, r24
     24e:	89 2f       	mov	r24, r25
     250:	88 1f       	adc	r24, r24
     252:	99 0b       	sbc	r25, r25
     254:	91 95       	neg	r25

	if (state)
     256:	41 11       	cpse	r20, r1
	Ln2TxPacket.data[2] |= 0x10; // Set L
     258:	80 61       	ori	r24, 0x10	; 16
     25a:	8b 83       	std	Y+3, r24	; 0x03

	if (input == 1 || input == 3 || input == 5 || input == 7 || input == 9 || input == 11 || input == 13 || input == 15)
     25c:	69 70       	andi	r22, 0x09	; 9
     25e:	61 30       	cpi	r22, 0x01	; 1
     260:	11 f0       	breq	.+4      	; 0x266 <_ZN10LocoPacket7send_B2Ejb+0xb8>
     262:	69 30       	cpi	r22, 0x09	; 9
     264:	19 f4       	brne	.+6      	; 0x26c <_ZN10LocoPacket7send_B2Ejb+0xbe>
	Ln2TxPacket.data[2] |= 0x20; // Set I
     266:	8b 81       	ldd	r24, Y+3	; 0x03
     268:	80 62       	ori	r24, 0x20	; 32
     26a:	8b 83       	std	Y+3, r24	; 0x03

	Ln2TxPacket.data[2] |= 0x40; //  Set X = 1
     26c:	8b 81       	ldd	r24, Y+3	; 0x03
     26e:	80 64       	ori	r24, 0x40	; 64
     270:	8b 83       	std	Y+3, r24	; 0x03

	LocoNet.send(&Ln2TxPacket);
     272:	be 01       	movw	r22, r28
     274:	6f 5f       	subi	r22, 0xFF	; 255
     276:	7f 4f       	sbci	r23, 0xFF	; 255
     278:	86 e2       	ldi	r24, 0x26	; 38
     27a:	91 e0       	ldi	r25, 0x01	; 1
     27c:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <_ZN12LocoNetClass4sendEP5lnMsg>
}
     280:	60 96       	adiw	r28, 0x10	; 16
     282:	0f b6       	in	r0, 0x3f	; 63
     284:	f8 94       	cli
     286:	de bf       	out	0x3e, r29	; 62
     288:	0f be       	out	0x3f, r0	; 63
     28a:	cd bf       	out	0x3d, r28	; 61
     28c:	df 91       	pop	r29
     28e:	cf 91       	pop	r28
     290:	08 95       	ret

00000292 <_ZN10LocoPacket13send_B2_helloEv>:

void LocoPacket::send_B2_hello()
{
	send_B2(LOCO_START_B2_HELLO_BOARDS + ADDR_BOARD, true);
     292:	41 e0       	ldi	r20, 0x01	; 1
     294:	60 e0       	ldi	r22, 0x00	; 0
     296:	70 e0       	ldi	r23, 0x00	; 0
     298:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <_ZN10LocoPacket7send_B2Ejb>

0000029c <_ZN10LocoPacket7read_B2Ejb>:
}

#pragma region B2
void LocoPacket::read_B2(uint16_t addr_B2, bool state)
{
	addr_B2--;
     29c:	61 50       	subi	r22, 0x01	; 1
     29e:	71 09       	sbc	r23, r1
	if ( (addr_B2 == LOCO_START_B2_HELLO_BOARDS + ADDR_BOARD) || (addr_B2 == LOCO_FINISH_B2_HELLO) ) {
     2a0:	19 f0       	breq	.+6      	; 0x2a8 <_ZN10LocoPacket7read_B2Ejb+0xc>
     2a2:	67 3c       	cpi	r22, 0xC7	; 199
     2a4:	71 05       	cpc	r23, r1
     2a6:	21 f4       	brne	.+8      	; 0x2b0 <_ZN10LocoPacket7read_B2Ejb+0x14>
		if (state == false) {
     2a8:	41 11       	cpse	r20, r1
     2aa:	02 c0       	rjmp	.+4      	; 0x2b0 <_ZN10LocoPacket7read_B2Ejb+0x14>
			send_B2_hello();
     2ac:	0c 94 49 01 	jmp	0x292	; 0x292 <_ZN10LocoPacket13send_B2_helloEv>
     2b0:	08 95       	ret

000002b2 <_ZN10LocoPacket4readEv>:
LocoPacket::LocoPacket()
{
}

lnMsg* LocoPacket::read()
{
     2b2:	df 92       	push	r13
     2b4:	ef 92       	push	r14
     2b6:	ff 92       	push	r15
     2b8:	0f 93       	push	r16
     2ba:	1f 93       	push	r17
     2bc:	cf 93       	push	r28
     2be:	df 93       	push	r29
     2c0:	cd b7       	in	r28, 0x3d	; 61
     2c2:	de b7       	in	r29, 0x3e	; 62
     2c4:	60 97       	sbiw	r28, 0x10	; 16
     2c6:	0f b6       	in	r0, 0x3f	; 63
     2c8:	f8 94       	cli
     2ca:	de bf       	out	0x3e, r29	; 62
     2cc:	0f be       	out	0x3f, r0	; 63
     2ce:	cd bf       	out	0x3d, r28	; 61
     2d0:	8c 01       	movw	r16, r24
					break;
				}
				case 0xBB: {
					if (this->lnrx->data[1] == 0x03) {
						lnMsg Ln2TxPacket;
						Ln2TxPacket.data[0] = 0xE7;
     2d2:	97 ee       	ldi	r25, 0xE7	; 231
     2d4:	f9 2e       	mov	r15, r25
						Ln2TxPacket.data[1] = 0x0E;
     2d6:	2e e0       	ldi	r18, 0x0E	; 14
     2d8:	e2 2e       	mov	r14, r18
						Ln2TxPacket.data[2] = 0x03;
						Ln2TxPacket.data[3] = 0x00;
						Ln2TxPacket.data[4] = 0x00;
						Ln2TxPacket.data[5] = 0x00;
						Ln2TxPacket.data[6] = 0x00;
						Ln2TxPacket.data[7] = 0x47;
     2da:	37 e4       	ldi	r19, 0x47	; 71
     2dc:	d3 2e       	mov	r13, r19
{
}

lnMsg* LocoPacket::read()
{
	while(LocoNet.available() > 0) {
     2de:	86 e2       	ldi	r24, 0x26	; 38
     2e0:	91 e0       	ldi	r25, 0x01	; 1
     2e2:	0e 94 a7 03 	call	0x74e	; 0x74e <_ZN12LocoNetClass9availableEv>
     2e6:	88 23       	and	r24, r24
     2e8:	09 f4       	brne	.+2      	; 0x2ec <_ZN10LocoPacket4readEv+0x3a>
     2ea:	4e c0       	rjmp	.+156    	; 0x388 <_ZN10LocoPacket4readEv+0xd6>
		this->lnrx = LocoNet.receive();
     2ec:	86 e2       	ldi	r24, 0x26	; 38
     2ee:	91 e0       	ldi	r25, 0x01	; 1
     2f0:	0e 94 b4 03 	call	0x768	; 0x768 <_ZN12LocoNetClass7receiveEv>
     2f4:	fc 01       	movw	r30, r24
     2f6:	d8 01       	movw	r26, r16
     2f8:	8d 93       	st	X+, r24
     2fa:	9c 93       	st	X, r25
		if (this->lnrx != NULL) {
     2fc:	89 2b       	or	r24, r25
     2fe:	b9 f1       	breq	.+110    	; 0x36e <_ZN10LocoPacket4readEv+0xbc>
	
			uint16_t Address = (this->lnrx->srq.sw1 | ( ( this->lnrx->srq.sw2 & 0x0F ) << 7 ));
     300:	81 81       	ldd	r24, Z+1	; 0x01
     302:	42 81       	ldd	r20, Z+2	; 0x02
     304:	64 2f       	mov	r22, r20
     306:	6f 70       	andi	r22, 0x0F	; 15
     308:	b0 e8       	ldi	r27, 0x80	; 128
     30a:	6b 9f       	mul	r22, r27
     30c:	b0 01       	movw	r22, r0
     30e:	11 24       	eor	r1, r1
     310:	68 2b       	or	r22, r24
			if( this->lnrx->sr.command != OPC_INPUT_REP ) {
     312:	90 81       	ld	r25, Z
     314:	92 3b       	cpi	r25, 0xB2	; 178
     316:	19 f0       	breq	.+6      	; 0x31e <_ZN10LocoPacket4readEv+0x6c>
			//uart.print(PSTR("read LocoPack: addr %d\n"), Address);
			//for (uint8_t i = 0; i < 16; i++) {
				//uart.print(PSTR("%d "), this->lnrx->data[i]);
			//}
			//uart.print(PSTR("\n"));
			switch (this->lnrx->data[0]) {
     318:	9b 3b       	cpi	r25, 0xBB	; 187
     31a:	91 f0       	breq	.+36     	; 0x340 <_ZN10LocoPacket4readEv+0x8e>
     31c:	e0 cf       	rjmp	.-64     	; 0x2de <_ZN10LocoPacket4readEv+0x2c>
				case 0xB2: {
					Address <<= 1 ;
     31e:	66 0f       	add	r22, r22
     320:	77 1f       	adc	r23, r23
					Address += ( this->lnrx->ir.in2 & OPC_INPUT_REP_SW ) ? 2 : 1 ;
     322:	45 fd       	sbrc	r20, 5
     324:	03 c0       	rjmp	.+6      	; 0x32c <_ZN10LocoPacket4readEv+0x7a>
     326:	81 e0       	ldi	r24, 0x01	; 1
     328:	90 e0       	ldi	r25, 0x00	; 0
     32a:	02 c0       	rjmp	.+4      	; 0x330 <_ZN10LocoPacket4readEv+0x7e>
     32c:	82 e0       	ldi	r24, 0x02	; 2
     32e:	90 e0       	ldi	r25, 0x00	; 0
					this->read_B2(Address, (bool)(this->lnrx->ir.in2 & OPC_INPUT_REP_HI));
     330:	42 95       	swap	r20
     332:	41 70       	andi	r20, 0x01	; 1
     334:	68 0f       	add	r22, r24
     336:	79 1f       	adc	r23, r25
     338:	c8 01       	movw	r24, r16
     33a:	0e 94 4e 01 	call	0x29c	; 0x29c <_ZN10LocoPacket7read_B2Ejb>
					break;
     33e:	cf cf       	rjmp	.-98     	; 0x2de <_ZN10LocoPacket4readEv+0x2c>
				case 0xB0: {
					this->read_B0(Address, (bool)(this->lnrx->srq.sw2 & OPC_SW_REQ_OUT), (bool)(this->lnrx->srq.sw2 & OPC_SW_REQ_DIR));
					break;
				}
				case 0xBB: {
					if (this->lnrx->data[1] == 0x03) {
     340:	83 30       	cpi	r24, 0x03	; 3
     342:	69 f6       	brne	.-102    	; 0x2de <_ZN10LocoPacket4readEv+0x2c>
						lnMsg Ln2TxPacket;
						Ln2TxPacket.data[0] = 0xE7;
     344:	f9 82       	std	Y+1, r15	; 0x01
						Ln2TxPacket.data[1] = 0x0E;
     346:	ea 82       	std	Y+2, r14	; 0x02
						Ln2TxPacket.data[2] = 0x03;
     348:	8b 83       	std	Y+3, r24	; 0x03
						Ln2TxPacket.data[3] = 0x00;
     34a:	1c 82       	std	Y+4, r1	; 0x04
						Ln2TxPacket.data[4] = 0x00;
     34c:	1d 82       	std	Y+5, r1	; 0x05
						Ln2TxPacket.data[5] = 0x00;
     34e:	1e 82       	std	Y+6, r1	; 0x06
						Ln2TxPacket.data[6] = 0x00;
     350:	1f 82       	std	Y+7, r1	; 0x07
						Ln2TxPacket.data[7] = 0x47;
     352:	d8 86       	std	Y+8, r13	; 0x08
						Ln2TxPacket.data[8] = 0x00;
     354:	19 86       	std	Y+9, r1	; 0x09
						Ln2TxPacket.data[9] = 0x00;
     356:	1a 86       	std	Y+10, r1	; 0x0a
						Ln2TxPacket.data[10] = 0x00;
     358:	1b 86       	std	Y+11, r1	; 0x0b
						Ln2TxPacket.data[11] = 0x00;
     35a:	1c 86       	std	Y+12, r1	; 0x0c
						Ln2TxPacket.data[12] = 0x00;
     35c:	1d 86       	std	Y+13, r1	; 0x0d
						LocoNet.send(&Ln2TxPacket);
     35e:	be 01       	movw	r22, r28
     360:	6f 5f       	subi	r22, 0xFF	; 255
     362:	7f 4f       	sbci	r23, 0xFF	; 255
     364:	86 e2       	ldi	r24, 0x26	; 38
     366:	91 e0       	ldi	r25, 0x01	; 1
     368:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <_ZN12LocoNetClass4sendEP5lnMsg>
     36c:	b8 cf       	rjmp	.-144    	; 0x2de <_ZN10LocoPacket4readEv+0x2c>
     36e:	80 e0       	ldi	r24, 0x00	; 0
     370:	90 e0       	ldi	r25, 0x00	; 0
					}
				}
			}
		} else {
			for (uint8_t i = 0; i < 16; i++) {
				this->lnrx->data[i] = 0x00;
     372:	d8 01       	movw	r26, r16
     374:	ed 91       	ld	r30, X+
     376:	fc 91       	ld	r31, X
     378:	e8 0f       	add	r30, r24
     37a:	f9 1f       	adc	r31, r25
     37c:	10 82       	st	Z, r1
     37e:	01 96       	adiw	r24, 0x01	; 1
						LocoNet.send(&Ln2TxPacket);
					}
				}
			}
		} else {
			for (uint8_t i = 0; i < 16; i++) {
     380:	80 31       	cpi	r24, 0x10	; 16
     382:	91 05       	cpc	r25, r1
     384:	b1 f7       	brne	.-20     	; 0x372 <_ZN10LocoPacket4readEv+0xc0>
     386:	ab cf       	rjmp	.-170    	; 0x2de <_ZN10LocoPacket4readEv+0x2c>
				this->lnrx->data[i] = 0x00;
			}
		}
	}

}
     388:	60 96       	adiw	r28, 0x10	; 16
     38a:	0f b6       	in	r0, 0x3f	; 63
     38c:	f8 94       	cli
     38e:	de bf       	out	0x3e, r29	; 62
     390:	0f be       	out	0x3f, r0	; 63
     392:	cd bf       	out	0x3d, r28	; 61
     394:	df 91       	pop	r29
     396:	cf 91       	pop	r28
     398:	1f 91       	pop	r17
     39a:	0f 91       	pop	r16
     39c:	ff 90       	pop	r15
     39e:	ef 90       	pop	r14
     3a0:	df 90       	pop	r13
     3a2:	08 95       	ret

000003a4 <_Z15logic_timer_1Hzv>:



//логика таймера
void logic_timer_1Hz()
{
     3a4:	08 95       	ret

000003a6 <_ZN5TimerC1Ev>:
#include "Timer.h"
#if ENA_MODE_W_EEPROM == 0

Timer::Timer()
{
	this->cnt_1Hz = 0;
     3a6:	fc 01       	movw	r30, r24
     3a8:	11 82       	std	Z+1, r1	; 0x01
     3aa:	10 82       	st	Z, r1
	this->ena_timer_1Hz = false;
     3ac:	12 82       	std	Z+2, r1	; 0x02
	
	TCCR2B |= (0 << CS22) | (1 << CS21) | (0 << CS20);
     3ae:	e1 eb       	ldi	r30, 0xB1	; 177
     3b0:	f0 e0       	ldi	r31, 0x00	; 0
     3b2:	80 81       	ld	r24, Z
     3b4:	82 60       	ori	r24, 0x02	; 2
     3b6:	80 83       	st	Z, r24
	TIMSK2 |= (1 << TOIE2);		//enable interrupt
     3b8:	e0 e7       	ldi	r30, 0x70	; 112
     3ba:	f0 e0       	ldi	r31, 0x00	; 0
     3bc:	80 81       	ld	r24, Z
     3be:	81 60       	ori	r24, 0x01	; 1
     3c0:	80 83       	st	Z, r24
	sei();
     3c2:	78 94       	sei
     3c4:	08 95       	ret

000003c6 <__vector_9>:
}

ISR(TIMER2_OVF_vect)	// F = 16MHz / (8 * 200) = 10 000 Hz
{
     3c6:	1f 92       	push	r1
     3c8:	0f 92       	push	r0
     3ca:	0f b6       	in	r0, 0x3f	; 63
     3cc:	0f 92       	push	r0
     3ce:	11 24       	eor	r1, r1
     3d0:	8f 93       	push	r24
     3d2:	9f 93       	push	r25
	TIMSK2 &= ~(1 << TOIE2);			//disable interrupt
     3d4:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>
     3d8:	8e 7f       	andi	r24, 0xFE	; 254
     3da:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>
	TCNT2 = 0xFF - 220;
     3de:	83 e2       	ldi	r24, 0x23	; 35
     3e0:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
	if (timer.cnt_1Hz >= 163) {
     3e4:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <timer>
     3e8:	90 91 57 02 	lds	r25, 0x0257	; 0x800257 <timer+0x1>
     3ec:	83 3a       	cpi	r24, 0xA3	; 163
     3ee:	91 05       	cpc	r25, r1
     3f0:	40 f0       	brcs	.+16     	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
		timer.ena_timer_1Hz = true;
     3f2:	81 e0       	ldi	r24, 0x01	; 1
     3f4:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <timer+0x2>
		timer.cnt_1Hz = 0;
     3f8:	10 92 57 02 	sts	0x0257, r1	; 0x800257 <timer+0x1>
     3fc:	10 92 56 02 	sts	0x0256, r1	; 0x800256 <timer>
     400:	05 c0       	rjmp	.+10     	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
	} else {
		timer.cnt_1Hz++;
     402:	01 96       	adiw	r24, 0x01	; 1
     404:	90 93 57 02 	sts	0x0257, r25	; 0x800257 <timer+0x1>
     408:	80 93 56 02 	sts	0x0256, r24	; 0x800256 <timer>
	}

	TIMSK2 |= (1 << TOIE2);				//enable interrupt
     40c:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>
     410:	81 60       	ori	r24, 0x01	; 1
     412:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>
}
     416:	9f 91       	pop	r25
     418:	8f 91       	pop	r24
     41a:	0f 90       	pop	r0
     41c:	0f be       	out	0x3f, r0	; 63
     41e:	0f 90       	pop	r0
     420:	1f 90       	pop	r1
     422:	18 95       	reti

00000424 <_ZN4UARTC1Ev>:

extern LocoPacket loco;

UART::UART()
{
	this->cnt_rx_read = 0;
     424:	fc 01       	movw	r30, r24
     426:	ef 5b       	subi	r30, 0xBF	; 191
     428:	ff 4f       	sbci	r31, 0xFF	; 255
     42a:	10 82       	st	Z, r1
	this->cnt_rx_save = 0;
     42c:	31 97       	sbiw	r30, 0x01	; 1
     42e:	10 82       	st	Z, r1
     430:	08 95       	ret

00000432 <_ZN4UART5printEPKcz>:
}

void UART::print(const char* typeFormat, ...) {
     432:	ef 92       	push	r14
     434:	ff 92       	push	r15
     436:	0f 93       	push	r16
     438:	1f 93       	push	r17
     43a:	cf 93       	push	r28
     43c:	df 93       	push	r29
     43e:	cd b7       	in	r28, 0x3d	; 61
     440:	de b7       	in	r29, 0x3e	; 62
	va_list args;
	va_start(args, typeFormat);
	size_t bufferSize = vsnprintf_P(NULL, 0, typeFormat, args) + 1;
     442:	9e 01       	movw	r18, r28
     444:	23 5f       	subi	r18, 0xF3	; 243
     446:	3f 4f       	sbci	r19, 0xFF	; 255
     448:	4b 85       	ldd	r20, Y+11	; 0x0b
     44a:	5c 85       	ldd	r21, Y+12	; 0x0c
     44c:	60 e0       	ldi	r22, 0x00	; 0
     44e:	70 e0       	ldi	r23, 0x00	; 0
     450:	80 e0       	ldi	r24, 0x00	; 0
     452:	90 e0       	ldi	r25, 0x00	; 0
     454:	0e 94 3e 0c 	call	0x187c	; 0x187c <vsnprintf_P>
     458:	01 96       	adiw	r24, 0x01	; 1
     45a:	7c 01       	movw	r14, r24
	char* buffer = (char*)malloc(bufferSize);
     45c:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <malloc>
     460:	8c 01       	movw	r16, r24
	if (buffer) {
     462:	00 97       	sbiw	r24, 0x00	; 0
     464:	81 f0       	breq	.+32     	; 0x486 <_ZN4UART5printEPKcz+0x54>
		vsnprintf_P(buffer, bufferSize, typeFormat, args);
     466:	9e 01       	movw	r18, r28
     468:	23 5f       	subi	r18, 0xF3	; 243
     46a:	3f 4f       	sbci	r19, 0xFF	; 255
     46c:	4b 85       	ldd	r20, Y+11	; 0x0b
     46e:	5c 85       	ldd	r21, Y+12	; 0x0c
     470:	b7 01       	movw	r22, r14
     472:	0e 94 3e 0c 	call	0x187c	; 0x187c <vsnprintf_P>
		Serial.print(buffer);
     476:	b8 01       	movw	r22, r16
     478:	8b e9       	ldi	r24, 0x9B	; 155
     47a:	92 e0       	ldi	r25, 0x02	; 2
     47c:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <_ZN5Print5printEPKc>
		free(buffer);
     480:	c8 01       	movw	r24, r16
     482:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <free>
	}
	va_end(args);
}
     486:	df 91       	pop	r29
     488:	cf 91       	pop	r28
     48a:	1f 91       	pop	r17
     48c:	0f 91       	pop	r16
     48e:	ff 90       	pop	r15
     490:	ef 90       	pop	r14
     492:	08 95       	ret

00000494 <_ZN4UART13clear_buff_rxEv>:


void UART::clear_buff_rx()
{
     494:	fc 01       	movw	r30, r24
     496:	9c 01       	movw	r18, r24
     498:	20 5c       	subi	r18, 0xC0	; 192
     49a:	3f 4f       	sbci	r19, 0xFF	; 255
	for (uint8_t i = 0; i < UART_BUF_RX_SIZE; i++) {
		this->buff_rx[i] = 0;
     49c:	11 92       	st	Z+, r1
}


void UART::clear_buff_rx()
{
	for (uint8_t i = 0; i < UART_BUF_RX_SIZE; i++) {
     49e:	e2 17       	cp	r30, r18
     4a0:	f3 07       	cpc	r31, r19
     4a2:	e1 f7       	brne	.-8      	; 0x49c <_ZN4UART13clear_buff_rxEv+0x8>
		this->buff_rx[i] = 0;
	}
	this->cnt_rx_save = 0;
     4a4:	10 82       	st	Z, r1
	this->cnt_rx_read = 0;
     4a6:	fc 01       	movw	r30, r24
     4a8:	ef 5b       	subi	r30, 0xBF	; 191
     4aa:	ff 4f       	sbci	r31, 0xFF	; 255
     4ac:	10 82       	st	Z, r1
     4ae:	08 95       	ret

000004b0 <_ZN4UART9read_nameEPKc>:
}

bool UART::read_name(const char* str)
{
     4b0:	cf 93       	push	r28
     4b2:	df 93       	push	r29
	uint8_t cnt_rx_read = this->cnt_rx_read;
	if (this->cnt_rx_save >= strlen(str)) {
     4b4:	fb 01       	movw	r30, r22
     4b6:	01 90       	ld	r0, Z+
     4b8:	00 20       	and	r0, r0
     4ba:	e9 f7       	brne	.-6      	; 0x4b6 <_ZN4UART9read_nameEPKc+0x6>
     4bc:	31 97       	sbiw	r30, 0x01	; 1
     4be:	e6 1b       	sub	r30, r22
     4c0:	f7 0b       	sbc	r31, r23
     4c2:	dc 01       	movw	r26, r24
     4c4:	a0 5c       	subi	r26, 0xC0	; 192
     4c6:	bf 4f       	sbci	r27, 0xFF	; 255
     4c8:	2c 91       	ld	r18, X
     4ca:	30 e0       	ldi	r19, 0x00	; 0
     4cc:	2e 17       	cp	r18, r30
     4ce:	3f 07       	cpc	r19, r31
     4d0:	58 f1       	brcs	.+86     	; 0x528 <_ZN4UART9read_nameEPKc+0x78>
	this->cnt_rx_read = 0;
}

bool UART::read_name(const char* str)
{
	uint8_t cnt_rx_read = this->cnt_rx_read;
     4d2:	fc 01       	movw	r30, r24
     4d4:	ef 5b       	subi	r30, 0xBF	; 191
     4d6:	ff 4f       	sbci	r31, 0xFF	; 255
     4d8:	c0 81       	ld	r28, Z
     4da:	30 e0       	ldi	r19, 0x00	; 0
	if (this->cnt_rx_save >= strlen(str)) {
		for (uint8_t i = 0; i < strlen(str); i++, this->cnt_rx_read++) {
     4dc:	43 2f       	mov	r20, r19
     4de:	50 e0       	ldi	r21, 0x00	; 0
     4e0:	db 01       	movw	r26, r22
     4e2:	0d 90       	ld	r0, X+
     4e4:	00 20       	and	r0, r0
     4e6:	e9 f7       	brne	.-6      	; 0x4e2 <_ZN4UART9read_nameEPKc+0x32>
     4e8:	11 97       	sbiw	r26, 0x01	; 1
     4ea:	a6 1b       	sub	r26, r22
     4ec:	b7 0b       	sbc	r27, r23
			if (this->buff_rx[this->cnt_rx_read] != str[i]) {
				this->cnt_rx_read = cnt_rx_read;
				return 0;
			}
		}
		if (this->buff_rx[this->cnt_rx_read] == 32) {
     4ee:	20 81       	ld	r18, Z

bool UART::read_name(const char* str)
{
	uint8_t cnt_rx_read = this->cnt_rx_read;
	if (this->cnt_rx_save >= strlen(str)) {
		for (uint8_t i = 0; i < strlen(str); i++, this->cnt_rx_read++) {
     4f0:	4a 17       	cp	r20, r26
     4f2:	5b 07       	cpc	r21, r27
     4f4:	80 f4       	brcc	.+32     	; 0x516 <_ZN4UART9read_nameEPKc+0x66>
			if (this->buff_rx[this->cnt_rx_read] != str[i]) {
     4f6:	dc 01       	movw	r26, r24
     4f8:	a2 0f       	add	r26, r18
     4fa:	b1 1d       	adc	r27, r1
     4fc:	46 0f       	add	r20, r22
     4fe:	57 1f       	adc	r21, r23
     500:	dc 91       	ld	r29, X
     502:	da 01       	movw	r26, r20
     504:	4c 91       	ld	r20, X
     506:	d4 17       	cp	r29, r20
     508:	11 f0       	breq	.+4      	; 0x50e <_ZN4UART9read_nameEPKc+0x5e>
				this->cnt_rx_read = cnt_rx_read;
     50a:	c0 83       	st	Z, r28
     50c:	0d c0       	rjmp	.+26     	; 0x528 <_ZN4UART9read_nameEPKc+0x78>

bool UART::read_name(const char* str)
{
	uint8_t cnt_rx_read = this->cnt_rx_read;
	if (this->cnt_rx_save >= strlen(str)) {
		for (uint8_t i = 0; i < strlen(str); i++, this->cnt_rx_read++) {
     50e:	3f 5f       	subi	r19, 0xFF	; 255
     510:	2f 5f       	subi	r18, 0xFF	; 255
     512:	20 83       	st	Z, r18
     514:	e3 cf       	rjmp	.-58     	; 0x4dc <_ZN4UART9read_nameEPKc+0x2c>
			if (this->buff_rx[this->cnt_rx_read] != str[i]) {
				this->cnt_rx_read = cnt_rx_read;
				return 0;
			}
		}
		if (this->buff_rx[this->cnt_rx_read] == 32) {
     516:	dc 01       	movw	r26, r24
     518:	a2 0f       	add	r26, r18
     51a:	b1 1d       	adc	r27, r1
     51c:	8c 91       	ld	r24, X
     51e:	80 32       	cpi	r24, 0x20	; 32
     520:	29 f4       	brne	.+10     	; 0x52c <_ZN4UART9read_nameEPKc+0x7c>
			this->cnt_rx_read++;
     522:	2f 5f       	subi	r18, 0xFF	; 255
     524:	20 83       	st	Z, r18
     526:	02 c0       	rjmp	.+4      	; 0x52c <_ZN4UART9read_nameEPKc+0x7c>
		}
		return 1;
	}
	this->cnt_rx_read = cnt_rx_read;
	return 0;
     528:	80 e0       	ldi	r24, 0x00	; 0
     52a:	01 c0       	rjmp	.+2      	; 0x52e <_ZN4UART9read_nameEPKc+0x7e>
			if (this->buff_rx[this->cnt_rx_read] != str[i]) {
				this->cnt_rx_read = cnt_rx_read;
				return 0;
			}
		}
		if (this->buff_rx[this->cnt_rx_read] == 32) {
     52c:	81 e0       	ldi	r24, 0x01	; 1
		}
		return 1;
	}
	this->cnt_rx_read = cnt_rx_read;
	return 0;
}
     52e:	df 91       	pop	r29
     530:	cf 91       	pop	r28
     532:	08 95       	ret

00000534 <_ZN4UART8read_numEv>:

uint16_t UART::read_num()
{
     534:	cf 92       	push	r12
     536:	df 92       	push	r13
     538:	ef 92       	push	r14
     53a:	ff 92       	push	r15
     53c:	0f 93       	push	r16
     53e:	1f 93       	push	r17
     540:	cf 93       	push	r28
     542:	df 93       	push	r29
     544:	cd b7       	in	r28, 0x3d	; 61
     546:	de b7       	in	r29, 0x3e	; 62
     548:	60 97       	sbiw	r28, 0x10	; 16
     54a:	0f b6       	in	r0, 0x3f	; 63
     54c:	f8 94       	cli
     54e:	de bf       	out	0x3e, r29	; 62
     550:	0f be       	out	0x3f, r0	; 63
     552:	cd bf       	out	0x3d, r28	; 61
     554:	dc 01       	movw	r26, r24
	char num[16] = {0};
     556:	be 01       	movw	r22, r28
     558:	6f 5f       	subi	r22, 0xFF	; 255
     55a:	7f 4f       	sbci	r23, 0xFF	; 255
     55c:	80 e1       	ldi	r24, 0x10	; 16
     55e:	fb 01       	movw	r30, r22
     560:	11 92       	st	Z+, r1
     562:	8a 95       	dec	r24
     564:	e9 f7       	brne	.-6      	; 0x560 <_ZN4UART8read_numEv+0x2c>
	uint16_t n = 0xFFFF;

	for (uint8_t i = 0; i < strlen(this->buff_rx); i++, this->cnt_rx_read++) {
     566:	20 e0       	ldi	r18, 0x00	; 0
		if ((this->buff_rx[this->cnt_rx_read] == 0)
     568:	8d 01       	movw	r16, r26
     56a:	0f 5b       	subi	r16, 0xBF	; 191
     56c:	1f 4f       	sbci	r17, 0xFF	; 255
uint16_t UART::read_num()
{
	char num[16] = {0};
	uint16_t n = 0xFFFF;

	for (uint8_t i = 0; i < strlen(this->buff_rx); i++, this->cnt_rx_read++) {
     56e:	fd 01       	movw	r30, r26
     570:	01 90       	ld	r0, Z+
     572:	00 20       	and	r0, r0
     574:	e9 f7       	brne	.-6      	; 0x570 <_ZN4UART8read_numEv+0x3c>
     576:	31 97       	sbiw	r30, 0x01	; 1
     578:	6f 01       	movw	r12, r30
     57a:	ca 1a       	sub	r12, r26
     57c:	db 0a       	sbc	r13, r27
     57e:	42 2f       	mov	r20, r18
     580:	50 e0       	ldi	r21, 0x00	; 0
     582:	4c 15       	cp	r20, r12
     584:	5d 05       	cpc	r21, r13
     586:	a8 f4       	brcc	.+42     	; 0x5b2 <_ZN4UART8read_numEv+0x7e>
		if ((this->buff_rx[this->cnt_rx_read] == 0)
     588:	f8 01       	movw	r30, r16
     58a:	90 81       	ld	r25, Z
     58c:	7d 01       	movw	r14, r26
     58e:	e9 0e       	add	r14, r25
     590:	f1 1c       	adc	r15, r1
     592:	f7 01       	movw	r30, r14
     594:	80 81       	ld	r24, Z
     596:	38 2f       	mov	r19, r24
     598:	3f 7d       	andi	r19, 0xDF	; 223
     59a:	11 f4       	brne	.+4      	; 0x5a0 <_ZN4UART8read_numEv+0x6c>
		|| (this->buff_rx[this->cnt_rx_read] == 32)) {
			i = strlen(this->buff_rx);
     59c:	2c 2d       	mov	r18, r12
     59e:	04 c0       	rjmp	.+8      	; 0x5a8 <_ZN4UART8read_numEv+0x74>
			} else {
			num[i] = this->buff_rx[this->cnt_rx_read];
     5a0:	fb 01       	movw	r30, r22
     5a2:	e4 0f       	add	r30, r20
     5a4:	f5 1f       	adc	r31, r21
     5a6:	80 83       	st	Z, r24
uint16_t UART::read_num()
{
	char num[16] = {0};
	uint16_t n = 0xFFFF;

	for (uint8_t i = 0; i < strlen(this->buff_rx); i++, this->cnt_rx_read++) {
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	9f 5f       	subi	r25, 0xFF	; 255
     5ac:	f8 01       	movw	r30, r16
     5ae:	90 83       	st	Z, r25
     5b0:	de cf       	rjmp	.-68     	; 0x56e <_ZN4UART8read_numEv+0x3a>
			i = strlen(this->buff_rx);
			} else {
			num[i] = this->buff_rx[this->cnt_rx_read];
		}
	}
	if (strlen(num) != 0) {
     5b2:	89 81       	ldd	r24, Y+1	; 0x01
     5b4:	88 23       	and	r24, r24
     5b6:	21 f0       	breq	.+8      	; 0x5c0 <_ZN4UART8read_numEv+0x8c>
		return atoi(num);
     5b8:	cb 01       	movw	r24, r22
     5ba:	0e 94 06 0c 	call	0x180c	; 0x180c <atoi>
     5be:	02 c0       	rjmp	.+4      	; 0x5c4 <_ZN4UART8read_numEv+0x90>
		} else {
		return 0xFFFF;
     5c0:	8f ef       	ldi	r24, 0xFF	; 255
     5c2:	9f ef       	ldi	r25, 0xFF	; 255
	}
}
     5c4:	60 96       	adiw	r28, 0x10	; 16
     5c6:	0f b6       	in	r0, 0x3f	; 63
     5c8:	f8 94       	cli
     5ca:	de bf       	out	0x3e, r29	; 62
     5cc:	0f be       	out	0x3f, r0	; 63
     5ce:	cd bf       	out	0x3d, r28	; 61
     5d0:	df 91       	pop	r29
     5d2:	cf 91       	pop	r28
     5d4:	1f 91       	pop	r17
     5d6:	0f 91       	pop	r16
     5d8:	ff 90       	pop	r15
     5da:	ef 90       	pop	r14
     5dc:	df 90       	pop	r13
     5de:	cf 90       	pop	r12
     5e0:	08 95       	ret

000005e2 <_ZN4UART9read_commEv>:
		}
	}
}

void UART::read_comm()
{
     5e2:	cf 93       	push	r28
     5e4:	df 93       	push	r29
     5e6:	d8 2f       	mov	r29, r24
     5e8:	c9 2f       	mov	r28, r25
	if (read_name("b2 on")) {		//command: [b2 on ][addr_B2]
     5ea:	66 e0       	ldi	r22, 0x06	; 6
     5ec:	71 e0       	ldi	r23, 0x01	; 1
     5ee:	0e 94 58 02 	call	0x4b0	; 0x4b0 <_ZN4UART9read_nameEPKc>
     5f2:	88 23       	and	r24, r24
     5f4:	29 f0       	breq	.+10     	; 0x600 <_ZN4UART9read_commEv+0x1e>
		uint16_t addr_B2 = read_num();
     5f6:	8d 2f       	mov	r24, r29
     5f8:	9c 2f       	mov	r25, r28
     5fa:	0e 94 9a 02 	call	0x534	; 0x534 <_ZN4UART8read_numEv>
     5fe:	14 c0       	rjmp	.+40     	; 0x628 <_ZN4UART9read_commEv+0x46>

	} else if (read_name("b2 off")) {		//command: [b2 off ][addr_B2]
     600:	6c e0       	ldi	r22, 0x0C	; 12
     602:	71 e0       	ldi	r23, 0x01	; 1
     604:	8d 2f       	mov	r24, r29
     606:	9c 2f       	mov	r25, r28
     608:	0e 94 58 02 	call	0x4b0	; 0x4b0 <_ZN4UART9read_nameEPKc>
     60c:	81 11       	cpse	r24, r1
     60e:	f3 cf       	rjmp	.-26     	; 0x5f6 <_ZN4UART9read_commEv+0x14>
		uint16_t addr_B2 = read_num();

	} else {
		print(PSTR("comm: undefined command\n"));
     610:	84 eb       	ldi	r24, 0xB4	; 180
     612:	90 e0       	ldi	r25, 0x00	; 0
     614:	9f 93       	push	r25
     616:	8f 93       	push	r24
     618:	cf 93       	push	r28
     61a:	df 93       	push	r29
     61c:	0e 94 19 02 	call	0x432	; 0x432 <_ZN4UART5printEPKcz>
     620:	0f 90       	pop	r0
     622:	0f 90       	pop	r0
     624:	0f 90       	pop	r0
     626:	0f 90       	pop	r0
	}
	this->clear_buff_rx();
     628:	8d 2f       	mov	r24, r29
     62a:	9c 2f       	mov	r25, r28
}
     62c:	df 91       	pop	r29
     62e:	cf 91       	pop	r28
		uint16_t addr_B2 = read_num();

	} else {
		print(PSTR("comm: undefined command\n"));
	}
	this->clear_buff_rx();
     630:	0c 94 4a 02 	jmp	0x494	; 0x494 <_ZN4UART13clear_buff_rxEv>

00000634 <_ZN4UART4readEv>:
		return 0xFFFF;
	}
}

void UART::read(void)
{
     634:	0f 93       	push	r16
     636:	1f 93       	push	r17
     638:	cf 93       	push	r28
     63a:	df 93       	push	r29
     63c:	ec 01       	movw	r28, r24
	if (Serial.available() > 0) {
     63e:	8b e9       	ldi	r24, 0x9B	; 155
     640:	92 e0       	ldi	r25, 0x02	; 2
     642:	0e 94 b5 07 	call	0xf6a	; 0xf6a <_ZN14HardwareSerial9availableEv>
     646:	18 16       	cp	r1, r24
     648:	19 06       	cpc	r1, r25
     64a:	0c f0       	brlt	.+2      	; 0x64e <_ZN4UART4readEv+0x1a>
     64c:	42 c0       	rjmp	.+132    	; 0x6d2 <_ZN4UART4readEv+0x9e>
		uint8_t data = Serial.read();
     64e:	8b e9       	ldi	r24, 0x9B	; 155
     650:	92 e0       	ldi	r25, 0x02	; 2
     652:	0e 94 cf 07 	call	0xf9e	; 0xf9e <_ZN14HardwareSerial4readEv>
		if ((data != 13) && (data != 10)) {
     656:	8d 30       	cpi	r24, 0x0D	; 13
     658:	e1 f1       	breq	.+120    	; 0x6d2 <_ZN4UART4readEv+0x9e>
     65a:	8a 30       	cpi	r24, 0x0A	; 10
     65c:	19 f1       	breq	.+70     	; 0x6a4 <_ZN4UART4readEv+0x70>
			this->buff_rx[this->cnt_rx_save] = data;
     65e:	8e 01       	movw	r16, r28
     660:	00 5c       	subi	r16, 0xC0	; 192
     662:	1f 4f       	sbci	r17, 0xFF	; 255
     664:	f8 01       	movw	r30, r16
     666:	90 81       	ld	r25, Z
     668:	fe 01       	movw	r30, r28
     66a:	e9 0f       	add	r30, r25
     66c:	f1 1d       	adc	r31, r1
     66e:	80 83       	st	Z, r24
			this->cnt_rx_save++;
     670:	81 e0       	ldi	r24, 0x01	; 1
     672:	89 0f       	add	r24, r25
     674:	f8 01       	movw	r30, r16
     676:	80 83       	st	Z, r24
			if (this->cnt_rx_save == UART_BUF_RX_MASK) {
     678:	8f 33       	cpi	r24, 0x3F	; 63
     67a:	79 f4       	brne	.+30     	; 0x69a <_ZN4UART4readEv+0x66>
				print(PSTR("comm: buffer overflow\n"));
     67c:	87 ed       	ldi	r24, 0xD7	; 215
     67e:	90 e0       	ldi	r25, 0x00	; 0
     680:	9f 93       	push	r25
     682:	8f 93       	push	r24
     684:	df 93       	push	r29
     686:	cf 93       	push	r28
     688:	0e 94 19 02 	call	0x432	; 0x432 <_ZN4UART5printEPKcz>
				this->clear_buff_rx();
     68c:	ce 01       	movw	r24, r28
     68e:	0e 94 4a 02 	call	0x494	; 0x494 <_ZN4UART13clear_buff_rxEv>
     692:	0f 90       	pop	r0
     694:	0f 90       	pop	r0
     696:	0f 90       	pop	r0
     698:	0f 90       	pop	r0
			}
			this->cnt_rx_save &= UART_BUF_RX_MASK;
     69a:	f8 01       	movw	r30, r16
     69c:	80 81       	ld	r24, Z
     69e:	8f 73       	andi	r24, 0x3F	; 63
     6a0:	80 83       	st	Z, r24
     6a2:	17 c0       	rjmp	.+46     	; 0x6d2 <_ZN4UART4readEv+0x9e>
			} else if (data == 10) {
			print(PSTR("comm: %s\n"), this->buff_rx);
     6a4:	df 93       	push	r29
     6a6:	cf 93       	push	r28
     6a8:	8d ec       	ldi	r24, 0xCD	; 205
     6aa:	90 e0       	ldi	r25, 0x00	; 0
     6ac:	9f 93       	push	r25
     6ae:	8f 93       	push	r24
     6b0:	df 93       	push	r29
     6b2:	cf 93       	push	r28
     6b4:	0e 94 19 02 	call	0x432	; 0x432 <_ZN4UART5printEPKcz>
			read_comm();
     6b8:	0f 90       	pop	r0
     6ba:	0f 90       	pop	r0
     6bc:	0f 90       	pop	r0
     6be:	0f 90       	pop	r0
     6c0:	0f 90       	pop	r0
     6c2:	0f 90       	pop	r0
     6c4:	ce 01       	movw	r24, r28
		}
	}
}
     6c6:	df 91       	pop	r29
     6c8:	cf 91       	pop	r28
     6ca:	1f 91       	pop	r17
     6cc:	0f 91       	pop	r16
				this->clear_buff_rx();
			}
			this->cnt_rx_save &= UART_BUF_RX_MASK;
			} else if (data == 10) {
			print(PSTR("comm: %s\n"), this->buff_rx);
			read_comm();
     6ce:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <_ZN4UART9read_commEv>
		}
	}
}
     6d2:	df 91       	pop	r29
     6d4:	cf 91       	pop	r28
     6d6:	1f 91       	pop	r17
     6d8:	0f 91       	pop	r16
     6da:	08 95       	ret

000006dc <_ZN12LocoNetClass8setTxPinEh>:
		lnMsg* m = (lnMsg *)&(LnBuffer.Buf[ LnBuffer.ReadIndex ]);
		return getLnMsgSize(m);
  } 
  else
		return 0;
}
     6dc:	cf 93       	push	r28
     6de:	c6 2f       	mov	r28, r22
     6e0:	61 e0       	ldi	r22, 0x01	; 1
     6e2:	8c 2f       	mov	r24, r28
     6e4:	0e 94 81 0a 	call	0x1502	; 0x1502 <pinMode>
     6e8:	6c 2f       	mov	r22, r28
     6ea:	70 e0       	ldi	r23, 0x00	; 0
     6ec:	fb 01       	movw	r30, r22
     6ee:	e3 50       	subi	r30, 0x03	; 3
     6f0:	ff 4f       	sbci	r31, 0xFF	; 255
     6f2:	24 91       	lpm	r18, Z
     6f4:	fb 01       	movw	r30, r22
     6f6:	ef 5e       	subi	r30, 0xEF	; 239
     6f8:	fe 4f       	sbci	r31, 0xFE	; 254
     6fa:	e4 91       	lpm	r30, Z
     6fc:	f0 e0       	ldi	r31, 0x00	; 0
     6fe:	ee 0f       	add	r30, r30
     700:	ff 1f       	adc	r31, r31
     702:	eb 5d       	subi	r30, 0xDB	; 219
     704:	fe 4f       	sbci	r31, 0xFE	; 254
     706:	45 91       	lpm	r20, Z+
     708:	54 91       	lpm	r21, Z
     70a:	60 e0       	ldi	r22, 0x00	; 0
     70c:	91 e0       	ldi	r25, 0x01	; 1
     70e:	81 e0       	ldi	r24, 0x01	; 1
     710:	92 17       	cp	r25, r18
     712:	41 f0       	breq	.+16     	; 0x724 <_ZN12LocoNetClass8setTxPinEh+0x48>
     714:	6f 5f       	subi	r22, 0xFF	; 255
     716:	98 2f       	mov	r25, r24
     718:	06 2e       	mov	r0, r22
     71a:	01 c0       	rjmp	.+2      	; 0x71e <_ZN12LocoNetClass8setTxPinEh+0x42>
     71c:	99 0f       	add	r25, r25
     71e:	0a 94       	dec	r0
     720:	ea f7       	brpl	.-6      	; 0x71c <_ZN12LocoNetClass8setTxPinEh+0x40>
     722:	f6 cf       	rjmp	.-20     	; 0x710 <_ZN12LocoNetClass8setTxPinEh+0x34>
     724:	ca 01       	movw	r24, r20
     726:	cf 91       	pop	r28
     728:	0c 94 08 05 	jmp	0xa10	; 0xa10 <_Z15setTxPortAndPinPVhh>

0000072c <_ZN12LocoNetClass4initEh>:
     72c:	1f 93       	push	r17
     72e:	cf 93       	push	r28
     730:	df 93       	push	r29
     732:	ec 01       	movw	r28, r24
     734:	16 2f       	mov	r17, r22
     736:	0e 94 ee 03 	call	0x7dc	; 0x7dc <initLnBuf>
     73a:	61 2f       	mov	r22, r17
     73c:	ce 01       	movw	r24, r28
     73e:	0e 94 6e 03 	call	0x6dc	; 0x6dc <_ZN12LocoNetClass8setTxPinEh>
     742:	ce 01       	movw	r24, r28
     744:	df 91       	pop	r29
     746:	cf 91       	pop	r28
     748:	1f 91       	pop	r17
     74a:	0c 94 90 06 	jmp	0xd20	; 0xd20 <_Z19initLocoNetHardwareP5LnBuf>

0000074e <_ZN12LocoNetClass9availableEv>:
     74e:	dc 01       	movw	r26, r24
     750:	a6 50       	subi	r26, 0x06	; 6
     752:	bf 4f       	sbci	r27, 0xFF	; 255
     754:	fc 01       	movw	r30, r24
     756:	e5 50       	subi	r30, 0x05	; 5
     758:	ff 4f       	sbci	r31, 0xFF	; 255
     75a:	81 e0       	ldi	r24, 0x01	; 1
     75c:	2c 91       	ld	r18, X
     75e:	90 81       	ld	r25, Z
     760:	29 13       	cpse	r18, r25
     762:	01 c0       	rjmp	.+2      	; 0x766 <_ZN12LocoNetClass9availableEv+0x18>
     764:	80 e0       	ldi	r24, 0x00	; 0
     766:	08 95       	ret

00000768 <_ZN12LocoNetClass7receiveEv>:

lnMsg* LocoNetClass::receive(void)
{
  return recvLnMsg(&LnBuffer);
     768:	0c 94 f7 03 	jmp	0x7ee	; 0x7ee <recvLnMsg>

0000076c <_ZN12LocoNetClass4sendEP5lnMsgh>:
    LN_UNKNOWN -      Indicates an abnormal exit condition for the send attempt.
                        In this case, it is recommended to make another send 
                        attempt.
*/
LN_STATUS LocoNetClass::send(lnMsg *pPacket, uint8_t ucPrioDelay)
{
     76c:	cf 92       	push	r12
     76e:	df 92       	push	r13
     770:	ff 92       	push	r15
     772:	0f 93       	push	r16
     774:	1f 93       	push	r17
     776:	cf 93       	push	r28
     778:	df 93       	push	r29
     77a:	ec 01       	movw	r28, r24
     77c:	6b 01       	movw	r12, r22
     77e:	14 2f       	mov	r17, r20
     780:	09 e1       	ldi	r16, 0x19	; 25
     782:	ff 24       	eor	r15, r15
     784:	f3 94       	inc	r15

    // wait previous traffic and than prio delay and than try tx
    ucWaitForEnterBackoff = 1;  // don't want to abort do/while loop before
    do                          // we did not see the backoff state once
    {
      enReturn = sendLocoNetPacketTry(pPacket, ucPrioDelay);
     786:	61 2f       	mov	r22, r17
     788:	c6 01       	movw	r24, r12
     78a:	0e 94 b9 06 	call	0xd72	; 0xd72 <_Z20sendLocoNetPacketTryP5lnMsgh>

      if (enReturn == LN_DONE)  // success?
     78e:	83 30       	cpi	r24, 0x03	; 3
     790:	c9 f0       	breq	.+50     	; 0x7c4 <_ZN12LocoNetClass4sendEP5lnMsgh+0x58>
        return LN_DONE;

      if (enReturn == LN_PRIO_BACKOFF)
     792:	81 30       	cpi	r24, 0x01	; 1
     794:	11 f4       	brne	.+4      	; 0x79a <_ZN12LocoNetClass4sendEP5lnMsgh+0x2e>
        ucWaitForEnterBackoff = 0; // now entered backoff -> next state != LN_BACKOFF is worth incrementing the try counter
     796:	f1 2c       	mov	r15, r1
     798:	f6 cf       	rjmp	.-20     	; 0x786 <_ZN12LocoNetClass4sendEP5lnMsgh+0x1a>
    }
    while ((enReturn == LN_CD_BACKOFF) ||                             // waiting CD backoff
    (enReturn == LN_PRIO_BACKOFF) ||                           // waiting master+prio backoff
     79a:	82 30       	cpi	r24, 0x02	; 2
     79c:	a0 f3       	brcs	.-24     	; 0x786 <_ZN12LocoNetClass4sendEP5lnMsgh+0x1a>
     79e:	82 30       	cpi	r24, 0x02	; 2
     7a0:	11 f4       	brne	.+4      	; 0x7a6 <_ZN12LocoNetClass4sendEP5lnMsgh+0x3a>
    ((enReturn == LN_NETWORK_BUSY) && ucWaitForEnterBackoff)); // or within any traffic unfinished
     7a2:	f1 10       	cpse	r15, r1
     7a4:	ee cf       	rjmp	.-36     	; 0x782 <_ZN12LocoNetClass4sendEP5lnMsgh+0x16>
    // failed -> next try going to higher prio = smaller prio delay
    if (ucPrioDelay > LN_BACKOFF_MIN)
     7a6:	1b 31       	cpi	r17, 0x1B	; 27
     7a8:	08 f0       	brcs	.+2      	; 0x7ac <_ZN12LocoNetClass4sendEP5lnMsgh+0x40>
      ucPrioDelay--;
     7aa:	11 50       	subi	r17, 0x01	; 1
     7ac:	01 50       	subi	r16, 0x01	; 1
{
  unsigned char ucTry;
  LN_STATUS enReturn;
  unsigned char ucWaitForEnterBackoff;

  for (ucTry = 0; ucTry < LN_TX_RETRIES_MAX; ucTry++)
     7ae:	49 f7       	brne	.-46     	; 0x782 <_ZN12LocoNetClass4sendEP5lnMsgh+0x16>
    ((enReturn == LN_NETWORK_BUSY) && ucWaitForEnterBackoff)); // or within any traffic unfinished
    // failed -> next try going to higher prio = smaller prio delay
    if (ucPrioDelay > LN_BACKOFF_MIN)
      ucPrioDelay--;
  }
  LnBuffer.Stats.TxErrors++ ;
     7b0:	fe 01       	movw	r30, r28
     7b2:	eb 5f       	subi	r30, 0xFB	; 251
     7b4:	fe 4f       	sbci	r31, 0xFE	; 254
     7b6:	80 81       	ld	r24, Z
     7b8:	91 81       	ldd	r25, Z+1	; 0x01
     7ba:	01 96       	adiw	r24, 0x01	; 1
     7bc:	91 83       	std	Z+1, r25	; 0x01
     7be:	80 83       	st	Z, r24
  return LN_RETRY_ERROR;
     7c0:	86 e0       	ldi	r24, 0x06	; 6
     7c2:	01 c0       	rjmp	.+2      	; 0x7c6 <_ZN12LocoNetClass4sendEP5lnMsgh+0x5a>
    do                          // we did not see the backoff state once
    {
      enReturn = sendLocoNetPacketTry(pPacket, ucPrioDelay);

      if (enReturn == LN_DONE)  // success?
        return LN_DONE;
     7c4:	83 e0       	ldi	r24, 0x03	; 3
    if (ucPrioDelay > LN_BACKOFF_MIN)
      ucPrioDelay--;
  }
  LnBuffer.Stats.TxErrors++ ;
  return LN_RETRY_ERROR;
}
     7c6:	df 91       	pop	r29
     7c8:	cf 91       	pop	r28
     7ca:	1f 91       	pop	r17
     7cc:	0f 91       	pop	r16
     7ce:	ff 90       	pop	r15
     7d0:	df 90       	pop	r13
     7d2:	cf 90       	pop	r12
     7d4:	08 95       	ret

000007d6 <_ZN12LocoNetClass4sendEP5lnMsg>:
                        In this case, it is recommended to make another send 
                        attempt.
*/
LN_STATUS LocoNetClass::send(lnMsg *pPacket)
{
  return send(pPacket, LN_BACKOFF_INITIAL);
     7d6:	4e e2       	ldi	r20, 0x2E	; 46
     7d8:	0c 94 b6 03 	jmp	0x76c	; 0x76c <_ZN12LocoNetClass4sendEP5lnMsgh>

000007dc <initLnBuf>:
}

LnBufStats *getLnBufStats( LnBuf *Buffer )
{
  return &(Buffer->Stats) ;
}
     7dc:	29 e0       	ldi	r18, 0x09	; 9
     7de:	31 e0       	ldi	r19, 0x01	; 1
     7e0:	fc 01       	movw	r30, r24
     7e2:	a9 01       	movw	r20, r18
     7e4:	11 92       	st	Z+, r1
     7e6:	41 50       	subi	r20, 0x01	; 1
     7e8:	50 40       	sbci	r21, 0x00	; 0
     7ea:	e1 f7       	brne	.-8      	; 0x7e4 <initLnBuf+0x8>
     7ec:	08 95       	ret

000007ee <recvLnMsg>:
     7ee:	2f 92       	push	r2
     7f0:	3f 92       	push	r3
     7f2:	4f 92       	push	r4
     7f4:	5f 92       	push	r5
     7f6:	6f 92       	push	r6
     7f8:	7f 92       	push	r7
     7fa:	8f 92       	push	r8
     7fc:	9f 92       	push	r9
     7fe:	af 92       	push	r10
     800:	bf 92       	push	r11
     802:	cf 92       	push	r12
     804:	df 92       	push	r13
     806:	ef 92       	push	r14
     808:	ff 92       	push	r15
     80a:	0f 93       	push	r16
     80c:	1f 93       	push	r17
     80e:	cf 93       	push	r28
     810:	df 93       	push	r29
     812:	00 d0       	rcall	.+0      	; 0x814 <__DATA_REGION_LENGTH__+0x14>
     814:	00 d0       	rcall	.+0      	; 0x816 <__DATA_REGION_LENGTH__+0x16>
     816:	cd b7       	in	r28, 0x3d	; 61
     818:	de b7       	in	r29, 0x3e	; 62
     81a:	9c 83       	std	Y+4, r25	; 0x04
     81c:	8b 83       	std	Y+3, r24	; 0x03
     81e:	7c 01       	movw	r14, r24
     820:	8b ef       	ldi	r24, 0xFB	; 251
     822:	e8 0e       	add	r14, r24
     824:	f1 1c       	adc	r15, r1
     826:	6b 80       	ldd	r6, Y+3	; 0x03
     828:	7c 80       	ldd	r7, Y+4	; 0x04
     82a:	9a ef       	ldi	r25, 0xFA	; 250
     82c:	69 0e       	add	r6, r25
     82e:	71 1c       	adc	r7, r1
     830:	0b 81       	ldd	r16, Y+3	; 0x03
     832:	1c 81       	ldd	r17, Y+4	; 0x04
     834:	04 50       	subi	r16, 0x04	; 4
     836:	1f 4f       	sbci	r17, 0xFF	; 255
     838:	eb 81       	ldd	r30, Y+3	; 0x03
     83a:	fc 81       	ldd	r31, Y+4	; 0x04
     83c:	e3 50       	subi	r30, 0x03	; 3
     83e:	ff 4f       	sbci	r31, 0xFF	; 255
     840:	6f 01       	movw	r12, r30
     842:	8b 81       	ldd	r24, Y+3	; 0x03
     844:	9c 81       	ldd	r25, Y+4	; 0x04
     846:	82 50       	subi	r24, 0x02	; 2
     848:	9f 4f       	sbci	r25, 0xFF	; 255
     84a:	4c 01       	movw	r8, r24
     84c:	8a ef       	ldi	r24, 0xFA	; 250
     84e:	28 2e       	mov	r2, r24
     850:	ab 80       	ldd	r10, Y+3	; 0x03
     852:	bc 80       	ldd	r11, Y+4	; 0x04
     854:	91 e0       	ldi	r25, 0x01	; 1
     856:	a9 0e       	add	r10, r25
     858:	b9 1e       	adc	r11, r25
     85a:	eb 81       	ldd	r30, Y+3	; 0x03
     85c:	fc 81       	ldd	r31, Y+4	; 0x04
     85e:	e1 50       	subi	r30, 0x01	; 1
     860:	ff 4f       	sbci	r31, 0xFF	; 255
     862:	fa 83       	std	Y+2, r31	; 0x02
     864:	e9 83       	std	Y+1, r30	; 0x01
     866:	f7 01       	movw	r30, r14
     868:	80 81       	ld	r24, Z
     86a:	f3 01       	movw	r30, r6
     86c:	90 81       	ld	r25, Z
     86e:	89 17       	cp	r24, r25
     870:	09 f4       	brne	.+2      	; 0x874 <__DATA_REGION_LENGTH__+0x74>
     872:	9d c0       	rjmp	.+314    	; 0x9ae <__stack+0xaf>
     874:	eb 81       	ldd	r30, Y+3	; 0x03
     876:	fc 81       	ldd	r31, Y+4	; 0x04
     878:	e8 0f       	add	r30, r24
     87a:	f1 1d       	adc	r31, r1
     87c:	30 80       	ld	r3, Z
     87e:	37 fe       	sbrs	r3, 7
     880:	1e c0       	rjmp	.+60     	; 0x8be <__DATA_REGION_LENGTH__+0xbe>
     882:	f8 01       	movw	r30, r16
     884:	90 81       	ld	r25, Z
     886:	89 17       	cp	r24, r25
     888:	39 f0       	breq	.+14     	; 0x898 <__DATA_REGION_LENGTH__+0x98>
     88a:	f5 01       	movw	r30, r10
     88c:	20 81       	ld	r18, Z
     88e:	31 81       	ldd	r19, Z+1	; 0x01
     890:	2f 5f       	subi	r18, 0xFF	; 255
     892:	3f 4f       	sbci	r19, 0xFF	; 255
     894:	31 83       	std	Z+1, r19	; 0x01
     896:	20 83       	st	Z, r18
     898:	f8 01       	movw	r30, r16
     89a:	80 83       	st	Z, r24
     89c:	8f ef       	ldi	r24, 0xFF	; 255
     89e:	f6 01       	movw	r30, r12
     8a0:	80 83       	st	Z, r24
     8a2:	83 2d       	mov	r24, r3
     8a4:	80 76       	andi	r24, 0x60	; 96
     8a6:	80 36       	cpi	r24, 0x60	; 96
     8a8:	21 f0       	breq	.+8      	; 0x8b2 <__DATA_REGION_LENGTH__+0xb2>
     8aa:	82 95       	swap	r24
     8ac:	8f 70       	andi	r24, 0x0F	; 15
     8ae:	8e 5f       	subi	r24, 0xFE	; 254
     8b0:	01 c0       	rjmp	.+2      	; 0x8b4 <__DATA_REGION_LENGTH__+0xb4>
     8b2:	80 e0       	ldi	r24, 0x00	; 0
     8b4:	f4 01       	movw	r30, r8
     8b6:	80 83       	st	Z, r24
     8b8:	81 11       	cpse	r24, r1
     8ba:	06 c0       	rjmp	.+12     	; 0x8c8 <__DATA_REGION_LENGTH__+0xc8>
     8bc:	42 c0       	rjmp	.+132    	; 0x942 <__stack+0x43>
     8be:	f4 01       	movw	r30, r8
     8c0:	80 81       	ld	r24, Z
     8c2:	81 11       	cpse	r24, r1
     8c4:	3e c0       	rjmp	.+124    	; 0x942 <__stack+0x43>
     8c6:	30 82       	st	Z, r3
     8c8:	f8 01       	movw	r30, r16
     8ca:	20 81       	ld	r18, Z
     8cc:	f4 01       	movw	r30, r8
     8ce:	30 81       	ld	r19, Z
     8d0:	82 2f       	mov	r24, r18
     8d2:	90 e0       	ldi	r25, 0x00	; 0
     8d4:	83 0f       	add	r24, r19
     8d6:	91 1d       	adc	r25, r1
     8d8:	8b 3f       	cpi	r24, 0xFB	; 251
     8da:	91 05       	cpc	r25, r1
     8dc:	94 f1       	brlt	.+100    	; 0x942 <__stack+0x43>
     8de:	42 2c       	mov	r4, r2
     8e0:	42 1a       	sub	r4, r18
     8e2:	f8 94       	cli
     8e4:	f3 01       	movw	r30, r6
     8e6:	40 81       	ld	r20, Z
     8e8:	f8 01       	movw	r30, r16
     8ea:	80 81       	ld	r24, Z
     8ec:	84 17       	cp	r24, r20
     8ee:	08 f0       	brcs	.+2      	; 0x8f2 <__DATA_REGION_LENGTH__+0xf2>
     8f0:	61 c0       	rjmp	.+194    	; 0x9b4 <__stack+0xb5>
     8f2:	f4 2f       	mov	r31, r20
     8f4:	f8 1b       	sub	r31, r24
     8f6:	8f 2f       	mov	r24, r31
     8f8:	f3 01       	movw	r30, r6
     8fa:	80 83       	st	Z, r24
     8fc:	78 94       	sei
     8fe:	f8 01       	movw	r30, r16
     900:	80 81       	ld	r24, Z
     902:	48 17       	cp	r20, r24
     904:	08 f0       	brcs	.+2      	; 0x908 <__stack+0x9>
     906:	59 c0       	rjmp	.+178    	; 0x9ba <__stack+0xbb>
     908:	51 2c       	mov	r5, r1
     90a:	50 e0       	ldi	r21, 0x00	; 0
     90c:	6b 81       	ldd	r22, Y+3	; 0x03
     90e:	7c 81       	ldd	r23, Y+4	; 0x04
     910:	cb 01       	movw	r24, r22
     912:	84 0d       	add	r24, r4
     914:	95 1d       	adc	r25, r5
     916:	0e 94 24 0c 	call	0x1848	; 0x1848 <memmove>
     91a:	f8 01       	movw	r30, r16
     91c:	80 81       	ld	r24, Z
     91e:	6b 81       	ldd	r22, Y+3	; 0x03
     920:	7c 81       	ldd	r23, Y+4	; 0x04
     922:	68 0f       	add	r22, r24
     924:	71 1d       	adc	r23, r1
     926:	a2 01       	movw	r20, r4
     928:	8b 81       	ldd	r24, Y+3	; 0x03
     92a:	9c 81       	ldd	r25, Y+4	; 0x04
     92c:	0e 94 24 0c 	call	0x1848	; 0x1848 <memmove>
     930:	f7 01       	movw	r30, r14
     932:	80 81       	ld	r24, Z
     934:	f8 01       	movw	r30, r16
     936:	90 81       	ld	r25, Z
     938:	89 1b       	sub	r24, r25
     93a:	f7 01       	movw	r30, r14
     93c:	80 83       	st	Z, r24
     93e:	f8 01       	movw	r30, r16
     940:	10 82       	st	Z, r1
     942:	f7 01       	movw	r30, r14
     944:	80 81       	ld	r24, Z
     946:	8f 5f       	subi	r24, 0xFF	; 255
     948:	80 83       	st	Z, r24
     94a:	f8 01       	movw	r30, r16
     94c:	90 81       	ld	r25, Z
     94e:	28 2f       	mov	r18, r24
     950:	29 1b       	sub	r18, r25
     952:	8a 3f       	cpi	r24, 0xFA	; 250
     954:	10 f0       	brcs	.+4      	; 0x95a <__stack+0x5b>
     956:	f7 01       	movw	r30, r14
     958:	10 82       	st	Z, r1
     95a:	f4 01       	movw	r30, r8
     95c:	80 81       	ld	r24, Z
     95e:	28 17       	cp	r18, r24
     960:	29 f0       	breq	.+10     	; 0x96c <__stack+0x6d>
     962:	f6 01       	movw	r30, r12
     964:	80 81       	ld	r24, Z
     966:	83 25       	eor	r24, r3
     968:	80 83       	st	Z, r24
     96a:	7d cf       	rjmp	.-262    	; 0x866 <__DATA_REGION_LENGTH__+0x66>
     96c:	f6 01       	movw	r30, r12
     96e:	80 81       	ld	r24, Z
     970:	38 12       	cpse	r3, r24
     972:	0c c0       	rjmp	.+24     	; 0x98c <__stack+0x8d>
     974:	2b 81       	ldd	r18, Y+3	; 0x03
     976:	3c 81       	ldd	r19, Y+4	; 0x04
     978:	29 0f       	add	r18, r25
     97a:	31 1d       	adc	r19, r1
     97c:	e9 81       	ldd	r30, Y+1	; 0x01
     97e:	fa 81       	ldd	r31, Y+2	; 0x02
     980:	80 81       	ld	r24, Z
     982:	91 81       	ldd	r25, Z+1	; 0x01
     984:	01 96       	adiw	r24, 0x01	; 1
     986:	91 83       	std	Z+1, r25	; 0x01
     988:	80 83       	st	Z, r24
     98a:	08 c0       	rjmp	.+16     	; 0x99c <__stack+0x9d>
     98c:	f5 01       	movw	r30, r10
     98e:	80 81       	ld	r24, Z
     990:	91 81       	ldd	r25, Z+1	; 0x01
     992:	01 96       	adiw	r24, 0x01	; 1
     994:	91 83       	std	Z+1, r25	; 0x01
     996:	80 83       	st	Z, r24
     998:	20 e0       	ldi	r18, 0x00	; 0
     99a:	30 e0       	ldi	r19, 0x00	; 0
     99c:	f7 01       	movw	r30, r14
     99e:	80 81       	ld	r24, Z
     9a0:	f8 01       	movw	r30, r16
     9a2:	80 83       	st	Z, r24
     9a4:	21 15       	cp	r18, r1
     9a6:	31 05       	cpc	r19, r1
     9a8:	e1 f2       	breq	.-72     	; 0x962 <__stack+0x63>
     9aa:	c9 01       	movw	r24, r18
     9ac:	0d c0       	rjmp	.+26     	; 0x9c8 <__stack+0xc9>
     9ae:	80 e0       	ldi	r24, 0x00	; 0
     9b0:	90 e0       	ldi	r25, 0x00	; 0
     9b2:	0a c0       	rjmp	.+20     	; 0x9c8 <__stack+0xc9>
     9b4:	84 2d       	mov	r24, r4
     9b6:	84 0f       	add	r24, r20
     9b8:	9f cf       	rjmp	.-194    	; 0x8f8 <__DATA_REGION_LENGTH__+0xf8>
     9ba:	48 1b       	sub	r20, r24
     9bc:	50 e0       	ldi	r21, 0x00	; 0
     9be:	6b 81       	ldd	r22, Y+3	; 0x03
     9c0:	7c 81       	ldd	r23, Y+4	; 0x04
     9c2:	68 0f       	add	r22, r24
     9c4:	71 1d       	adc	r23, r1
     9c6:	b0 cf       	rjmp	.-160    	; 0x928 <__stack+0x29>
     9c8:	0f 90       	pop	r0
     9ca:	0f 90       	pop	r0
     9cc:	0f 90       	pop	r0
     9ce:	0f 90       	pop	r0
     9d0:	df 91       	pop	r29
     9d2:	cf 91       	pop	r28
     9d4:	1f 91       	pop	r17
     9d6:	0f 91       	pop	r16
     9d8:	ff 90       	pop	r15
     9da:	ef 90       	pop	r14
     9dc:	df 90       	pop	r13
     9de:	cf 90       	pop	r12
     9e0:	bf 90       	pop	r11
     9e2:	af 90       	pop	r10
     9e4:	9f 90       	pop	r9
     9e6:	8f 90       	pop	r8
     9e8:	7f 90       	pop	r7
     9ea:	6f 90       	pop	r6
     9ec:	5f 90       	pop	r5
     9ee:	4f 90       	pop	r4
     9f0:	3f 90       	pop	r3
     9f2:	2f 90       	pop	r2
     9f4:	08 95       	ret

000009f6 <getLnMsgSize>:

uint8_t getLnMsgSize( volatile lnMsg * Msg )
{
     9f6:	fc 01       	movw	r30, r24
  return ( ( Msg->sz.command & (uint8_t)0x60 ) == (uint8_t)0x60 ) ? Msg->sz.mesg_size : ( ( Msg->sz.command & (uint8_t)0x60 ) >> (uint8_t)4 ) + 2 ;
     9f8:	80 81       	ld	r24, Z
     9fa:	80 76       	andi	r24, 0x60	; 96
     9fc:	80 36       	cpi	r24, 0x60	; 96
     9fe:	11 f4       	brne	.+4      	; 0xa04 <getLnMsgSize+0xe>
     a00:	81 81       	ldd	r24, Z+1	; 0x01
     a02:	08 95       	ret
     a04:	80 81       	ld	r24, Z
     a06:	80 76       	andi	r24, 0x60	; 96
     a08:	82 95       	swap	r24
     a0a:	8f 70       	andi	r24, 0x0F	; 15
     a0c:	8e 5f       	subi	r24, 0xFE	; 254
}
     a0e:	08 95       	ret

00000a10 <_Z15setTxPortAndPinPVhh>:
#define LN_TX_PORT *txPort
#define LN_TX_BIT txPin

void setTxPortAndPin(volatile uint8_t *newTxPort, uint8_t newTxPin)
{
  txPort = newTxPort;
     a10:	90 93 31 02 	sts	0x0231, r25	; 0x800231 <txPort+0x1>
     a14:	80 93 30 02 	sts	0x0230, r24	; 0x800230 <txPort>
  txPin = newTxPin;
     a18:	60 93 2f 02 	sts	0x022F, r22	; 0x80022f <txPin>
     a1c:	08 95       	ret

00000a1e <__vector_10>:
 * incoming data.
 *
 **************************************************************************/

ISR(LN_SB_SIGNAL)
{
     a1e:	1f 92       	push	r1
     a20:	0f 92       	push	r0
     a22:	0f b6       	in	r0, 0x3f	; 63
     a24:	0f 92       	push	r0
     a26:	11 24       	eor	r1, r1
     a28:	8f 93       	push	r24
     a2a:	9f 93       	push	r25
     a2c:	ef 93       	push	r30
     a2e:	ff 93       	push	r31
  // Disable the Input Comparator Interrupt
  cbi( LN_SB_INT_ENABLE_REG, LN_SB_INT_ENABLE_BIT );     
     a30:	ef e6       	ldi	r30, 0x6F	; 111
     a32:	f0 e0       	ldi	r31, 0x00	; 0
     a34:	80 81       	ld	r24, Z
     a36:	8f 7d       	andi	r24, 0xDF	; 223
     a38:	80 83       	st	Z, r24

  // Get the Current Timer1 Count and Add the offset for the Compare target
  lnCompareTarget = LN_TMR_INP_CAPT_REG + LN_TIMER_RX_START_PERIOD ;
     a3a:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
     a3e:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
     a42:	80 53       	subi	r24, 0x30	; 48
     a44:	9d 4f       	sbci	r25, 0xFD	; 253
     a46:	90 93 3a 02 	sts	0x023A, r25	; 0x80023a <lnCompareTarget+0x1>
     a4a:	80 93 39 02 	sts	0x0239, r24	; 0x800239 <lnCompareTarget>
  LN_TMR_OUTP_CAPT_REG = lnCompareTarget ;
     a4e:	80 91 39 02 	lds	r24, 0x0239	; 0x800239 <lnCompareTarget>
     a52:	90 91 3a 02 	lds	r25, 0x023A	; 0x80023a <lnCompareTarget+0x1>
     a56:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     a5a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>

  // Clear the current Compare interrupt status bit and enable the Compare interrupt
  sbi(LN_TMR_INT_STATUS_REG, LN_TMR_INT_STATUS_BIT) ;
     a5e:	b1 9a       	sbi	0x16, 1	; 22
  sbi(LN_TMR_INT_ENABLE_REG, LN_TMR_INT_ENABLE_BIT) ; 
     a60:	80 81       	ld	r24, Z
     a62:	82 60       	ori	r24, 0x02	; 2
     a64:	80 83       	st	Z, r24

  // Set the State to indicate that we have begun to Receive
  lnState = LN_ST_RX ;
     a66:	84 e0       	ldi	r24, 0x04	; 4
     a68:	80 93 3d 02 	sts	0x023D, r24	; 0x80023d <lnState>

  // Reset the bit counter so that on first increment it is on 0
  lnBitCount = 0;
     a6c:	10 92 3c 02 	sts	0x023C, r1	; 0x80023c <lnBitCount>
}
     a70:	ff 91       	pop	r31
     a72:	ef 91       	pop	r30
     a74:	9f 91       	pop	r25
     a76:	8f 91       	pop	r24
     a78:	0f 90       	pop	r0
     a7a:	0f be       	out	0x3f, r0	; 63
     a7c:	0f 90       	pop	r0
     a7e:	1f 90       	pop	r1
     a80:	18 95       	reti

00000a82 <__vector_11>:
 * transmitting, this routine shifts the bits and sends it. When receiving,
 * it samples the bit and shifts it into the buffer.
 *
 **************************************************************************/
ISR(LN_TMR_SIGNAL)     /* signal handler for timer0 overflow */
{
     a82:	1f 92       	push	r1
     a84:	0f 92       	push	r0
     a86:	0f b6       	in	r0, 0x3f	; 63
     a88:	0f 92       	push	r0
     a8a:	11 24       	eor	r1, r1
     a8c:	2f 93       	push	r18
     a8e:	3f 93       	push	r19
     a90:	4f 93       	push	r20
     a92:	8f 93       	push	r24
     a94:	9f 93       	push	r25
     a96:	af 93       	push	r26
     a98:	bf 93       	push	r27
     a9a:	ef 93       	push	r30
     a9c:	ff 93       	push	r31
  // Advance the Compare Target by a bit period
  lnCompareTarget += LN_TIMER_RX_RELOAD_PERIOD;
     a9e:	80 91 39 02 	lds	r24, 0x0239	; 0x800239 <lnCompareTarget>
     aa2:	90 91 3a 02 	lds	r25, 0x023A	; 0x80023a <lnCompareTarget+0x1>
     aa6:	80 52       	subi	r24, 0x20	; 32
     aa8:	9e 4f       	sbci	r25, 0xFE	; 254
     aaa:	90 93 3a 02 	sts	0x023A, r25	; 0x80023a <lnCompareTarget+0x1>
     aae:	80 93 39 02 	sts	0x0239, r24	; 0x800239 <lnCompareTarget>
  LN_TMR_OUTP_CAPT_REG = lnCompareTarget;
     ab2:	80 91 39 02 	lds	r24, 0x0239	; 0x800239 <lnCompareTarget>
     ab6:	90 91 3a 02 	lds	r25, 0x023A	; 0x80023a <lnCompareTarget+0x1>
     aba:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     abe:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>

  lnBitCount++;                // Increment bit_counter
     ac2:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <lnBitCount>
     ac6:	8f 5f       	subi	r24, 0xFF	; 255
     ac8:	80 93 3c 02 	sts	0x023C, r24	; 0x80023c <lnBitCount>

  if( lnState == LN_ST_RX ) {  // Are we in RX mode
     acc:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <lnState>
     ad0:	84 30       	cpi	r24, 0x04	; 4
     ad2:	e9 f5       	brne	.+122    	; 0xb4e <__vector_11+0xcc>
    if( lnBitCount < 9)  {   // Are we in the Stop Bits phase
     ad4:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <lnBitCount>
     ad8:	89 30       	cpi	r24, 0x09	; 9
     ada:	78 f4       	brcc	.+30     	; 0xafa <__vector_11+0x78>
      lnCurrentByte >>= 1;
     adc:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <lnCurrentByte>
     ae0:	90 e0       	ldi	r25, 0x00	; 0
     ae2:	95 95       	asr	r25
     ae4:	87 95       	ror	r24
     ae6:	80 93 3b 02 	sts	0x023B, r24	; 0x80023b <lnCurrentByte>
#ifdef LN_SW_UART_RX_INVERTED  
      if( bit_is_clear(LN_RX_PORT, LN_RX_BIT)) {
#else		
      if( bit_is_set(LN_RX_PORT, LN_RX_BIT)) {
     aea:	18 9b       	sbis	0x03, 0	; 3
     aec:	0b c1       	rjmp	.+534    	; 0xd04 <__vector_11+0x282>
#endif
        lnCurrentByte |= 0x80;
     aee:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <lnCurrentByte>
     af2:	80 68       	ori	r24, 0x80	; 128
     af4:	80 93 3b 02 	sts	0x023B, r24	; 0x80023b <lnCurrentByte>
     af8:	05 c1       	rjmp	.+522    	; 0xd04 <__vector_11+0x282>
      return ;
    }

    // Clear the Start Bit Interrupt Status Flag and Enable ready to 
    // detect the next Start Bit
    sbi( LN_SB_INT_STATUS_REG, LN_SB_INT_STATUS_BIT ) ;
     afa:	b5 9a       	sbi	0x16, 5	; 22
    sbi( LN_SB_INT_ENABLE_REG, LN_SB_INT_ENABLE_BIT ) ;
     afc:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
     b00:	80 62       	ori	r24, 0x20	; 32
     b02:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
     b06:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <lnRxBuffer>
     b0a:	90 91 38 02 	lds	r25, 0x0238	; 0x800238 <lnRxBuffer+0x1>

    // If the Stop bit is not Set then we have a Framing Error
#ifdef LN_SW_UART_RX_INVERTED  
    if( bit_is_set(LN_RX_PORT,LN_RX_BIT) ) {
#else
    if( bit_is_clear(LN_RX_PORT,LN_RX_BIT) ) {
     b0e:	18 99       	sbic	0x03, 0	; 3
     b10:	09 c0       	rjmp	.+18     	; 0xb24 <__vector_11+0xa2>
#endif		
      // ERROR_LED_ON();
      lnRxBuffer->Stats.RxErrors++ ;
     b12:	fc 01       	movw	r30, r24
     b14:	ef 5f       	subi	r30, 0xFF	; 255
     b16:	fe 4f       	sbci	r31, 0xFE	; 254
     b18:	80 81       	ld	r24, Z
     b1a:	91 81       	ldd	r25, Z+1	; 0x01
     b1c:	01 96       	adiw	r24, 0x01	; 1
     b1e:	91 83       	std	Z+1, r25	; 0x01
     b20:	80 83       	st	Z, r24
     b22:	10 c0       	rjmp	.+32     	; 0xb44 <__vector_11+0xc2>
    } 
    else { // Put the received byte in the buffer
      addByteLnBuf( lnRxBuffer, lnCurrentByte ) ;
     b24:	40 91 3b 02 	lds	r20, 0x023B	; 0x80023b <lnCurrentByte>
LnBufStats *getLnBufStats( LnBuf *Buffer ) ;
uint8_t getLnMsgSize( volatile lnMsg * newMsg ) ;

static inline void addByteLnBuf( LnBuf *Buffer, uint8_t newByte )
{
  Buffer->Buf[ Buffer->WriteIndex++ ] = newByte ;
     b28:	fc 01       	movw	r30, r24
     b2a:	e6 50       	subi	r30, 0x06	; 6
     b2c:	ff 4f       	sbci	r31, 0xFF	; 255
     b2e:	30 81       	ld	r19, Z
     b30:	21 e0       	ldi	r18, 0x01	; 1
     b32:	23 0f       	add	r18, r19
     b34:	20 83       	st	Z, r18
     b36:	dc 01       	movw	r26, r24
     b38:	a3 0f       	add	r26, r19
     b3a:	b1 1d       	adc	r27, r1
     b3c:	4c 93       	st	X, r20
  if( Buffer->WriteIndex >= LN_BUF_SIZE )
     b3e:	2a 3f       	cpi	r18, 0xFA	; 250
     b40:	08 f0       	brcs	.+2      	; 0xb44 <__vector_11+0xc2>
    Buffer->WriteIndex = 0 ;
     b42:	10 82       	st	Z, r1
    }
    lnBitCount = 0 ;
     b44:	10 92 3c 02 	sts	0x023C, r1	; 0x80023c <lnBitCount>
    lnState = LN_ST_CD_BACKOFF ;
     b48:	81 e0       	ldi	r24, 0x01	; 1
     b4a:	80 93 3d 02 	sts	0x023D, r24	; 0x80023d <lnState>
  }

  if( lnState == LN_ST_TX ) {   // Are we in the TX State
     b4e:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <lnState>
     b52:	83 30       	cpi	r24, 0x03	; 3
     b54:	09 f0       	breq	.+2      	; 0xb58 <__vector_11+0xd6>
     b56:	80 c0       	rjmp	.+256    	; 0xc58 <__vector_11+0x1d6>
    // To get to this point we have already begun the TX cycle so we need to 
    // first check for a Collision. 
    if ( IS_LN_COLLISION() ) {			 // Collision?
     b58:	e0 91 30 02 	lds	r30, 0x0230	; 0x800230 <txPort>
     b5c:	f0 91 31 02 	lds	r31, 0x0231	; 0x800231 <txPort+0x1>
     b60:	80 81       	ld	r24, Z
     b62:	20 91 2f 02 	lds	r18, 0x022F	; 0x80022f <txPin>
     b66:	33 b1       	in	r19, 0x03	; 3
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	02 2e       	mov	r0, r18
     b6c:	02 c0       	rjmp	.+4      	; 0xb72 <__vector_11+0xf0>
     b6e:	95 95       	asr	r25
     b70:	87 95       	ror	r24
     b72:	0a 94       	dec	r0
     b74:	e2 f7       	brpl	.-8      	; 0xb6e <__vector_11+0xec>
     b76:	83 27       	eor	r24, r19
     b78:	80 fd       	sbrc	r24, 0
     b7a:	04 c0       	rjmp	.+8      	; 0xb84 <__vector_11+0x102>
      lnBitCount = 0 ;
     b7c:	10 92 3c 02 	sts	0x023C, r1	; 0x80023c <lnBitCount>
      lnState = LN_ST_TX_COLLISION ;
     b80:	82 e0       	ldi	r24, 0x02	; 2
     b82:	68 c0       	rjmp	.+208    	; 0xc54 <__vector_11+0x1d2>
      // ERROR_LED_ON();
    } 
    else if( lnBitCount < 9) {   			 // Send each Bit
     b84:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <lnBitCount>
     b88:	89 30       	cpi	r24, 0x09	; 9
     b8a:	f0 f4       	brcc	.+60     	; 0xbc8 <__vector_11+0x146>
      if( lnCurrentByte & 0x01 ) {
     b8c:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <lnCurrentByte>
        LN_SW_UART_SET_TX_HIGH(LN_TX_PORT, LN_TX_BIT);
     b90:	30 81       	ld	r19, Z
      lnBitCount = 0 ;
      lnState = LN_ST_TX_COLLISION ;
      // ERROR_LED_ON();
    } 
    else if( lnBitCount < 9) {   			 // Send each Bit
      if( lnCurrentByte & 0x01 ) {
     b92:	80 ff       	sbrs	r24, 0
     b94:	09 c0       	rjmp	.+18     	; 0xba8 <__vector_11+0x126>
        LN_SW_UART_SET_TX_HIGH(LN_TX_PORT, LN_TX_BIT);
     b96:	81 e0       	ldi	r24, 0x01	; 1
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	01 c0       	rjmp	.+2      	; 0xb9e <__vector_11+0x11c>
     b9c:	88 0f       	add	r24, r24
     b9e:	2a 95       	dec	r18
     ba0:	ea f7       	brpl	.-6      	; 0xb9c <__vector_11+0x11a>
     ba2:	80 95       	com	r24
     ba4:	83 23       	and	r24, r19
     ba6:	07 c0       	rjmp	.+14     	; 0xbb6 <__vector_11+0x134>
      } 
      else {
        LN_SW_UART_SET_TX_LOW(LN_TX_PORT, LN_TX_BIT);
     ba8:	81 e0       	ldi	r24, 0x01	; 1
     baa:	90 e0       	ldi	r25, 0x00	; 0
     bac:	01 c0       	rjmp	.+2      	; 0xbb0 <__vector_11+0x12e>
     bae:	88 0f       	add	r24, r24
     bb0:	2a 95       	dec	r18
     bb2:	ea f7       	brpl	.-6      	; 0xbae <__vector_11+0x12c>
     bb4:	83 2b       	or	r24, r19
     bb6:	80 83       	st	Z, r24
      }
      lnCurrentByte >>= 1;
     bb8:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <lnCurrentByte>
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	95 95       	asr	r25
     bc0:	87 95       	ror	r24
     bc2:	80 93 3b 02 	sts	0x023B, r24	; 0x80023b <lnCurrentByte>
     bc6:	48 c0       	rjmp	.+144    	; 0xc58 <__vector_11+0x1d6>
    } 
    else if( lnBitCount ==  9) {   		 // Generate stop-bit
     bc8:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <lnBitCount>
     bcc:	89 30       	cpi	r24, 0x09	; 9
     bce:	59 f4       	brne	.+22     	; 0xbe6 <__vector_11+0x164>
      LN_SW_UART_SET_TX_HIGH(LN_TX_PORT, LN_TX_BIT);
     bd0:	30 81       	ld	r19, Z
     bd2:	81 e0       	ldi	r24, 0x01	; 1
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	01 c0       	rjmp	.+2      	; 0xbda <__vector_11+0x158>
     bd8:	88 0f       	add	r24, r24
     bda:	2a 95       	dec	r18
     bdc:	ea f7       	brpl	.-6      	; 0xbd8 <__vector_11+0x156>
     bde:	80 95       	com	r24
     be0:	83 23       	and	r24, r19
     be2:	80 83       	st	Z, r24
     be4:	39 c0       	rjmp	.+114    	; 0xc58 <__vector_11+0x1d6>
    } 
    else if( ++lnTxIndex < lnTxLength ) {  // Any more bytes in buffer
     be6:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <lnTxIndex>
     bea:	8f 5f       	subi	r24, 0xFF	; 255
     bec:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <lnTxIndex>
     bf0:	90 91 33 02 	lds	r25, 0x0233	; 0x800233 <lnTxLength>
     bf4:	89 17       	cp	r24, r25
     bf6:	48 f5       	brcc	.+82     	; 0xc4a <__vector_11+0x1c8>
      // Setup for the next byte
      lnBitCount = 0 ;
     bf8:	10 92 3c 02 	sts	0x023C, r1	; 0x80023c <lnBitCount>
      lnCurrentByte = lnTxData->data[ lnTxIndex ] ;
     bfc:	a0 91 35 02 	lds	r26, 0x0235	; 0x800235 <lnTxData>
     c00:	b0 91 36 02 	lds	r27, 0x0236	; 0x800236 <lnTxData+0x1>
     c04:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <lnTxIndex>
     c08:	a8 0f       	add	r26, r24
     c0a:	b1 1d       	adc	r27, r1
     c0c:	8c 91       	ld	r24, X
     c0e:	80 93 3b 02 	sts	0x023B, r24	; 0x80023b <lnCurrentByte>

      // Begin the Start Bit
      LN_SW_UART_SET_TX_LOW(LN_TX_PORT, LN_TX_BIT);
     c12:	30 81       	ld	r19, Z
     c14:	81 e0       	ldi	r24, 0x01	; 1
     c16:	90 e0       	ldi	r25, 0x00	; 0
     c18:	01 c0       	rjmp	.+2      	; 0xc1c <__vector_11+0x19a>
     c1a:	88 0f       	add	r24, r24
     c1c:	2a 95       	dec	r18
     c1e:	ea f7       	brpl	.-6      	; 0xc1a <__vector_11+0x198>
     c20:	83 2b       	or	r24, r19
     c22:	80 83       	st	Z, r24

      // Get the Current Timer1 Count and Add the offset for the Compare target
      // added adjustment value for bugfix (Olaf Funke)
      lnCompareTarget = LN_TMR_COUNT_REG + LN_TIMER_TX_RELOAD_PERIOD - LN_TIMER_TX_RELOAD_ADJUST; 
     c24:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     c28:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     c2c:	8a 58       	subi	r24, 0x8A	; 138
     c2e:	9e 4f       	sbci	r25, 0xFE	; 254
     c30:	90 93 3a 02 	sts	0x023A, r25	; 0x80023a <lnCompareTarget+0x1>
     c34:	80 93 39 02 	sts	0x0239, r24	; 0x800239 <lnCompareTarget>
      LN_TMR_OUTP_CAPT_REG = lnCompareTarget ;
     c38:	80 91 39 02 	lds	r24, 0x0239	; 0x800239 <lnCompareTarget>
     c3c:	90 91 3a 02 	lds	r25, 0x023A	; 0x80023a <lnCompareTarget+0x1>
     c40:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     c44:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
     c48:	07 c0       	rjmp	.+14     	; 0xc58 <__vector_11+0x1d6>
    } 
    else {
      // Successfully Sent all bytes in the buffer
      // so set the Packet Status to Done
      lnTxSuccess = 1 ;
     c4a:	81 e0       	ldi	r24, 0x01	; 1
     c4c:	80 93 32 02 	sts	0x0232, r24	; 0x800232 <lnTxSuccess>

      // Now copy the TX Packet into the RX Buffer
      //addMsgLnBuf( lnRxBuffer, lnTxData );

      // Begin CD Backoff state
      lnBitCount = 0 ;
     c50:	10 92 3c 02 	sts	0x023C, r1	; 0x80023c <lnBitCount>
      lnState = LN_ST_CD_BACKOFF ;     
     c54:	80 93 3d 02 	sts	0x023D, r24	; 0x80023d <lnState>
    }
  }

  // Note we may have got here from a failed TX cycle, if so BitCount will be 0
  if( lnState == LN_ST_TX_COLLISION ) {
     c58:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <lnState>
     c5c:	82 30       	cpi	r24, 0x02	; 2
     c5e:	d1 f5       	brne	.+116    	; 0xcd4 <__vector_11+0x252>
    if( lnBitCount == 0 ) {
     c60:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <lnBitCount>
     c64:	81 11       	cpse	r24, r1
     c66:	11 c0       	rjmp	.+34     	; 0xc8a <__vector_11+0x208>
      // Pull the TX Line low to indicate Collision
      LN_SW_UART_SET_TX_LOW(LN_TX_PORT, LN_TX_BIT);
     c68:	e0 91 30 02 	lds	r30, 0x0230	; 0x800230 <txPort>
     c6c:	f0 91 31 02 	lds	r31, 0x0231	; 0x800231 <txPort+0x1>
     c70:	20 81       	ld	r18, Z
     c72:	81 e0       	ldi	r24, 0x01	; 1
     c74:	90 e0       	ldi	r25, 0x00	; 0
     c76:	00 90 2f 02 	lds	r0, 0x022F	; 0x80022f <txPin>
     c7a:	02 c0       	rjmp	.+4      	; 0xc80 <__vector_11+0x1fe>
     c7c:	88 0f       	add	r24, r24
     c7e:	99 1f       	adc	r25, r25
     c80:	0a 94       	dec	r0
     c82:	e2 f7       	brpl	.-8      	; 0xc7c <__vector_11+0x1fa>
     c84:	82 2b       	or	r24, r18
     c86:	80 83       	st	Z, r24
     c88:	25 c0       	rjmp	.+74     	; 0xcd4 <__vector_11+0x252>
      // ERROR_LED_ON();
    } 
    else if( lnBitCount >= LN_COLLISION_TICKS ) {
     c8a:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <lnBitCount>
     c8e:	8f 30       	cpi	r24, 0x0F	; 15
     c90:	08 f1       	brcs	.+66     	; 0xcd4 <__vector_11+0x252>
      // Release the TX Line
      LN_SW_UART_SET_TX_HIGH(LN_TX_PORT, LN_TX_BIT);
     c92:	e0 91 30 02 	lds	r30, 0x0230	; 0x800230 <txPort>
     c96:	f0 91 31 02 	lds	r31, 0x0231	; 0x800231 <txPort+0x1>
     c9a:	20 81       	ld	r18, Z
     c9c:	81 e0       	ldi	r24, 0x01	; 1
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	00 90 2f 02 	lds	r0, 0x022F	; 0x80022f <txPin>
     ca4:	02 c0       	rjmp	.+4      	; 0xcaa <__vector_11+0x228>
     ca6:	88 0f       	add	r24, r24
     ca8:	99 1f       	adc	r25, r25
     caa:	0a 94       	dec	r0
     cac:	e2 f7       	brpl	.-8      	; 0xca6 <__vector_11+0x224>
     cae:	80 95       	com	r24
     cb0:	82 23       	and	r24, r18
     cb2:	80 83       	st	Z, r24
      // ERROR_LED_OFF();

      lnBitCount = 0 ;
     cb4:	10 92 3c 02 	sts	0x023C, r1	; 0x80023c <lnBitCount>
      lnState = LN_ST_CD_BACKOFF ;
     cb8:	81 e0       	ldi	r24, 0x01	; 1
     cba:	80 93 3d 02 	sts	0x023D, r24	; 0x80023d <lnState>

      lnRxBuffer->Stats.Collisions++ ;
     cbe:	e0 91 37 02 	lds	r30, 0x0237	; 0x800237 <lnRxBuffer>
     cc2:	f0 91 38 02 	lds	r31, 0x0238	; 0x800238 <lnRxBuffer+0x1>
     cc6:	e9 5f       	subi	r30, 0xF9	; 249
     cc8:	fe 4f       	sbci	r31, 0xFE	; 254
     cca:	80 81       	ld	r24, Z
     ccc:	91 81       	ldd	r25, Z+1	; 0x01
     cce:	01 96       	adiw	r24, 0x01	; 1
     cd0:	91 83       	std	Z+1, r25	; 0x01
     cd2:	80 83       	st	Z, r24
    }
  }

  if( lnState == LN_ST_CD_BACKOFF ) {
     cd4:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <lnState>
     cd8:	81 30       	cpi	r24, 0x01	; 1
     cda:	a1 f4       	brne	.+40     	; 0xd04 <__vector_11+0x282>
    if( lnBitCount == 0 ) {
     cdc:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <lnBitCount>
     ce0:	81 11       	cpse	r24, r1
     ce2:	05 c0       	rjmp	.+10     	; 0xcee <__vector_11+0x26c>
      // Even though we are waiting, other nodes may try and transmit early
      // so Clear the Start Bit Interrupt Status Flag and Enable ready to 
      // detect the next Start Bit
      sbi( LN_SB_INT_STATUS_REG, LN_SB_INT_STATUS_BIT ) ;
     ce4:	b5 9a       	sbi	0x16, 5	; 22
      sbi( LN_SB_INT_ENABLE_REG, LN_SB_INT_ENABLE_BIT ) ;
     ce6:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
     cea:	80 62       	ori	r24, 0x20	; 32
     cec:	09 c0       	rjmp	.+18     	; 0xd00 <__vector_11+0x27e>
    } 
    else if( lnBitCount >= LN_BACKOFF_MAX ) { 
     cee:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <lnBitCount>
     cf2:	88 33       	cpi	r24, 0x38	; 56
     cf4:	38 f0       	brcs	.+14     	; 0xd04 <__vector_11+0x282>
      // declare network to free after maximum backoff delay
      lnState = LN_ST_IDLE ;
     cf6:	10 92 3d 02 	sts	0x023D, r1	; 0x80023d <lnState>
      cbi( LN_TMR_INT_ENABLE_REG, LN_TMR_INT_ENABLE_BIT ) ;
     cfa:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
     cfe:	8d 7f       	andi	r24, 0xFD	; 253
     d00:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
    }
  }
}
     d04:	ff 91       	pop	r31
     d06:	ef 91       	pop	r30
     d08:	bf 91       	pop	r27
     d0a:	af 91       	pop	r26
     d0c:	9f 91       	pop	r25
     d0e:	8f 91       	pop	r24
     d10:	4f 91       	pop	r20
     d12:	3f 91       	pop	r19
     d14:	2f 91       	pop	r18
     d16:	0f 90       	pop	r0
     d18:	0f be       	out	0x3f, r0	; 63
     d1a:	0f 90       	pop	r0
     d1c:	1f 90       	pop	r1
     d1e:	18 95       	reti

00000d20 <_Z19initLocoNetHardwareP5LnBuf>:


void initLocoNetHardware( LnBuf *RxBuffer )
{
  lnRxBuffer = RxBuffer ;
     d20:	90 93 38 02 	sts	0x0238, r25	; 0x800238 <lnRxBuffer+0x1>
     d24:	80 93 37 02 	sts	0x0237, r24	; 0x800237 <lnRxBuffer>

  // Set the RX line to Input
  cbi( LN_RX_DDR, LN_RX_BIT ) ;
     d28:	20 98       	cbi	0x04, 0	; 4

  // Set the TX line to Inactive
  LN_SW_UART_SET_TX_HIGH(LN_TX_PORT, LN_TX_BIT);
     d2a:	e0 91 30 02 	lds	r30, 0x0230	; 0x800230 <txPort>
     d2e:	f0 91 31 02 	lds	r31, 0x0231	; 0x800231 <txPort+0x1>
     d32:	20 81       	ld	r18, Z
     d34:	81 e0       	ldi	r24, 0x01	; 1
     d36:	90 e0       	ldi	r25, 0x00	; 0
     d38:	00 90 2f 02 	lds	r0, 0x022F	; 0x80022f <txPin>
     d3c:	02 c0       	rjmp	.+4      	; 0xd42 <_Z19initLocoNetHardwareP5LnBuf+0x22>
     d3e:	88 0f       	add	r24, r24
     d40:	99 1f       	adc	r25, r25
     d42:	0a 94       	dec	r0
     d44:	e2 f7       	brpl	.-8      	; 0xd3e <_Z19initLocoNetHardwareP5LnBuf+0x1e>
     d46:	80 95       	com	r24
     d48:	82 23       	and	r24, r18
     d4a:	80 83       	st	Z, r24

#ifdef LN_INIT_COMPARATOR
  LN_INIT_COMPARATOR();	
     d4c:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
     d50:	e1 e8       	ldi	r30, 0x81	; 129
     d52:	f0 e0       	ldi	r31, 0x00	; 0
     d54:	81 e0       	ldi	r24, 0x01	; 1
     d56:	80 83       	st	Z, r24
  // tional four system clock cycles of delay from a change applied to the input, to the update of the 
  // ICRn Register. The noise canceler uses the system clock and is therefore not affected by the 
  // prescaler.
  TCCR1B |= (1<<ICNC1) ;    		// Enable Noise Canceler 
#endif
  lnState = LN_ST_IDLE ;
     d58:	10 92 3d 02 	sts	0x023D, r1	; 0x80023d <lnState>
  //Clear StartBit Interrupt flag
  sbi( LN_SB_INT_STATUS_REG, LN_SB_INT_STATUS_BIT );
     d5c:	b5 9a       	sbi	0x16, 5	; 22
  //Enable StartBit Interrupt
  sbi( LN_SB_INT_ENABLE_REG, LN_SB_INT_ENABLE_BIT );
     d5e:	af e6       	ldi	r26, 0x6F	; 111
     d60:	b0 e0       	ldi	r27, 0x00	; 0
     d62:	8c 91       	ld	r24, X
     d64:	80 62       	ori	r24, 0x20	; 32
     d66:	8c 93       	st	X, r24
  //Set rising edge for StartBit if signal is inverted
#ifdef LN_SW_UART_RX_INVERTED  
  sbi(LN_SB_EDGE_CFG_REG, LN_SB_EDGE_BIT);
#endif
  // Set Timer Clock Source 
  LN_TMR_CONTROL_REG = (LN_TMR_CONTROL_REG & 0xF8) | LN_TMR_PRESCALER;
     d68:	80 81       	ld	r24, Z
     d6a:	88 7f       	andi	r24, 0xF8	; 248
     d6c:	81 60       	ori	r24, 0x01	; 1
     d6e:	80 83       	st	Z, r24
     d70:	08 95       	ret

00000d72 <_Z20sendLocoNetPacketTryP5lnMsgh>:
}


LN_STATUS sendLocoNetPacketTry(lnMsg *TxData, unsigned char ucPrioDelay)
{
     d72:	1f 93       	push	r17
     d74:	cf 93       	push	r28
     d76:	df 93       	push	r29
     d78:	ec 01       	movw	r28, r24
     d7a:	16 2f       	mov	r17, r22
  uint8_t  CheckSum ;
  uint8_t  CheckLength ;

  lnTxLength = getLnMsgSize( TxData ) ;
     d7c:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <getLnMsgSize>
     d80:	80 93 33 02 	sts	0x0233, r24	; 0x800233 <lnTxLength>

  // First calculate the checksum as it may not have been done
  CheckLength = lnTxLength - 1 ;
     d84:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <lnTxLength>
     d88:	81 50       	subi	r24, 0x01	; 1
  CheckSum = 0xFF ;

  for ( lnTxIndex = 0; lnTxIndex < CheckLength; lnTxIndex++ ) {
     d8a:	10 92 34 02 	sts	0x0234, r1	; 0x800234 <lnTxIndex>

  lnTxLength = getLnMsgSize( TxData ) ;

  // First calculate the checksum as it may not have been done
  CheckLength = lnTxLength - 1 ;
  CheckSum = 0xFF ;
     d8e:	9f ef       	ldi	r25, 0xFF	; 255

  for ( lnTxIndex = 0; lnTxIndex < CheckLength; lnTxIndex++ ) {
     d90:	20 91 34 02 	lds	r18, 0x0234	; 0x800234 <lnTxIndex>
     d94:	28 17       	cp	r18, r24
     d96:	68 f4       	brcc	.+26     	; 0xdb2 <_Z20sendLocoNetPacketTryP5lnMsgh+0x40>
    CheckSum ^= TxData->data[ lnTxIndex ] ;
     d98:	20 91 34 02 	lds	r18, 0x0234	; 0x800234 <lnTxIndex>
     d9c:	fe 01       	movw	r30, r28
     d9e:	e2 0f       	add	r30, r18
     da0:	f1 1d       	adc	r31, r1
     da2:	20 81       	ld	r18, Z
     da4:	92 27       	eor	r25, r18

  // First calculate the checksum as it may not have been done
  CheckLength = lnTxLength - 1 ;
  CheckSum = 0xFF ;

  for ( lnTxIndex = 0; lnTxIndex < CheckLength; lnTxIndex++ ) {
     da6:	20 91 34 02 	lds	r18, 0x0234	; 0x800234 <lnTxIndex>
     daa:	2f 5f       	subi	r18, 0xFF	; 255
     dac:	20 93 34 02 	sts	0x0234, r18	; 0x800234 <lnTxIndex>
     db0:	ef cf       	rjmp	.-34     	; 0xd90 <_Z20sendLocoNetPacketTryP5lnMsgh+0x1e>
    CheckSum ^= TxData->data[ lnTxIndex ] ;
  }

  TxData->data[ CheckLength ] = CheckSum ;
     db2:	fe 01       	movw	r30, r28
     db4:	e8 0f       	add	r30, r24
     db6:	f1 1d       	adc	r31, r1
     db8:	90 83       	st	Z, r25
  // clip maximum prio delay
  if (ucPrioDelay > LN_BACKOFF_MAX) {
    ucPrioDelay = LN_BACKOFF_MAX;
  }
  // if priority delay was waited now, declare net as free for this try
  cli();  // disabling interrupt to avoid confusion by ISR changing lnState while we want to do it
     dba:	f8 94       	cli
  if (lnState == LN_ST_CD_BACKOFF) {
     dbc:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <lnState>
     dc0:	81 30       	cpi	r24, 0x01	; 1
     dc2:	79 f4       	brne	.+30     	; 0xde2 <_Z20sendLocoNetPacketTryP5lnMsgh+0x70>
    if (lnBitCount >= ucPrioDelay) {	// Likely we don't want to wait as long as
     dc4:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <lnBitCount>
     dc8:	61 2f       	mov	r22, r17
     dca:	19 33       	cpi	r17, 0x39	; 57
     dcc:	08 f0       	brcs	.+2      	; 0xdd0 <_Z20sendLocoNetPacketTryP5lnMsgh+0x5e>
     dce:	68 e3       	ldi	r22, 0x38	; 56
     dd0:	86 17       	cp	r24, r22
     dd2:	38 f0       	brcs	.+14     	; 0xde2 <_Z20sendLocoNetPacketTryP5lnMsgh+0x70>
      lnState = LN_ST_IDLE;			// the timer ISR waits its maximum delay.
     dd4:	10 92 3d 02 	sts	0x023D, r1	; 0x80023d <lnState>
      cbi( LN_TMR_INT_ENABLE_REG, LN_TMR_INT_ENABLE_BIT ) ;
     dd8:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
     ddc:	8d 7f       	andi	r24, 0xFD	; 253
     dde:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
    }
  }
  sei();  // a delayed start bit interrupt will happen now,
     de2:	78 94       	sei
  // a delayed timer interrupt was stalled

  // If the Network is not Idle, don't start the packet
  if (lnState == LN_ST_CD_BACKOFF) {
     de4:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <lnState>
     de8:	81 30       	cpi	r24, 0x01	; 1
     dea:	39 f4       	brne	.+14     	; 0xdfa <_Z20sendLocoNetPacketTryP5lnMsgh+0x88>
    if (lnBitCount < LN_CARRIER_TICKS) {  // in carrier detect timer?
     dec:	90 91 3c 02 	lds	r25, 0x023C	; 0x80023c <lnBitCount>
      return LN_CD_BACKOFF;
     df0:	94 31       	cpi	r25, 0x14	; 20
     df2:	08 f0       	brcs	.+2      	; 0xdf6 <_Z20sendLocoNetPacketTryP5lnMsgh+0x84>
     df4:	6c c0       	rjmp	.+216    	; 0xece <_Z20sendLocoNetPacketTryP5lnMsgh+0x15c>
     df6:	80 e0       	ldi	r24, 0x00	; 0
     df8:	6a c0       	rjmp	.+212    	; 0xece <_Z20sendLocoNetPacketTryP5lnMsgh+0x15c>
    else {
      return LN_PRIO_BACKOFF;
    }
  }

  if( lnState != LN_ST_IDLE ) {
     dfa:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <lnState>
     dfe:	81 11       	cpse	r24, r1
     e00:	63 c0       	rjmp	.+198    	; 0xec8 <_Z20sendLocoNetPacketTryP5lnMsgh+0x156>
    return LN_NETWORK_BUSY;  // neither idle nor backoff -> busy
  }
  // We need to do this with interrupts off.
  // The last time we check for free net until sending our start bit
  // must be as short as possible, not interrupted.
  cli() ;
     e02:	f8 94       	cli
  // Before we do anything else - Disable StartBit Interrupt
  cbi( LN_SB_INT_ENABLE_REG, LN_SB_INT_ENABLE_BIT ) ;
     e04:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
     e08:	8f 7d       	andi	r24, 0xDF	; 223
     e0a:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
  if (bit_is_set(LN_SB_INT_STATUS_REG, LN_SB_INT_STATUS_BIT)) {
     e0e:	b5 9b       	sbis	0x16, 5	; 22
     e10:	07 c0       	rjmp	.+14     	; 0xe20 <_Z20sendLocoNetPacketTryP5lnMsgh+0xae>
    // first we disabled it, than before sending the start bit, we found out
    // that somebody was faster by examining the start bit interrupt request flag
    sbi( LN_SB_INT_ENABLE_REG, LN_SB_INT_ENABLE_BIT ) ;
     e12:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
     e16:	80 62       	ori	r24, 0x20	; 32
     e18:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
    sei() ;  // receive now what our rival is sending
     e1c:	78 94       	sei
     e1e:	54 c0       	rjmp	.+168    	; 0xec8 <_Z20sendLocoNetPacketTryP5lnMsgh+0x156>
    return LN_NETWORK_BUSY;
  }

  LN_SW_UART_SET_TX_LOW(LN_TX_PORT, LN_TX_BIT);        // Begin the Start Bit
     e20:	e0 91 30 02 	lds	r30, 0x0230	; 0x800230 <txPort>
     e24:	f0 91 31 02 	lds	r31, 0x0231	; 0x800231 <txPort+0x1>
     e28:	20 81       	ld	r18, Z
     e2a:	81 e0       	ldi	r24, 0x01	; 1
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	00 90 2f 02 	lds	r0, 0x022F	; 0x80022f <txPin>
     e32:	02 c0       	rjmp	.+4      	; 0xe38 <_Z20sendLocoNetPacketTryP5lnMsgh+0xc6>
     e34:	88 0f       	add	r24, r24
     e36:	99 1f       	adc	r25, r25
     e38:	0a 94       	dec	r0
     e3a:	e2 f7       	brpl	.-8      	; 0xe34 <_Z20sendLocoNetPacketTryP5lnMsgh+0xc2>
     e3c:	82 2b       	or	r24, r18
     e3e:	80 83       	st	Z, r24

  // Get the Current Timer1 Count and Add the offset for the Compare target
  // added adjustment value for bugfix (Olaf Funke)
  lnCompareTarget = LN_TMR_COUNT_REG + LN_TIMER_TX_RELOAD_PERIOD - LN_TIMER_TX_RELOAD_ADJUST;
     e40:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     e44:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     e48:	8a 58       	subi	r24, 0x8A	; 138
     e4a:	9e 4f       	sbci	r25, 0xFE	; 254
     e4c:	90 93 3a 02 	sts	0x023A, r25	; 0x80023a <lnCompareTarget+0x1>
     e50:	80 93 39 02 	sts	0x0239, r24	; 0x800239 <lnCompareTarget>
  LN_TMR_OUTP_CAPT_REG = lnCompareTarget ;
     e54:	80 91 39 02 	lds	r24, 0x0239	; 0x800239 <lnCompareTarget>
     e58:	90 91 3a 02 	lds	r25, 0x023A	; 0x80023a <lnCompareTarget+0x1>
     e5c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     e60:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>

  sei() ;  // Interrupts back on ...
     e64:	78 94       	sei

  lnTxData = TxData ;
     e66:	d0 93 36 02 	sts	0x0236, r29	; 0x800236 <lnTxData+0x1>
     e6a:	c0 93 35 02 	sts	0x0235, r28	; 0x800235 <lnTxData>
  lnTxIndex = 0 ;
     e6e:	10 92 34 02 	sts	0x0234, r1	; 0x800234 <lnTxIndex>
  lnTxSuccess = 0 ;
     e72:	10 92 32 02 	sts	0x0232, r1	; 0x800232 <lnTxSuccess>

  // Load the first Byte
  lnCurrentByte = TxData->data[ 0 ] ;
     e76:	88 81       	ld	r24, Y
     e78:	80 93 3b 02 	sts	0x023B, r24	; 0x80023b <lnCurrentByte>

  // Set the State to Transmit
  lnState = LN_ST_TX ;                      
     e7c:	83 e0       	ldi	r24, 0x03	; 3
     e7e:	80 93 3d 02 	sts	0x023D, r24	; 0x80023d <lnState>

  // Reset the bit counter
  lnBitCount = 0 ;                          
     e82:	10 92 3c 02 	sts	0x023C, r1	; 0x80023c <lnBitCount>

  // Clear the current Compare interrupt status bit and enable the Compare interrupt
  sbi(LN_TMR_INT_STATUS_REG, LN_TMR_INT_STATUS_BIT) ;
     e86:	b1 9a       	sbi	0x16, 1	; 22
  sbi(LN_TMR_INT_ENABLE_REG, LN_TMR_INT_ENABLE_BIT) ; 
     e88:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
     e8c:	82 60       	ori	r24, 0x02	; 2
     e8e:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>

  while (lnState == LN_ST_TX) {
     e92:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <lnState>
     e96:	83 30       	cpi	r24, 0x03	; 3
     e98:	e1 f3       	breq	.-8      	; 0xe92 <_Z20sendLocoNetPacketTryP5lnMsgh+0x120>
    // now busy wait until the interrupts do the rest
  }
  if (lnTxSuccess) {
     e9a:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <lnTxSuccess>
     e9e:	88 23       	and	r24, r24
     ea0:	69 f0       	breq	.+26     	; 0xebc <_Z20sendLocoNetPacketTryP5lnMsgh+0x14a>
    lnRxBuffer->Stats.TxPackets++ ;
     ea2:	e0 91 37 02 	lds	r30, 0x0237	; 0x800237 <lnRxBuffer>
     ea6:	f0 91 38 02 	lds	r31, 0x0238	; 0x800238 <lnRxBuffer+0x1>
     eaa:	ed 5f       	subi	r30, 0xFD	; 253
     eac:	fe 4f       	sbci	r31, 0xFE	; 254
     eae:	80 81       	ld	r24, Z
     eb0:	91 81       	ldd	r25, Z+1	; 0x01
     eb2:	01 96       	adiw	r24, 0x01	; 1
     eb4:	91 83       	std	Z+1, r25	; 0x01
     eb6:	80 83       	st	Z, r24
    return LN_DONE;
     eb8:	83 e0       	ldi	r24, 0x03	; 3
     eba:	09 c0       	rjmp	.+18     	; 0xece <_Z20sendLocoNetPacketTryP5lnMsgh+0x15c>
  }
  if (lnState == LN_ST_TX_COLLISION) {
     ebc:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <lnState>
     ec0:	82 30       	cpi	r24, 0x02	; 2
     ec2:	21 f0       	breq	.+8      	; 0xecc <_Z20sendLocoNetPacketTryP5lnMsgh+0x15a>
    return LN_COLLISION;
  }
  return LN_UNKNOWN_ERROR; // everything else is an error
     ec4:	85 e0       	ldi	r24, 0x05	; 5
     ec6:	03 c0       	rjmp	.+6      	; 0xece <_Z20sendLocoNetPacketTryP5lnMsgh+0x15c>
      return LN_PRIO_BACKOFF;
    }
  }

  if( lnState != LN_ST_IDLE ) {
    return LN_NETWORK_BUSY;  // neither idle nor backoff -> busy
     ec8:	82 e0       	ldi	r24, 0x02	; 2
     eca:	01 c0       	rjmp	.+2      	; 0xece <_Z20sendLocoNetPacketTryP5lnMsgh+0x15c>
  if (lnTxSuccess) {
    lnRxBuffer->Stats.TxPackets++ ;
    return LN_DONE;
  }
  if (lnState == LN_ST_TX_COLLISION) {
    return LN_COLLISION;
     ecc:	84 e0       	ldi	r24, 0x04	; 4
  }
  return LN_UNKNOWN_ERROR; // everything else is an error
}
     ece:	df 91       	pop	r29
     ed0:	cf 91       	pop	r28
     ed2:	1f 91       	pop	r17
     ed4:	08 95       	ret

00000ed6 <setup>:
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     ed6:	26 e0       	ldi	r18, 0x06	; 6
     ed8:	40 e8       	ldi	r20, 0x80	; 128
     eda:	55 e2       	ldi	r21, 0x25	; 37
     edc:	60 e0       	ldi	r22, 0x00	; 0
     ede:	70 e0       	ldi	r23, 0x00	; 0
     ee0:	8b e9       	ldi	r24, 0x9B	; 155
     ee2:	92 e0       	ldi	r25, 0x02	; 2
     ee4:	0e 94 a2 08 	call	0x1144	; 0x1144 <_ZN14HardwareSerial5beginEmh>
const float VREF = 5; // РћРїРѕСЂРЅРѕРµ РЅР°РїСЂСЏР¶РµРЅРёРµ (РёР·РјРµРЅРёС‚Рµ РЅР° 3.3, РµСЃР»Рё РёСЃРїРѕР»СЊР·СѓРµС‚СЃСЏ 3.3 Р’)

void setup() {
    //	_delay_ms(3000);
    Serial.begin(9600);
    LocoNet.init(9);
     ee8:	69 e0       	ldi	r22, 0x09	; 9
     eea:	86 e2       	ldi	r24, 0x26	; 38
     eec:	91 e0       	ldi	r25, 0x01	; 1
     eee:	0e 94 96 03 	call	0x72c	; 0x72c <_ZN12LocoNetClass4initEh>
    uart.print(PSTR("Test Board %d\n"), ADDR_BOARD);
     ef2:	1f 92       	push	r1
     ef4:	1f 92       	push	r1
     ef6:	8e ee       	ldi	r24, 0xEE	; 238
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	9f 93       	push	r25
     efc:	8f 93       	push	r24
     efe:	89 e5       	ldi	r24, 0x59	; 89
     f00:	92 e0       	ldi	r25, 0x02	; 2
     f02:	9f 93       	push	r25
     f04:	8f 93       	push	r24
     f06:	0e 94 19 02 	call	0x432	; 0x432 <_ZN4UART5printEPKcz>
    loco.send_B2_hello();
     f0a:	0f 90       	pop	r0
     f0c:	0f 90       	pop	r0
     f0e:	0f 90       	pop	r0
     f10:	0f 90       	pop	r0
     f12:	0f 90       	pop	r0
     f14:	0f 90       	pop	r0
     f16:	8e e3       	ldi	r24, 0x3E	; 62
     f18:	92 e0       	ldi	r25, 0x02	; 2
     f1a:	0c 94 49 01 	jmp	0x292	; 0x292 <_ZN10LocoPacket13send_B2_helloEv>

00000f1e <loop>:

}

void loop() {
    uart.read();
     f1e:	89 e5       	ldi	r24, 0x59	; 89
     f20:	92 e0       	ldi	r25, 0x02	; 2
     f22:	0e 94 1a 03 	call	0x634	; 0x634 <_ZN4UART4readEv>
    loco.read();
     f26:	8e e3       	ldi	r24, 0x3E	; 62
     f28:	92 e0       	ldi	r25, 0x02	; 2
     f2a:	0e 94 59 01 	call	0x2b2	; 0x2b2 <_ZN10LocoPacket4readEv>

    if (timer.ena_timer_1Hz) {
     f2e:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <timer+0x2>
     f32:	88 23       	and	r24, r24
     f34:	21 f0       	breq	.+8      	; 0xf3e <loop+0x20>


        logic_timer_1Hz();
     f36:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <_Z15logic_timer_1Hzv>
        timer.ena_timer_1Hz = false;
     f3a:	10 92 58 02 	sts	0x0258, r1	; 0x800258 <timer+0x2>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     f3e:	2f ef       	ldi	r18, 0xFF	; 255
     f40:	80 e7       	ldi	r24, 0x70	; 112
     f42:	92 e0       	ldi	r25, 0x02	; 2
     f44:	21 50       	subi	r18, 0x01	; 1
     f46:	80 40       	sbci	r24, 0x00	; 0
     f48:	90 40       	sbci	r25, 0x00	; 0
     f4a:	e1 f7       	brne	.-8      	; 0xf44 <loop+0x26>
     f4c:	00 c0       	rjmp	.+0      	; 0xf4e <loop+0x30>
     f4e:	00 00       	nop
     f50:	08 95       	ret

00000f52 <_GLOBAL__sub_I_uart>:
#include "TrafficControl\Timer.h"
#include "TrafficControl\Logic.h"
#include "TrafficControl\LocoPacket.h"
//#include <Wire.h>

UART uart;
     f52:	89 e5       	ldi	r24, 0x59	; 89
     f54:	92 e0       	ldi	r25, 0x02	; 2
     f56:	0e 94 12 02 	call	0x424	; 0x424 <_ZN4UARTC1Ev>
Timer timer;
     f5a:	86 e5       	ldi	r24, 0x56	; 86
     f5c:	92 e0       	ldi	r25, 0x02	; 2
     f5e:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <_ZN5TimerC1Ev>
LocoPacket loco;
     f62:	8e e3       	ldi	r24, 0x3E	; 62
     f64:	92 e0       	ldi	r25, 0x02	; 2
     f66:	0c 94 c9 00 	jmp	0x192	; 0x192 <_ZN10LocoPacketC1Ev>

00000f6a <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     f6a:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     f6c:	91 8d       	ldd	r25, Z+25	; 0x19
     f6e:	22 8d       	ldd	r18, Z+26	; 0x1a
     f70:	89 2f       	mov	r24, r25
     f72:	90 e0       	ldi	r25, 0x00	; 0
     f74:	80 5c       	subi	r24, 0xC0	; 192
     f76:	9f 4f       	sbci	r25, 0xFF	; 255
     f78:	82 1b       	sub	r24, r18
     f7a:	91 09       	sbc	r25, r1
}
     f7c:	8f 73       	andi	r24, 0x3F	; 63
     f7e:	99 27       	eor	r25, r25
     f80:	08 95       	ret

00000f82 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
     f82:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
     f84:	91 8d       	ldd	r25, Z+25	; 0x19
     f86:	82 8d       	ldd	r24, Z+26	; 0x1a
     f88:	98 17       	cp	r25, r24
     f8a:	31 f0       	breq	.+12     	; 0xf98 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     f8c:	82 8d       	ldd	r24, Z+26	; 0x1a
     f8e:	e8 0f       	add	r30, r24
     f90:	f1 1d       	adc	r31, r1
     f92:	85 8d       	ldd	r24, Z+29	; 0x1d
     f94:	90 e0       	ldi	r25, 0x00	; 0
     f96:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     f98:	8f ef       	ldi	r24, 0xFF	; 255
     f9a:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     f9c:	08 95       	ret

00000f9e <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
     f9e:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     fa0:	91 8d       	ldd	r25, Z+25	; 0x19
     fa2:	82 8d       	ldd	r24, Z+26	; 0x1a
     fa4:	98 17       	cp	r25, r24
     fa6:	61 f0       	breq	.+24     	; 0xfc0 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     fa8:	82 8d       	ldd	r24, Z+26	; 0x1a
     faa:	df 01       	movw	r26, r30
     fac:	a8 0f       	add	r26, r24
     fae:	b1 1d       	adc	r27, r1
     fb0:	5d 96       	adiw	r26, 0x1d	; 29
     fb2:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     fb4:	92 8d       	ldd	r25, Z+26	; 0x1a
     fb6:	9f 5f       	subi	r25, 0xFF	; 255
     fb8:	9f 73       	andi	r25, 0x3F	; 63
     fba:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     fc0:	8f ef       	ldi	r24, 0xFF	; 255
     fc2:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     fc4:	08 95       	ret

00000fc6 <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
     fc6:	fc 01       	movw	r30, r24
     fc8:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
     fca:	44 8d       	ldd	r20, Z+28	; 0x1c
     fcc:	25 2f       	mov	r18, r21
     fce:	30 e0       	ldi	r19, 0x00	; 0
     fd0:	84 2f       	mov	r24, r20
     fd2:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     fd4:	82 1b       	sub	r24, r18
     fd6:	93 0b       	sbc	r25, r19
     fd8:	54 17       	cp	r21, r20
     fda:	10 f0       	brcs	.+4      	; 0xfe0 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
     fdc:	cf 96       	adiw	r24, 0x3f	; 63
     fde:	08 95       	ret
  return tail - head - 1;
     fe0:	01 97       	sbiw	r24, 0x01	; 1
}
     fe2:	08 95       	ret

00000fe4 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     fe4:	8a e5       	ldi	r24, 0x5A	; 90
     fe6:	99 e0       	ldi	r25, 0x09	; 9
     fe8:	89 2b       	or	r24, r25
     fea:	41 f0       	breq	.+16     	; 0xffc <_Z14serialEventRunv+0x18>
     fec:	80 e0       	ldi	r24, 0x00	; 0
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	89 2b       	or	r24, r25
     ff2:	21 f0       	breq	.+8      	; 0xffc <_Z14serialEventRunv+0x18>
     ff4:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <_Z17Serial0_availablev>
     ff8:	81 11       	cpse	r24, r1
     ffa:	0d c0       	rjmp	.+26     	; 0x1016 <_Z14serialEventRunv+0x32>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
     ffc:	80 e0       	ldi	r24, 0x00	; 0
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	89 2b       	or	r24, r25
    1002:	71 f0       	breq	.+28     	; 0x1020 <_Z14serialEventRunv+0x3c>
    1004:	80 e0       	ldi	r24, 0x00	; 0
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	89 2b       	or	r24, r25
    100a:	51 f0       	breq	.+20     	; 0x1020 <_Z14serialEventRunv+0x3c>
    100c:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    1010:	81 11       	cpse	r24, r1
    1012:	04 c0       	rjmp	.+8      	; 0x101c <_Z14serialEventRunv+0x38>
    1014:	08 95       	ret
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    1016:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    101a:	f0 cf       	rjmp	.-32     	; 0xffc <_Z14serialEventRunv+0x18>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    101c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    1020:	08 95       	ret

00001022 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    1022:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    1024:	84 8d       	ldd	r24, Z+28	; 0x1c
    1026:	df 01       	movw	r26, r30
    1028:	a8 0f       	add	r26, r24
    102a:	b1 1d       	adc	r27, r1
    102c:	a3 5a       	subi	r26, 0xA3	; 163
    102e:	bf 4f       	sbci	r27, 0xFF	; 255
    1030:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    1032:	84 8d       	ldd	r24, Z+28	; 0x1c
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	01 96       	adiw	r24, 0x01	; 1
    1038:	8f 73       	andi	r24, 0x3F	; 63
    103a:	99 27       	eor	r25, r25
    103c:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    103e:	a6 89       	ldd	r26, Z+22	; 0x16
    1040:	b7 89       	ldd	r27, Z+23	; 0x17
    1042:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    1044:	a0 89       	ldd	r26, Z+16	; 0x10
    1046:	b1 89       	ldd	r27, Z+17	; 0x11
    1048:	8c 91       	ld	r24, X
    104a:	83 70       	andi	r24, 0x03	; 3
    104c:	80 64       	ori	r24, 0x40	; 64
    104e:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    1050:	93 8d       	ldd	r25, Z+27	; 0x1b
    1052:	84 8d       	ldd	r24, Z+28	; 0x1c
    1054:	98 13       	cpse	r25, r24
    1056:	06 c0       	rjmp	.+12     	; 0x1064 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    1058:	02 88       	ldd	r0, Z+18	; 0x12
    105a:	f3 89       	ldd	r31, Z+19	; 0x13
    105c:	e0 2d       	mov	r30, r0
    105e:	80 81       	ld	r24, Z
    1060:	8f 7d       	andi	r24, 0xDF	; 223
    1062:	80 83       	st	Z, r24
    1064:	08 95       	ret

00001066 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    1066:	ef 92       	push	r14
    1068:	ff 92       	push	r15
    106a:	0f 93       	push	r16
    106c:	1f 93       	push	r17
    106e:	cf 93       	push	r28
    1070:	df 93       	push	r29
    1072:	ec 01       	movw	r28, r24
  _written = true;
    1074:	81 e0       	ldi	r24, 0x01	; 1
    1076:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    1078:	9b 8d       	ldd	r25, Y+27	; 0x1b
    107a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    107c:	98 13       	cpse	r25, r24
    107e:	05 c0       	rjmp	.+10     	; 0x108a <_ZN14HardwareSerial5writeEh+0x24>
    1080:	e8 89       	ldd	r30, Y+16	; 0x10
    1082:	f9 89       	ldd	r31, Y+17	; 0x11
    1084:	80 81       	ld	r24, Z
    1086:	85 fd       	sbrc	r24, 5
    1088:	26 c0       	rjmp	.+76     	; 0x10d6 <_ZN14HardwareSerial5writeEh+0x70>
    108a:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    108c:	0b 8d       	ldd	r16, Y+27	; 0x1b
    108e:	10 e0       	ldi	r17, 0x00	; 0
    1090:	0f 5f       	subi	r16, 0xFF	; 255
    1092:	1f 4f       	sbci	r17, 0xFF	; 255
    1094:	0f 73       	andi	r16, 0x3F	; 63
    1096:	11 27       	eor	r17, r17
    1098:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    109a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    109c:	e8 12       	cpse	r14, r24
    109e:	0c c0       	rjmp	.+24     	; 0x10b8 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    10a0:	0f b6       	in	r0, 0x3f	; 63
    10a2:	07 fc       	sbrc	r0, 7
    10a4:	fa cf       	rjmp	.-12     	; 0x109a <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    10a6:	e8 89       	ldd	r30, Y+16	; 0x10
    10a8:	f9 89       	ldd	r31, Y+17	; 0x11
    10aa:	80 81       	ld	r24, Z
    10ac:	85 ff       	sbrs	r24, 5
    10ae:	f5 cf       	rjmp	.-22     	; 0x109a <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    10b0:	ce 01       	movw	r24, r28
    10b2:	0e 94 11 08 	call	0x1022	; 0x1022 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    10b6:	f1 cf       	rjmp	.-30     	; 0x109a <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    10b8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    10ba:	fe 01       	movw	r30, r28
    10bc:	e8 0f       	add	r30, r24
    10be:	f1 1d       	adc	r31, r1
    10c0:	e3 5a       	subi	r30, 0xA3	; 163
    10c2:	ff 4f       	sbci	r31, 0xFF	; 255
    10c4:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    10c6:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    10c8:	f8 94       	cli
    _tx_buffer_head = i;
    10ca:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
    10cc:	ea 89       	ldd	r30, Y+18	; 0x12
    10ce:	fb 89       	ldd	r31, Y+19	; 0x13
    10d0:	80 81       	ld	r24, Z
    10d2:	80 62       	ori	r24, 0x20	; 32
    10d4:	0a c0       	rjmp	.+20     	; 0x10ea <_ZN14HardwareSerial5writeEh+0x84>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    10d6:	9f b7       	in	r25, 0x3f	; 63
    10d8:	f8 94       	cli
      *_udr = c;
    10da:	ee 89       	ldd	r30, Y+22	; 0x16
    10dc:	ff 89       	ldd	r31, Y+23	; 0x17
    10de:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    10e0:	e8 89       	ldd	r30, Y+16	; 0x10
    10e2:	f9 89       	ldd	r31, Y+17	; 0x11
    10e4:	80 81       	ld	r24, Z
    10e6:	83 70       	andi	r24, 0x03	; 3
    10e8:	80 64       	ori	r24, 0x40	; 64
    10ea:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    10ec:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
    10ee:	81 e0       	ldi	r24, 0x01	; 1
    10f0:	90 e0       	ldi	r25, 0x00	; 0
    10f2:	df 91       	pop	r29
    10f4:	cf 91       	pop	r28
    10f6:	1f 91       	pop	r17
    10f8:	0f 91       	pop	r16
    10fa:	ff 90       	pop	r15
    10fc:	ef 90       	pop	r14
    10fe:	08 95       	ret

00001100 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    1100:	cf 93       	push	r28
    1102:	df 93       	push	r29
    1104:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    1106:	88 8d       	ldd	r24, Y+24	; 0x18
    1108:	88 23       	and	r24, r24
    110a:	c9 f0       	breq	.+50     	; 0x113e <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    110c:	ea 89       	ldd	r30, Y+18	; 0x12
    110e:	fb 89       	ldd	r31, Y+19	; 0x13
    1110:	80 81       	ld	r24, Z
    1112:	85 fd       	sbrc	r24, 5
    1114:	05 c0       	rjmp	.+10     	; 0x1120 <_ZN14HardwareSerial5flushEv+0x20>
    1116:	a8 89       	ldd	r26, Y+16	; 0x10
    1118:	b9 89       	ldd	r27, Y+17	; 0x11
    111a:	8c 91       	ld	r24, X
    111c:	86 fd       	sbrc	r24, 6
    111e:	0f c0       	rjmp	.+30     	; 0x113e <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    1120:	0f b6       	in	r0, 0x3f	; 63
    1122:	07 fc       	sbrc	r0, 7
    1124:	f5 cf       	rjmp	.-22     	; 0x1110 <_ZN14HardwareSerial5flushEv+0x10>
    1126:	80 81       	ld	r24, Z
    1128:	85 ff       	sbrs	r24, 5
    112a:	f2 cf       	rjmp	.-28     	; 0x1110 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    112c:	a8 89       	ldd	r26, Y+16	; 0x10
    112e:	b9 89       	ldd	r27, Y+17	; 0x11
    1130:	8c 91       	ld	r24, X
    1132:	85 ff       	sbrs	r24, 5
    1134:	ed cf       	rjmp	.-38     	; 0x1110 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    1136:	ce 01       	movw	r24, r28
    1138:	0e 94 11 08 	call	0x1022	; 0x1022 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    113c:	e7 cf       	rjmp	.-50     	; 0x110c <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    113e:	df 91       	pop	r29
    1140:	cf 91       	pop	r28
    1142:	08 95       	ret

00001144 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    1144:	cf 92       	push	r12
    1146:	df 92       	push	r13
    1148:	ef 92       	push	r14
    114a:	ff 92       	push	r15
    114c:	1f 93       	push	r17
    114e:	cf 93       	push	r28
    1150:	df 93       	push	r29
    1152:	ec 01       	movw	r28, r24
    1154:	6a 01       	movw	r12, r20
    1156:	7b 01       	movw	r14, r22
    1158:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    115a:	60 e8       	ldi	r22, 0x80	; 128
    115c:	74 e8       	ldi	r23, 0x84	; 132
    115e:	8e e1       	ldi	r24, 0x1E	; 30
    1160:	90 e0       	ldi	r25, 0x00	; 0
    1162:	a7 01       	movw	r20, r14
    1164:	96 01       	movw	r18, r12
    1166:	0e 94 bd 0a 	call	0x157a	; 0x157a <__udivmodsi4>
    116a:	da 01       	movw	r26, r20
    116c:	c9 01       	movw	r24, r18
    116e:	01 97       	sbiw	r24, 0x01	; 1
    1170:	a1 09       	sbc	r26, r1
    1172:	b1 09       	sbc	r27, r1
    1174:	b6 95       	lsr	r27
    1176:	a7 95       	ror	r26
    1178:	97 95       	ror	r25
    117a:	87 95       	ror	r24
    117c:	9c 01       	movw	r18, r24
  *_ucsra = 1 << U2X0;
    117e:	e8 89       	ldd	r30, Y+16	; 0x10
    1180:	f9 89       	ldd	r31, Y+17	; 0x11
    1182:	82 e0       	ldi	r24, 0x02	; 2
    1184:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1186:	21 15       	cp	r18, r1
    1188:	80 e1       	ldi	r24, 0x10	; 16
    118a:	38 07       	cpc	r19, r24
    118c:	a8 f0       	brcs	.+42     	; 0x11b8 <_ZN14HardwareSerial5beginEmh+0x74>
  {
    *_ucsra = 0;
    118e:	e8 89       	ldd	r30, Y+16	; 0x10
    1190:	f9 89       	ldd	r31, Y+17	; 0x11
    1192:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    1194:	60 e4       	ldi	r22, 0x40	; 64
    1196:	72 e4       	ldi	r23, 0x42	; 66
    1198:	8f e0       	ldi	r24, 0x0F	; 15
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	a7 01       	movw	r20, r14
    119e:	96 01       	movw	r18, r12
    11a0:	0e 94 bd 0a 	call	0x157a	; 0x157a <__udivmodsi4>
    11a4:	da 01       	movw	r26, r20
    11a6:	c9 01       	movw	r24, r18
    11a8:	01 97       	sbiw	r24, 0x01	; 1
    11aa:	a1 09       	sbc	r26, r1
    11ac:	b1 09       	sbc	r27, r1
    11ae:	b6 95       	lsr	r27
    11b0:	a7 95       	ror	r26
    11b2:	97 95       	ror	r25
    11b4:	87 95       	ror	r24
    11b6:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    11b8:	ec 85       	ldd	r30, Y+12	; 0x0c
    11ba:	fd 85       	ldd	r31, Y+13	; 0x0d
    11bc:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    11be:	ee 85       	ldd	r30, Y+14	; 0x0e
    11c0:	ff 85       	ldd	r31, Y+15	; 0x0f
    11c2:	20 83       	st	Z, r18

  _written = false;
    11c4:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    11c6:	ec 89       	ldd	r30, Y+20	; 0x14
    11c8:	fd 89       	ldd	r31, Y+21	; 0x15
    11ca:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    11cc:	ea 89       	ldd	r30, Y+18	; 0x12
    11ce:	fb 89       	ldd	r31, Y+19	; 0x13
    11d0:	80 81       	ld	r24, Z
    11d2:	80 61       	ori	r24, 0x10	; 16
    11d4:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    11d6:	ea 89       	ldd	r30, Y+18	; 0x12
    11d8:	fb 89       	ldd	r31, Y+19	; 0x13
    11da:	80 81       	ld	r24, Z
    11dc:	88 60       	ori	r24, 0x08	; 8
    11de:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    11e0:	ea 89       	ldd	r30, Y+18	; 0x12
    11e2:	fb 89       	ldd	r31, Y+19	; 0x13
    11e4:	80 81       	ld	r24, Z
    11e6:	80 68       	ori	r24, 0x80	; 128
    11e8:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    11ea:	ea 89       	ldd	r30, Y+18	; 0x12
    11ec:	fb 89       	ldd	r31, Y+19	; 0x13
    11ee:	80 81       	ld	r24, Z
    11f0:	8f 7d       	andi	r24, 0xDF	; 223
    11f2:	80 83       	st	Z, r24
}
    11f4:	df 91       	pop	r29
    11f6:	cf 91       	pop	r28
    11f8:	1f 91       	pop	r17
    11fa:	ff 90       	pop	r15
    11fc:	ef 90       	pop	r14
    11fe:	df 90       	pop	r13
    1200:	cf 90       	pop	r12
    1202:	08 95       	ret

00001204 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    1204:	1f 92       	push	r1
    1206:	0f 92       	push	r0
    1208:	0f b6       	in	r0, 0x3f	; 63
    120a:	0f 92       	push	r0
    120c:	11 24       	eor	r1, r1
    120e:	2f 93       	push	r18
    1210:	8f 93       	push	r24
    1212:	9f 93       	push	r25
    1214:	ef 93       	push	r30
    1216:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    1218:	e0 91 ab 02 	lds	r30, 0x02AB	; 0x8002ab <Serial+0x10>
    121c:	f0 91 ac 02 	lds	r31, 0x02AC	; 0x8002ac <Serial+0x11>
    1220:	80 81       	ld	r24, Z
    1222:	e0 91 b1 02 	lds	r30, 0x02B1	; 0x8002b1 <Serial+0x16>
    1226:	f0 91 b2 02 	lds	r31, 0x02B2	; 0x8002b2 <Serial+0x17>
    122a:	82 fd       	sbrc	r24, 2
    122c:	12 c0       	rjmp	.+36     	; 0x1252 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    122e:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    1230:	80 91 b4 02 	lds	r24, 0x02B4	; 0x8002b4 <Serial+0x19>
    1234:	8f 5f       	subi	r24, 0xFF	; 255
    1236:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    1238:	20 91 b5 02 	lds	r18, 0x02B5	; 0x8002b5 <Serial+0x1a>
    123c:	82 17       	cp	r24, r18
    123e:	51 f0       	breq	.+20     	; 0x1254 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    1240:	e0 91 b4 02 	lds	r30, 0x02B4	; 0x8002b4 <Serial+0x19>
    1244:	f0 e0       	ldi	r31, 0x00	; 0
    1246:	e5 56       	subi	r30, 0x65	; 101
    1248:	fd 4f       	sbci	r31, 0xFD	; 253
    124a:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    124c:	80 93 b4 02 	sts	0x02B4, r24	; 0x8002b4 <Serial+0x19>
    1250:	01 c0       	rjmp	.+2      	; 0x1254 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    1252:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    1254:	ff 91       	pop	r31
    1256:	ef 91       	pop	r30
    1258:	9f 91       	pop	r25
    125a:	8f 91       	pop	r24
    125c:	2f 91       	pop	r18
    125e:	0f 90       	pop	r0
    1260:	0f be       	out	0x3f, r0	; 63
    1262:	0f 90       	pop	r0
    1264:	1f 90       	pop	r1
    1266:	18 95       	reti

00001268 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    1268:	1f 92       	push	r1
    126a:	0f 92       	push	r0
    126c:	0f b6       	in	r0, 0x3f	; 63
    126e:	0f 92       	push	r0
    1270:	11 24       	eor	r1, r1
    1272:	2f 93       	push	r18
    1274:	3f 93       	push	r19
    1276:	4f 93       	push	r20
    1278:	5f 93       	push	r21
    127a:	6f 93       	push	r22
    127c:	7f 93       	push	r23
    127e:	8f 93       	push	r24
    1280:	9f 93       	push	r25
    1282:	af 93       	push	r26
    1284:	bf 93       	push	r27
    1286:	ef 93       	push	r30
    1288:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    128a:	8b e9       	ldi	r24, 0x9B	; 155
    128c:	92 e0       	ldi	r25, 0x02	; 2
    128e:	0e 94 11 08 	call	0x1022	; 0x1022 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    1292:	ff 91       	pop	r31
    1294:	ef 91       	pop	r30
    1296:	bf 91       	pop	r27
    1298:	af 91       	pop	r26
    129a:	9f 91       	pop	r25
    129c:	8f 91       	pop	r24
    129e:	7f 91       	pop	r23
    12a0:	6f 91       	pop	r22
    12a2:	5f 91       	pop	r21
    12a4:	4f 91       	pop	r20
    12a6:	3f 91       	pop	r19
    12a8:	2f 91       	pop	r18
    12aa:	0f 90       	pop	r0
    12ac:	0f be       	out	0x3f, r0	; 63
    12ae:	0f 90       	pop	r0
    12b0:	1f 90       	pop	r1
    12b2:	18 95       	reti

000012b4 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    12b4:	8b e9       	ldi	r24, 0x9B	; 155
    12b6:	92 e0       	ldi	r25, 0x02	; 2
    12b8:	0e 94 b5 07 	call	0xf6a	; 0xf6a <_ZN14HardwareSerial9availableEv>
    12bc:	21 e0       	ldi	r18, 0x01	; 1
    12be:	89 2b       	or	r24, r25
    12c0:	09 f4       	brne	.+2      	; 0x12c4 <_Z17Serial0_availablev+0x10>
    12c2:	20 e0       	ldi	r18, 0x00	; 0
}
    12c4:	82 2f       	mov	r24, r18
    12c6:	08 95       	ret

000012c8 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    12c8:	eb e9       	ldi	r30, 0x9B	; 155
    12ca:	f2 e0       	ldi	r31, 0x02	; 2
    12cc:	13 82       	std	Z+3, r1	; 0x03
    12ce:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    12d0:	88 ee       	ldi	r24, 0xE8	; 232
    12d2:	93 e0       	ldi	r25, 0x03	; 3
    12d4:	a0 e0       	ldi	r26, 0x00	; 0
    12d6:	b0 e0       	ldi	r27, 0x00	; 0
    12d8:	84 83       	std	Z+4, r24	; 0x04
    12da:	95 83       	std	Z+5, r25	; 0x05
    12dc:	a6 83       	std	Z+6, r26	; 0x06
    12de:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    12e0:	87 e1       	ldi	r24, 0x17	; 23
    12e2:	91 e0       	ldi	r25, 0x01	; 1
    12e4:	91 83       	std	Z+1, r25	; 0x01
    12e6:	80 83       	st	Z, r24
    12e8:	85 ec       	ldi	r24, 0xC5	; 197
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	95 87       	std	Z+13, r25	; 0x0d
    12ee:	84 87       	std	Z+12, r24	; 0x0c
    12f0:	84 ec       	ldi	r24, 0xC4	; 196
    12f2:	90 e0       	ldi	r25, 0x00	; 0
    12f4:	97 87       	std	Z+15, r25	; 0x0f
    12f6:	86 87       	std	Z+14, r24	; 0x0e
    12f8:	80 ec       	ldi	r24, 0xC0	; 192
    12fa:	90 e0       	ldi	r25, 0x00	; 0
    12fc:	91 8b       	std	Z+17, r25	; 0x11
    12fe:	80 8b       	std	Z+16, r24	; 0x10
    1300:	81 ec       	ldi	r24, 0xC1	; 193
    1302:	90 e0       	ldi	r25, 0x00	; 0
    1304:	93 8b       	std	Z+19, r25	; 0x13
    1306:	82 8b       	std	Z+18, r24	; 0x12
    1308:	82 ec       	ldi	r24, 0xC2	; 194
    130a:	90 e0       	ldi	r25, 0x00	; 0
    130c:	95 8b       	std	Z+21, r25	; 0x15
    130e:	84 8b       	std	Z+20, r24	; 0x14
    1310:	86 ec       	ldi	r24, 0xC6	; 198
    1312:	90 e0       	ldi	r25, 0x00	; 0
    1314:	97 8b       	std	Z+23, r25	; 0x17
    1316:	86 8b       	std	Z+22, r24	; 0x16
    1318:	11 8e       	std	Z+25, r1	; 0x19
    131a:	12 8e       	std	Z+26, r1	; 0x1a
    131c:	13 8e       	std	Z+27, r1	; 0x1b
    131e:	14 8e       	std	Z+28, r1	; 0x1c
    1320:	08 95       	ret

00001322 <initVariant>:
    1322:	08 95       	ret

00001324 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    1324:	0e 94 2c 0a 	call	0x1458	; 0x1458 <init>

	initVariant();
    1328:	0e 94 91 09 	call	0x1322	; 0x1322 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    132c:	0e 94 6b 07 	call	0xed6	; 0xed6 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    1330:	c2 ef       	ldi	r28, 0xF2	; 242
    1332:	d7 e0       	ldi	r29, 0x07	; 7
#endif
	
	setup();
    
	for (;;) {
		loop();
    1334:	0e 94 8f 07 	call	0xf1e	; 0xf1e <loop>
		if (serialEventRun) serialEventRun();
    1338:	20 97       	sbiw	r28, 0x00	; 0
    133a:	e1 f3       	breq	.-8      	; 0x1334 <main+0x10>
    133c:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <_Z14serialEventRunv>
    1340:	f9 cf       	rjmp	.-14     	; 0x1334 <main+0x10>

00001342 <_ZN5Print5writeEPKhj>:
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
    virtual size_t write(const uint8_t *buffer, size_t size);
    size_t write(const char *buffer, size_t size) {
      return write((const uint8_t *)buffer, size);
    1342:	cf 92       	push	r12
    1344:	df 92       	push	r13
    1346:	ef 92       	push	r14
    1348:	ff 92       	push	r15
    134a:	0f 93       	push	r16
    134c:	1f 93       	push	r17
    134e:	cf 93       	push	r28
    1350:	df 93       	push	r29
    1352:	6c 01       	movw	r12, r24
    1354:	7a 01       	movw	r14, r20
    1356:	8b 01       	movw	r16, r22
    1358:	c0 e0       	ldi	r28, 0x00	; 0
    135a:	d0 e0       	ldi	r29, 0x00	; 0
    135c:	ce 15       	cp	r28, r14
    135e:	df 05       	cpc	r29, r15
    1360:	81 f0       	breq	.+32     	; 0x1382 <_ZN5Print5writeEPKhj+0x40>
    1362:	d8 01       	movw	r26, r16
    1364:	6d 91       	ld	r22, X+
    1366:	8d 01       	movw	r16, r26
    1368:	d6 01       	movw	r26, r12
    136a:	ed 91       	ld	r30, X+
    136c:	fc 91       	ld	r31, X
    136e:	01 90       	ld	r0, Z+
    1370:	f0 81       	ld	r31, Z
    1372:	e0 2d       	mov	r30, r0
    1374:	c6 01       	movw	r24, r12
    1376:	09 95       	icall
    1378:	89 2b       	or	r24, r25
    137a:	11 f0       	breq	.+4      	; 0x1380 <_ZN5Print5writeEPKhj+0x3e>
    137c:	21 96       	adiw	r28, 0x01	; 1
    137e:	ee cf       	rjmp	.-36     	; 0x135c <_ZN5Print5writeEPKhj+0x1a>
    1380:	7e 01       	movw	r14, r28
    1382:	c7 01       	movw	r24, r14
    1384:	df 91       	pop	r29
    1386:	cf 91       	pop	r28
    1388:	1f 91       	pop	r17
    138a:	0f 91       	pop	r16
    138c:	ff 90       	pop	r15
    138e:	ef 90       	pop	r14
    1390:	df 90       	pop	r13
    1392:	cf 90       	pop	r12
    1394:	08 95       	ret

00001396 <_ZN5Print5writeEPKc>:
    1396:	61 15       	cp	r22, r1
    1398:	71 05       	cpc	r23, r1
    139a:	79 f0       	breq	.+30     	; 0x13ba <_ZN5Print5writeEPKc+0x24>
    139c:	fb 01       	movw	r30, r22
    139e:	01 90       	ld	r0, Z+
    13a0:	00 20       	and	r0, r0
    13a2:	e9 f7       	brne	.-6      	; 0x139e <_ZN5Print5writeEPKc+0x8>
    13a4:	31 97       	sbiw	r30, 0x01	; 1
    13a6:	af 01       	movw	r20, r30
    13a8:	46 1b       	sub	r20, r22
    13aa:	57 0b       	sbc	r21, r23
    13ac:	dc 01       	movw	r26, r24
    13ae:	ed 91       	ld	r30, X+
    13b0:	fc 91       	ld	r31, X
    13b2:	02 80       	ldd	r0, Z+2	; 0x02
    13b4:	f3 81       	ldd	r31, Z+3	; 0x03
    13b6:	e0 2d       	mov	r30, r0
    13b8:	09 94       	ijmp
    13ba:	80 e0       	ldi	r24, 0x00	; 0
    13bc:	90 e0       	ldi	r25, 0x00	; 0
    13be:	08 95       	ret

000013c0 <_ZN5Print5printEPKc>:
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    13c0:	0c 94 cb 09 	jmp	0x1396	; 0x1396 <_ZN5Print5writeEPKc>

000013c4 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    13c4:	1f 92       	push	r1
    13c6:	0f 92       	push	r0
    13c8:	0f b6       	in	r0, 0x3f	; 63
    13ca:	0f 92       	push	r0
    13cc:	11 24       	eor	r1, r1
    13ce:	2f 93       	push	r18
    13d0:	3f 93       	push	r19
    13d2:	8f 93       	push	r24
    13d4:	9f 93       	push	r25
    13d6:	af 93       	push	r26
    13d8:	bf 93       	push	r27
    13da:	80 91 39 03 	lds	r24, 0x0339	; 0x800339 <timer0_millis>
    13de:	90 91 3a 03 	lds	r25, 0x033A	; 0x80033a <timer0_millis+0x1>
    13e2:	a0 91 3b 03 	lds	r26, 0x033B	; 0x80033b <timer0_millis+0x2>
    13e6:	b0 91 3c 03 	lds	r27, 0x033C	; 0x80033c <timer0_millis+0x3>
    13ea:	30 91 38 03 	lds	r19, 0x0338	; 0x800338 <timer0_fract>
    13ee:	26 e0       	ldi	r18, 0x06	; 6
    13f0:	23 0f       	add	r18, r19
    13f2:	2d 37       	cpi	r18, 0x7D	; 125
    13f4:	20 f4       	brcc	.+8      	; 0x13fe <__vector_16+0x3a>
    13f6:	02 96       	adiw	r24, 0x02	; 2
    13f8:	a1 1d       	adc	r26, r1
    13fa:	b1 1d       	adc	r27, r1
    13fc:	05 c0       	rjmp	.+10     	; 0x1408 <__vector_16+0x44>
    13fe:	29 e8       	ldi	r18, 0x89	; 137
    1400:	23 0f       	add	r18, r19
    1402:	03 96       	adiw	r24, 0x03	; 3
    1404:	a1 1d       	adc	r26, r1
    1406:	b1 1d       	adc	r27, r1
    1408:	20 93 38 03 	sts	0x0338, r18	; 0x800338 <timer0_fract>
    140c:	80 93 39 03 	sts	0x0339, r24	; 0x800339 <timer0_millis>
    1410:	90 93 3a 03 	sts	0x033A, r25	; 0x80033a <timer0_millis+0x1>
    1414:	a0 93 3b 03 	sts	0x033B, r26	; 0x80033b <timer0_millis+0x2>
    1418:	b0 93 3c 03 	sts	0x033C, r27	; 0x80033c <timer0_millis+0x3>
    141c:	80 91 3d 03 	lds	r24, 0x033D	; 0x80033d <timer0_overflow_count>
    1420:	90 91 3e 03 	lds	r25, 0x033E	; 0x80033e <timer0_overflow_count+0x1>
    1424:	a0 91 3f 03 	lds	r26, 0x033F	; 0x80033f <timer0_overflow_count+0x2>
    1428:	b0 91 40 03 	lds	r27, 0x0340	; 0x800340 <timer0_overflow_count+0x3>
    142c:	01 96       	adiw	r24, 0x01	; 1
    142e:	a1 1d       	adc	r26, r1
    1430:	b1 1d       	adc	r27, r1
    1432:	80 93 3d 03 	sts	0x033D, r24	; 0x80033d <timer0_overflow_count>
    1436:	90 93 3e 03 	sts	0x033E, r25	; 0x80033e <timer0_overflow_count+0x1>
    143a:	a0 93 3f 03 	sts	0x033F, r26	; 0x80033f <timer0_overflow_count+0x2>
    143e:	b0 93 40 03 	sts	0x0340, r27	; 0x800340 <timer0_overflow_count+0x3>
    1442:	bf 91       	pop	r27
    1444:	af 91       	pop	r26
    1446:	9f 91       	pop	r25
    1448:	8f 91       	pop	r24
    144a:	3f 91       	pop	r19
    144c:	2f 91       	pop	r18
    144e:	0f 90       	pop	r0
    1450:	0f be       	out	0x3f, r0	; 63
    1452:	0f 90       	pop	r0
    1454:	1f 90       	pop	r1
    1456:	18 95       	reti

00001458 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    1458:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    145a:	84 b5       	in	r24, 0x24	; 36
    145c:	82 60       	ori	r24, 0x02	; 2
    145e:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    1460:	84 b5       	in	r24, 0x24	; 36
    1462:	81 60       	ori	r24, 0x01	; 1
    1464:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    1466:	85 b5       	in	r24, 0x25	; 37
    1468:	82 60       	ori	r24, 0x02	; 2
    146a:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    146c:	85 b5       	in	r24, 0x25	; 37
    146e:	81 60       	ori	r24, 0x01	; 1
    1470:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    1472:	ee e6       	ldi	r30, 0x6E	; 110
    1474:	f0 e0       	ldi	r31, 0x00	; 0
    1476:	80 81       	ld	r24, Z
    1478:	81 60       	ori	r24, 0x01	; 1
    147a:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    147c:	e1 e8       	ldi	r30, 0x81	; 129
    147e:	f0 e0       	ldi	r31, 0x00	; 0
    1480:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    1482:	80 81       	ld	r24, Z
    1484:	82 60       	ori	r24, 0x02	; 2
    1486:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    1488:	80 81       	ld	r24, Z
    148a:	81 60       	ori	r24, 0x01	; 1
    148c:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    148e:	e0 e8       	ldi	r30, 0x80	; 128
    1490:	f0 e0       	ldi	r31, 0x00	; 0
    1492:	80 81       	ld	r24, Z
    1494:	81 60       	ori	r24, 0x01	; 1
    1496:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    1498:	e1 eb       	ldi	r30, 0xB1	; 177
    149a:	f0 e0       	ldi	r31, 0x00	; 0
    149c:	80 81       	ld	r24, Z
    149e:	84 60       	ori	r24, 0x04	; 4
    14a0:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    14a2:	e0 eb       	ldi	r30, 0xB0	; 176
    14a4:	f0 e0       	ldi	r31, 0x00	; 0
    14a6:	80 81       	ld	r24, Z
    14a8:	81 60       	ori	r24, 0x01	; 1
    14aa:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    14ac:	e1 e9       	ldi	r30, 0x91	; 145
    14ae:	f0 e0       	ldi	r31, 0x00	; 0
    14b0:	80 81       	ld	r24, Z
    14b2:	82 60       	ori	r24, 0x02	; 2
    14b4:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
    14b6:	80 81       	ld	r24, Z
    14b8:	81 60       	ori	r24, 0x01	; 1
    14ba:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    14bc:	e0 e9       	ldi	r30, 0x90	; 144
    14be:	f0 e0       	ldi	r31, 0x00	; 0
    14c0:	80 81       	ld	r24, Z
    14c2:	81 60       	ori	r24, 0x01	; 1
    14c4:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
    14c6:	e1 ea       	ldi	r30, 0xA1	; 161
    14c8:	f0 e0       	ldi	r31, 0x00	; 0
    14ca:	80 81       	ld	r24, Z
    14cc:	82 60       	ori	r24, 0x02	; 2
    14ce:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
    14d0:	80 81       	ld	r24, Z
    14d2:	81 60       	ori	r24, 0x01	; 1
    14d4:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
    14d6:	e0 ea       	ldi	r30, 0xA0	; 160
    14d8:	f0 e0       	ldi	r31, 0x00	; 0
    14da:	80 81       	ld	r24, Z
    14dc:	81 60       	ori	r24, 0x01	; 1
    14de:	80 83       	st	Z, r24
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
		sbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#elif F_CPU >= 8000000 // 8 MHz / 64 = 125 KHz
		sbi(ADCSRA, ADPS2);
    14e0:	ea e7       	ldi	r30, 0x7A	; 122
    14e2:	f0 e0       	ldi	r31, 0x00	; 0
    14e4:	80 81       	ld	r24, Z
    14e6:	84 60       	ori	r24, 0x04	; 4
    14e8:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    14ea:	80 81       	ld	r24, Z
    14ec:	82 60       	ori	r24, 0x02	; 2
    14ee:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS0);
    14f0:	80 81       	ld	r24, Z
    14f2:	8e 7f       	andi	r24, 0xFE	; 254
    14f4:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    14f6:	80 81       	ld	r24, Z
    14f8:	80 68       	ori	r24, 0x80	; 128
    14fa:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    14fc:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    1500:	08 95       	ret

00001502 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    1502:	cf 93       	push	r28
    1504:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	fc 01       	movw	r30, r24
    150a:	e3 50       	subi	r30, 0x03	; 3
    150c:	ff 4f       	sbci	r31, 0xFF	; 255
    150e:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    1510:	fc 01       	movw	r30, r24
    1512:	ef 5e       	subi	r30, 0xEF	; 239
    1514:	fe 4f       	sbci	r31, 0xFE	; 254
    1516:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    1518:	88 23       	and	r24, r24
    151a:	61 f1       	breq	.+88     	; 0x1574 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    151c:	90 e0       	ldi	r25, 0x00	; 0
    151e:	88 0f       	add	r24, r24
    1520:	99 1f       	adc	r25, r25
    1522:	fc 01       	movw	r30, r24
    1524:	e1 5d       	subi	r30, 0xD1	; 209
    1526:	fe 4f       	sbci	r31, 0xFE	; 254
    1528:	c5 91       	lpm	r28, Z+
    152a:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    152c:	fc 01       	movw	r30, r24
    152e:	eb 5d       	subi	r30, 0xDB	; 219
    1530:	fe 4f       	sbci	r31, 0xFE	; 254
    1532:	a5 91       	lpm	r26, Z+
    1534:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    1536:	61 11       	cpse	r22, r1
    1538:	09 c0       	rjmp	.+18     	; 0x154c <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    153a:	9f b7       	in	r25, 0x3f	; 63
                cli();
    153c:	f8 94       	cli
		*reg &= ~bit;
    153e:	88 81       	ld	r24, Y
    1540:	20 95       	com	r18
    1542:	82 23       	and	r24, r18
    1544:	88 83       	st	Y, r24
		*out &= ~bit;
    1546:	ec 91       	ld	r30, X
    1548:	2e 23       	and	r18, r30
    154a:	0b c0       	rjmp	.+22     	; 0x1562 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    154c:	62 30       	cpi	r22, 0x02	; 2
    154e:	61 f4       	brne	.+24     	; 0x1568 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    1550:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1552:	f8 94       	cli
		*reg &= ~bit;
    1554:	88 81       	ld	r24, Y
    1556:	32 2f       	mov	r19, r18
    1558:	30 95       	com	r19
    155a:	83 23       	and	r24, r19
    155c:	88 83       	st	Y, r24
		*out |= bit;
    155e:	ec 91       	ld	r30, X
    1560:	2e 2b       	or	r18, r30
    1562:	2c 93       	st	X, r18
		SREG = oldSREG;
    1564:	9f bf       	out	0x3f, r25	; 63
    1566:	06 c0       	rjmp	.+12     	; 0x1574 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    1568:	8f b7       	in	r24, 0x3f	; 63
                cli();
    156a:	f8 94       	cli
		*reg |= bit;
    156c:	e8 81       	ld	r30, Y
    156e:	2e 2b       	or	r18, r30
    1570:	28 83       	st	Y, r18
		SREG = oldSREG;
    1572:	8f bf       	out	0x3f, r24	; 63
	}
}
    1574:	df 91       	pop	r29
    1576:	cf 91       	pop	r28
    1578:	08 95       	ret

0000157a <__udivmodsi4>:
    157a:	a1 e2       	ldi	r26, 0x21	; 33
    157c:	1a 2e       	mov	r1, r26
    157e:	aa 1b       	sub	r26, r26
    1580:	bb 1b       	sub	r27, r27
    1582:	fd 01       	movw	r30, r26
    1584:	0d c0       	rjmp	.+26     	; 0x15a0 <__udivmodsi4_ep>

00001586 <__udivmodsi4_loop>:
    1586:	aa 1f       	adc	r26, r26
    1588:	bb 1f       	adc	r27, r27
    158a:	ee 1f       	adc	r30, r30
    158c:	ff 1f       	adc	r31, r31
    158e:	a2 17       	cp	r26, r18
    1590:	b3 07       	cpc	r27, r19
    1592:	e4 07       	cpc	r30, r20
    1594:	f5 07       	cpc	r31, r21
    1596:	20 f0       	brcs	.+8      	; 0x15a0 <__udivmodsi4_ep>
    1598:	a2 1b       	sub	r26, r18
    159a:	b3 0b       	sbc	r27, r19
    159c:	e4 0b       	sbc	r30, r20
    159e:	f5 0b       	sbc	r31, r21

000015a0 <__udivmodsi4_ep>:
    15a0:	66 1f       	adc	r22, r22
    15a2:	77 1f       	adc	r23, r23
    15a4:	88 1f       	adc	r24, r24
    15a6:	99 1f       	adc	r25, r25
    15a8:	1a 94       	dec	r1
    15aa:	69 f7       	brne	.-38     	; 0x1586 <__udivmodsi4_loop>
    15ac:	60 95       	com	r22
    15ae:	70 95       	com	r23
    15b0:	80 95       	com	r24
    15b2:	90 95       	com	r25
    15b4:	9b 01       	movw	r18, r22
    15b6:	ac 01       	movw	r20, r24
    15b8:	bd 01       	movw	r22, r26
    15ba:	cf 01       	movw	r24, r30
    15bc:	08 95       	ret

000015be <__tablejump2__>:
    15be:	ee 0f       	add	r30, r30
    15c0:	ff 1f       	adc	r31, r31
    15c2:	05 90       	lpm	r0, Z+
    15c4:	f4 91       	lpm	r31, Z
    15c6:	e0 2d       	mov	r30, r0
    15c8:	09 94       	ijmp

000015ca <malloc>:
    15ca:	0f 93       	push	r16
    15cc:	1f 93       	push	r17
    15ce:	cf 93       	push	r28
    15d0:	df 93       	push	r29
    15d2:	82 30       	cpi	r24, 0x02	; 2
    15d4:	91 05       	cpc	r25, r1
    15d6:	10 f4       	brcc	.+4      	; 0x15dc <malloc+0x12>
    15d8:	82 e0       	ldi	r24, 0x02	; 2
    15da:	90 e0       	ldi	r25, 0x00	; 0
    15dc:	e0 91 43 03 	lds	r30, 0x0343	; 0x800343 <__flp>
    15e0:	f0 91 44 03 	lds	r31, 0x0344	; 0x800344 <__flp+0x1>
    15e4:	20 e0       	ldi	r18, 0x00	; 0
    15e6:	30 e0       	ldi	r19, 0x00	; 0
    15e8:	a0 e0       	ldi	r26, 0x00	; 0
    15ea:	b0 e0       	ldi	r27, 0x00	; 0
    15ec:	30 97       	sbiw	r30, 0x00	; 0
    15ee:	19 f1       	breq	.+70     	; 0x1636 <malloc+0x6c>
    15f0:	40 81       	ld	r20, Z
    15f2:	51 81       	ldd	r21, Z+1	; 0x01
    15f4:	02 81       	ldd	r16, Z+2	; 0x02
    15f6:	13 81       	ldd	r17, Z+3	; 0x03
    15f8:	48 17       	cp	r20, r24
    15fa:	59 07       	cpc	r21, r25
    15fc:	c8 f0       	brcs	.+50     	; 0x1630 <malloc+0x66>
    15fe:	84 17       	cp	r24, r20
    1600:	95 07       	cpc	r25, r21
    1602:	69 f4       	brne	.+26     	; 0x161e <malloc+0x54>
    1604:	10 97       	sbiw	r26, 0x00	; 0
    1606:	31 f0       	breq	.+12     	; 0x1614 <malloc+0x4a>
    1608:	12 96       	adiw	r26, 0x02	; 2
    160a:	0c 93       	st	X, r16
    160c:	12 97       	sbiw	r26, 0x02	; 2
    160e:	13 96       	adiw	r26, 0x03	; 3
    1610:	1c 93       	st	X, r17
    1612:	27 c0       	rjmp	.+78     	; 0x1662 <malloc+0x98>
    1614:	00 93 43 03 	sts	0x0343, r16	; 0x800343 <__flp>
    1618:	10 93 44 03 	sts	0x0344, r17	; 0x800344 <__flp+0x1>
    161c:	22 c0       	rjmp	.+68     	; 0x1662 <malloc+0x98>
    161e:	21 15       	cp	r18, r1
    1620:	31 05       	cpc	r19, r1
    1622:	19 f0       	breq	.+6      	; 0x162a <malloc+0x60>
    1624:	42 17       	cp	r20, r18
    1626:	53 07       	cpc	r21, r19
    1628:	18 f4       	brcc	.+6      	; 0x1630 <malloc+0x66>
    162a:	9a 01       	movw	r18, r20
    162c:	bd 01       	movw	r22, r26
    162e:	ef 01       	movw	r28, r30
    1630:	df 01       	movw	r26, r30
    1632:	f8 01       	movw	r30, r16
    1634:	db cf       	rjmp	.-74     	; 0x15ec <malloc+0x22>
    1636:	21 15       	cp	r18, r1
    1638:	31 05       	cpc	r19, r1
    163a:	f9 f0       	breq	.+62     	; 0x167a <malloc+0xb0>
    163c:	28 1b       	sub	r18, r24
    163e:	39 0b       	sbc	r19, r25
    1640:	24 30       	cpi	r18, 0x04	; 4
    1642:	31 05       	cpc	r19, r1
    1644:	80 f4       	brcc	.+32     	; 0x1666 <malloc+0x9c>
    1646:	8a 81       	ldd	r24, Y+2	; 0x02
    1648:	9b 81       	ldd	r25, Y+3	; 0x03
    164a:	61 15       	cp	r22, r1
    164c:	71 05       	cpc	r23, r1
    164e:	21 f0       	breq	.+8      	; 0x1658 <malloc+0x8e>
    1650:	fb 01       	movw	r30, r22
    1652:	93 83       	std	Z+3, r25	; 0x03
    1654:	82 83       	std	Z+2, r24	; 0x02
    1656:	04 c0       	rjmp	.+8      	; 0x1660 <malloc+0x96>
    1658:	90 93 44 03 	sts	0x0344, r25	; 0x800344 <__flp+0x1>
    165c:	80 93 43 03 	sts	0x0343, r24	; 0x800343 <__flp>
    1660:	fe 01       	movw	r30, r28
    1662:	32 96       	adiw	r30, 0x02	; 2
    1664:	44 c0       	rjmp	.+136    	; 0x16ee <malloc+0x124>
    1666:	fe 01       	movw	r30, r28
    1668:	e2 0f       	add	r30, r18
    166a:	f3 1f       	adc	r31, r19
    166c:	81 93       	st	Z+, r24
    166e:	91 93       	st	Z+, r25
    1670:	22 50       	subi	r18, 0x02	; 2
    1672:	31 09       	sbc	r19, r1
    1674:	39 83       	std	Y+1, r19	; 0x01
    1676:	28 83       	st	Y, r18
    1678:	3a c0       	rjmp	.+116    	; 0x16ee <malloc+0x124>
    167a:	20 91 41 03 	lds	r18, 0x0341	; 0x800341 <__brkval>
    167e:	30 91 42 03 	lds	r19, 0x0342	; 0x800342 <__brkval+0x1>
    1682:	23 2b       	or	r18, r19
    1684:	41 f4       	brne	.+16     	; 0x1696 <malloc+0xcc>
    1686:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    168a:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    168e:	30 93 42 03 	sts	0x0342, r19	; 0x800342 <__brkval+0x1>
    1692:	20 93 41 03 	sts	0x0341, r18	; 0x800341 <__brkval>
    1696:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    169a:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    169e:	21 15       	cp	r18, r1
    16a0:	31 05       	cpc	r19, r1
    16a2:	41 f4       	brne	.+16     	; 0x16b4 <malloc+0xea>
    16a4:	2d b7       	in	r18, 0x3d	; 61
    16a6:	3e b7       	in	r19, 0x3e	; 62
    16a8:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    16ac:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    16b0:	24 1b       	sub	r18, r20
    16b2:	35 0b       	sbc	r19, r21
    16b4:	e0 91 41 03 	lds	r30, 0x0341	; 0x800341 <__brkval>
    16b8:	f0 91 42 03 	lds	r31, 0x0342	; 0x800342 <__brkval+0x1>
    16bc:	e2 17       	cp	r30, r18
    16be:	f3 07       	cpc	r31, r19
    16c0:	a0 f4       	brcc	.+40     	; 0x16ea <malloc+0x120>
    16c2:	2e 1b       	sub	r18, r30
    16c4:	3f 0b       	sbc	r19, r31
    16c6:	28 17       	cp	r18, r24
    16c8:	39 07       	cpc	r19, r25
    16ca:	78 f0       	brcs	.+30     	; 0x16ea <malloc+0x120>
    16cc:	ac 01       	movw	r20, r24
    16ce:	4e 5f       	subi	r20, 0xFE	; 254
    16d0:	5f 4f       	sbci	r21, 0xFF	; 255
    16d2:	24 17       	cp	r18, r20
    16d4:	35 07       	cpc	r19, r21
    16d6:	48 f0       	brcs	.+18     	; 0x16ea <malloc+0x120>
    16d8:	4e 0f       	add	r20, r30
    16da:	5f 1f       	adc	r21, r31
    16dc:	50 93 42 03 	sts	0x0342, r21	; 0x800342 <__brkval+0x1>
    16e0:	40 93 41 03 	sts	0x0341, r20	; 0x800341 <__brkval>
    16e4:	81 93       	st	Z+, r24
    16e6:	91 93       	st	Z+, r25
    16e8:	02 c0       	rjmp	.+4      	; 0x16ee <malloc+0x124>
    16ea:	e0 e0       	ldi	r30, 0x00	; 0
    16ec:	f0 e0       	ldi	r31, 0x00	; 0
    16ee:	cf 01       	movw	r24, r30
    16f0:	df 91       	pop	r29
    16f2:	cf 91       	pop	r28
    16f4:	1f 91       	pop	r17
    16f6:	0f 91       	pop	r16
    16f8:	08 95       	ret

000016fa <free>:
    16fa:	cf 93       	push	r28
    16fc:	df 93       	push	r29
    16fe:	00 97       	sbiw	r24, 0x00	; 0
    1700:	09 f4       	brne	.+2      	; 0x1704 <free+0xa>
    1702:	81 c0       	rjmp	.+258    	; 0x1806 <free+0x10c>
    1704:	fc 01       	movw	r30, r24
    1706:	32 97       	sbiw	r30, 0x02	; 2
    1708:	13 82       	std	Z+3, r1	; 0x03
    170a:	12 82       	std	Z+2, r1	; 0x02
    170c:	a0 91 43 03 	lds	r26, 0x0343	; 0x800343 <__flp>
    1710:	b0 91 44 03 	lds	r27, 0x0344	; 0x800344 <__flp+0x1>
    1714:	10 97       	sbiw	r26, 0x00	; 0
    1716:	81 f4       	brne	.+32     	; 0x1738 <free+0x3e>
    1718:	20 81       	ld	r18, Z
    171a:	31 81       	ldd	r19, Z+1	; 0x01
    171c:	82 0f       	add	r24, r18
    171e:	93 1f       	adc	r25, r19
    1720:	20 91 41 03 	lds	r18, 0x0341	; 0x800341 <__brkval>
    1724:	30 91 42 03 	lds	r19, 0x0342	; 0x800342 <__brkval+0x1>
    1728:	28 17       	cp	r18, r24
    172a:	39 07       	cpc	r19, r25
    172c:	51 f5       	brne	.+84     	; 0x1782 <free+0x88>
    172e:	f0 93 42 03 	sts	0x0342, r31	; 0x800342 <__brkval+0x1>
    1732:	e0 93 41 03 	sts	0x0341, r30	; 0x800341 <__brkval>
    1736:	67 c0       	rjmp	.+206    	; 0x1806 <free+0x10c>
    1738:	ed 01       	movw	r28, r26
    173a:	20 e0       	ldi	r18, 0x00	; 0
    173c:	30 e0       	ldi	r19, 0x00	; 0
    173e:	ce 17       	cp	r28, r30
    1740:	df 07       	cpc	r29, r31
    1742:	40 f4       	brcc	.+16     	; 0x1754 <free+0x5a>
    1744:	4a 81       	ldd	r20, Y+2	; 0x02
    1746:	5b 81       	ldd	r21, Y+3	; 0x03
    1748:	9e 01       	movw	r18, r28
    174a:	41 15       	cp	r20, r1
    174c:	51 05       	cpc	r21, r1
    174e:	f1 f0       	breq	.+60     	; 0x178c <free+0x92>
    1750:	ea 01       	movw	r28, r20
    1752:	f5 cf       	rjmp	.-22     	; 0x173e <free+0x44>
    1754:	d3 83       	std	Z+3, r29	; 0x03
    1756:	c2 83       	std	Z+2, r28	; 0x02
    1758:	40 81       	ld	r20, Z
    175a:	51 81       	ldd	r21, Z+1	; 0x01
    175c:	84 0f       	add	r24, r20
    175e:	95 1f       	adc	r25, r21
    1760:	c8 17       	cp	r28, r24
    1762:	d9 07       	cpc	r29, r25
    1764:	59 f4       	brne	.+22     	; 0x177c <free+0x82>
    1766:	88 81       	ld	r24, Y
    1768:	99 81       	ldd	r25, Y+1	; 0x01
    176a:	84 0f       	add	r24, r20
    176c:	95 1f       	adc	r25, r21
    176e:	02 96       	adiw	r24, 0x02	; 2
    1770:	91 83       	std	Z+1, r25	; 0x01
    1772:	80 83       	st	Z, r24
    1774:	8a 81       	ldd	r24, Y+2	; 0x02
    1776:	9b 81       	ldd	r25, Y+3	; 0x03
    1778:	93 83       	std	Z+3, r25	; 0x03
    177a:	82 83       	std	Z+2, r24	; 0x02
    177c:	21 15       	cp	r18, r1
    177e:	31 05       	cpc	r19, r1
    1780:	29 f4       	brne	.+10     	; 0x178c <free+0x92>
    1782:	f0 93 44 03 	sts	0x0344, r31	; 0x800344 <__flp+0x1>
    1786:	e0 93 43 03 	sts	0x0343, r30	; 0x800343 <__flp>
    178a:	3d c0       	rjmp	.+122    	; 0x1806 <free+0x10c>
    178c:	e9 01       	movw	r28, r18
    178e:	fb 83       	std	Y+3, r31	; 0x03
    1790:	ea 83       	std	Y+2, r30	; 0x02
    1792:	49 91       	ld	r20, Y+
    1794:	59 91       	ld	r21, Y+
    1796:	c4 0f       	add	r28, r20
    1798:	d5 1f       	adc	r29, r21
    179a:	ec 17       	cp	r30, r28
    179c:	fd 07       	cpc	r31, r29
    179e:	61 f4       	brne	.+24     	; 0x17b8 <free+0xbe>
    17a0:	80 81       	ld	r24, Z
    17a2:	91 81       	ldd	r25, Z+1	; 0x01
    17a4:	84 0f       	add	r24, r20
    17a6:	95 1f       	adc	r25, r21
    17a8:	02 96       	adiw	r24, 0x02	; 2
    17aa:	e9 01       	movw	r28, r18
    17ac:	99 83       	std	Y+1, r25	; 0x01
    17ae:	88 83       	st	Y, r24
    17b0:	82 81       	ldd	r24, Z+2	; 0x02
    17b2:	93 81       	ldd	r25, Z+3	; 0x03
    17b4:	9b 83       	std	Y+3, r25	; 0x03
    17b6:	8a 83       	std	Y+2, r24	; 0x02
    17b8:	e0 e0       	ldi	r30, 0x00	; 0
    17ba:	f0 e0       	ldi	r31, 0x00	; 0
    17bc:	12 96       	adiw	r26, 0x02	; 2
    17be:	8d 91       	ld	r24, X+
    17c0:	9c 91       	ld	r25, X
    17c2:	13 97       	sbiw	r26, 0x03	; 3
    17c4:	00 97       	sbiw	r24, 0x00	; 0
    17c6:	19 f0       	breq	.+6      	; 0x17ce <free+0xd4>
    17c8:	fd 01       	movw	r30, r26
    17ca:	dc 01       	movw	r26, r24
    17cc:	f7 cf       	rjmp	.-18     	; 0x17bc <free+0xc2>
    17ce:	8d 91       	ld	r24, X+
    17d0:	9c 91       	ld	r25, X
    17d2:	11 97       	sbiw	r26, 0x01	; 1
    17d4:	9d 01       	movw	r18, r26
    17d6:	2e 5f       	subi	r18, 0xFE	; 254
    17d8:	3f 4f       	sbci	r19, 0xFF	; 255
    17da:	82 0f       	add	r24, r18
    17dc:	93 1f       	adc	r25, r19
    17de:	20 91 41 03 	lds	r18, 0x0341	; 0x800341 <__brkval>
    17e2:	30 91 42 03 	lds	r19, 0x0342	; 0x800342 <__brkval+0x1>
    17e6:	28 17       	cp	r18, r24
    17e8:	39 07       	cpc	r19, r25
    17ea:	69 f4       	brne	.+26     	; 0x1806 <free+0x10c>
    17ec:	30 97       	sbiw	r30, 0x00	; 0
    17ee:	29 f4       	brne	.+10     	; 0x17fa <free+0x100>
    17f0:	10 92 44 03 	sts	0x0344, r1	; 0x800344 <__flp+0x1>
    17f4:	10 92 43 03 	sts	0x0343, r1	; 0x800343 <__flp>
    17f8:	02 c0       	rjmp	.+4      	; 0x17fe <free+0x104>
    17fa:	13 82       	std	Z+3, r1	; 0x03
    17fc:	12 82       	std	Z+2, r1	; 0x02
    17fe:	b0 93 42 03 	sts	0x0342, r27	; 0x800342 <__brkval+0x1>
    1802:	a0 93 41 03 	sts	0x0341, r26	; 0x800341 <__brkval>
    1806:	df 91       	pop	r29
    1808:	cf 91       	pop	r28
    180a:	08 95       	ret

0000180c <atoi>:
    180c:	fc 01       	movw	r30, r24
    180e:	88 27       	eor	r24, r24
    1810:	99 27       	eor	r25, r25
    1812:	e8 94       	clt
    1814:	21 91       	ld	r18, Z+
    1816:	20 32       	cpi	r18, 0x20	; 32
    1818:	e9 f3       	breq	.-6      	; 0x1814 <atoi+0x8>
    181a:	29 30       	cpi	r18, 0x09	; 9
    181c:	10 f0       	brcs	.+4      	; 0x1822 <atoi+0x16>
    181e:	2e 30       	cpi	r18, 0x0E	; 14
    1820:	c8 f3       	brcs	.-14     	; 0x1814 <atoi+0x8>
    1822:	2b 32       	cpi	r18, 0x2B	; 43
    1824:	41 f0       	breq	.+16     	; 0x1836 <atoi+0x2a>
    1826:	2d 32       	cpi	r18, 0x2D	; 45
    1828:	39 f4       	brne	.+14     	; 0x1838 <atoi+0x2c>
    182a:	68 94       	set
    182c:	04 c0       	rjmp	.+8      	; 0x1836 <atoi+0x2a>
    182e:	0e 94 36 0c 	call	0x186c	; 0x186c <__mulhi_const_10>
    1832:	82 0f       	add	r24, r18
    1834:	91 1d       	adc	r25, r1
    1836:	21 91       	ld	r18, Z+
    1838:	20 53       	subi	r18, 0x30	; 48
    183a:	2a 30       	cpi	r18, 0x0A	; 10
    183c:	c0 f3       	brcs	.-16     	; 0x182e <atoi+0x22>
    183e:	1e f4       	brtc	.+6      	; 0x1846 <atoi+0x3a>
    1840:	90 95       	com	r25
    1842:	81 95       	neg	r24
    1844:	9f 4f       	sbci	r25, 0xFF	; 255
    1846:	08 95       	ret

00001848 <memmove>:
    1848:	68 17       	cp	r22, r24
    184a:	79 07       	cpc	r23, r25
    184c:	68 f4       	brcc	.+26     	; 0x1868 <memmove+0x20>
    184e:	fb 01       	movw	r30, r22
    1850:	dc 01       	movw	r26, r24
    1852:	e4 0f       	add	r30, r20
    1854:	f5 1f       	adc	r31, r21
    1856:	a4 0f       	add	r26, r20
    1858:	b5 1f       	adc	r27, r21
    185a:	02 c0       	rjmp	.+4      	; 0x1860 <memmove+0x18>
    185c:	02 90       	ld	r0, -Z
    185e:	0e 92       	st	-X, r0
    1860:	41 50       	subi	r20, 0x01	; 1
    1862:	50 40       	sbci	r21, 0x00	; 0
    1864:	d8 f7       	brcc	.-10     	; 0x185c <memmove+0x14>
    1866:	08 95       	ret
    1868:	0c 94 56 0e 	jmp	0x1cac	; 0x1cac <memcpy>

0000186c <__mulhi_const_10>:
    186c:	7a e0       	ldi	r23, 0x0A	; 10
    186e:	97 9f       	mul	r25, r23
    1870:	90 2d       	mov	r25, r0
    1872:	87 9f       	mul	r24, r23
    1874:	80 2d       	mov	r24, r0
    1876:	91 0d       	add	r25, r1
    1878:	11 24       	eor	r1, r1
    187a:	08 95       	ret

0000187c <vsnprintf_P>:
    187c:	ae e0       	ldi	r26, 0x0E	; 14
    187e:	b0 e0       	ldi	r27, 0x00	; 0
    1880:	e4 e4       	ldi	r30, 0x44	; 68
    1882:	fc e0       	ldi	r31, 0x0C	; 12
    1884:	0c 94 12 0f 	jmp	0x1e24	; 0x1e24 <__prologue_saves__+0x1c>
    1888:	8c 01       	movw	r16, r24
    188a:	fa 01       	movw	r30, r20
    188c:	8e e0       	ldi	r24, 0x0E	; 14
    188e:	8c 83       	std	Y+4, r24	; 0x04
    1890:	1a 83       	std	Y+2, r17	; 0x02
    1892:	09 83       	std	Y+1, r16	; 0x01
    1894:	77 ff       	sbrs	r23, 7
    1896:	02 c0       	rjmp	.+4      	; 0x189c <vsnprintf_P+0x20>
    1898:	60 e0       	ldi	r22, 0x00	; 0
    189a:	70 e8       	ldi	r23, 0x80	; 128
    189c:	cb 01       	movw	r24, r22
    189e:	01 97       	sbiw	r24, 0x01	; 1
    18a0:	9e 83       	std	Y+6, r25	; 0x06
    18a2:	8d 83       	std	Y+5, r24	; 0x05
    18a4:	a9 01       	movw	r20, r18
    18a6:	bf 01       	movw	r22, r30
    18a8:	ce 01       	movw	r24, r28
    18aa:	01 96       	adiw	r24, 0x01	; 1
    18ac:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <vfprintf>
    18b0:	4d 81       	ldd	r20, Y+5	; 0x05
    18b2:	5e 81       	ldd	r21, Y+6	; 0x06
    18b4:	57 fd       	sbrc	r21, 7
    18b6:	0a c0       	rjmp	.+20     	; 0x18cc <vsnprintf_P+0x50>
    18b8:	2f 81       	ldd	r18, Y+7	; 0x07
    18ba:	38 85       	ldd	r19, Y+8	; 0x08
    18bc:	42 17       	cp	r20, r18
    18be:	53 07       	cpc	r21, r19
    18c0:	0c f4       	brge	.+2      	; 0x18c4 <vsnprintf_P+0x48>
    18c2:	9a 01       	movw	r18, r20
    18c4:	f8 01       	movw	r30, r16
    18c6:	e2 0f       	add	r30, r18
    18c8:	f3 1f       	adc	r31, r19
    18ca:	10 82       	st	Z, r1
    18cc:	2e 96       	adiw	r28, 0x0e	; 14
    18ce:	e4 e0       	ldi	r30, 0x04	; 4
    18d0:	0c 94 2e 0f 	jmp	0x1e5c	; 0x1e5c <__epilogue_restores__+0x1c>

000018d4 <vfprintf>:
    18d4:	ab e0       	ldi	r26, 0x0B	; 11
    18d6:	b0 e0       	ldi	r27, 0x00	; 0
    18d8:	e0 e7       	ldi	r30, 0x70	; 112
    18da:	fc e0       	ldi	r31, 0x0C	; 12
    18dc:	0c 94 04 0f 	jmp	0x1e08	; 0x1e08 <__prologue_saves__>
    18e0:	6c 01       	movw	r12, r24
    18e2:	7b 01       	movw	r14, r22
    18e4:	8a 01       	movw	r16, r20
    18e6:	fc 01       	movw	r30, r24
    18e8:	17 82       	std	Z+7, r1	; 0x07
    18ea:	16 82       	std	Z+6, r1	; 0x06
    18ec:	83 81       	ldd	r24, Z+3	; 0x03
    18ee:	81 ff       	sbrs	r24, 1
    18f0:	cc c1       	rjmp	.+920    	; 0x1c8a <vfprintf+0x3b6>
    18f2:	ce 01       	movw	r24, r28
    18f4:	01 96       	adiw	r24, 0x01	; 1
    18f6:	3c 01       	movw	r6, r24
    18f8:	f6 01       	movw	r30, r12
    18fa:	93 81       	ldd	r25, Z+3	; 0x03
    18fc:	f7 01       	movw	r30, r14
    18fe:	93 fd       	sbrc	r25, 3
    1900:	85 91       	lpm	r24, Z+
    1902:	93 ff       	sbrs	r25, 3
    1904:	81 91       	ld	r24, Z+
    1906:	7f 01       	movw	r14, r30
    1908:	88 23       	and	r24, r24
    190a:	09 f4       	brne	.+2      	; 0x190e <vfprintf+0x3a>
    190c:	ba c1       	rjmp	.+884    	; 0x1c82 <vfprintf+0x3ae>
    190e:	85 32       	cpi	r24, 0x25	; 37
    1910:	39 f4       	brne	.+14     	; 0x1920 <vfprintf+0x4c>
    1912:	93 fd       	sbrc	r25, 3
    1914:	85 91       	lpm	r24, Z+
    1916:	93 ff       	sbrs	r25, 3
    1918:	81 91       	ld	r24, Z+
    191a:	7f 01       	movw	r14, r30
    191c:	85 32       	cpi	r24, 0x25	; 37
    191e:	29 f4       	brne	.+10     	; 0x192a <vfprintf+0x56>
    1920:	b6 01       	movw	r22, r12
    1922:	90 e0       	ldi	r25, 0x00	; 0
    1924:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <fputc>
    1928:	e7 cf       	rjmp	.-50     	; 0x18f8 <vfprintf+0x24>
    192a:	91 2c       	mov	r9, r1
    192c:	21 2c       	mov	r2, r1
    192e:	31 2c       	mov	r3, r1
    1930:	ff e1       	ldi	r31, 0x1F	; 31
    1932:	f3 15       	cp	r31, r3
    1934:	d8 f0       	brcs	.+54     	; 0x196c <vfprintf+0x98>
    1936:	8b 32       	cpi	r24, 0x2B	; 43
    1938:	79 f0       	breq	.+30     	; 0x1958 <vfprintf+0x84>
    193a:	38 f4       	brcc	.+14     	; 0x194a <vfprintf+0x76>
    193c:	80 32       	cpi	r24, 0x20	; 32
    193e:	79 f0       	breq	.+30     	; 0x195e <vfprintf+0x8a>
    1940:	83 32       	cpi	r24, 0x23	; 35
    1942:	a1 f4       	brne	.+40     	; 0x196c <vfprintf+0x98>
    1944:	23 2d       	mov	r18, r3
    1946:	20 61       	ori	r18, 0x10	; 16
    1948:	1d c0       	rjmp	.+58     	; 0x1984 <vfprintf+0xb0>
    194a:	8d 32       	cpi	r24, 0x2D	; 45
    194c:	61 f0       	breq	.+24     	; 0x1966 <vfprintf+0x92>
    194e:	80 33       	cpi	r24, 0x30	; 48
    1950:	69 f4       	brne	.+26     	; 0x196c <vfprintf+0x98>
    1952:	23 2d       	mov	r18, r3
    1954:	21 60       	ori	r18, 0x01	; 1
    1956:	16 c0       	rjmp	.+44     	; 0x1984 <vfprintf+0xb0>
    1958:	83 2d       	mov	r24, r3
    195a:	82 60       	ori	r24, 0x02	; 2
    195c:	38 2e       	mov	r3, r24
    195e:	e3 2d       	mov	r30, r3
    1960:	e4 60       	ori	r30, 0x04	; 4
    1962:	3e 2e       	mov	r3, r30
    1964:	2a c0       	rjmp	.+84     	; 0x19ba <vfprintf+0xe6>
    1966:	f3 2d       	mov	r31, r3
    1968:	f8 60       	ori	r31, 0x08	; 8
    196a:	1d c0       	rjmp	.+58     	; 0x19a6 <vfprintf+0xd2>
    196c:	37 fc       	sbrc	r3, 7
    196e:	2d c0       	rjmp	.+90     	; 0x19ca <vfprintf+0xf6>
    1970:	20 ed       	ldi	r18, 0xD0	; 208
    1972:	28 0f       	add	r18, r24
    1974:	2a 30       	cpi	r18, 0x0A	; 10
    1976:	40 f0       	brcs	.+16     	; 0x1988 <vfprintf+0xb4>
    1978:	8e 32       	cpi	r24, 0x2E	; 46
    197a:	b9 f4       	brne	.+46     	; 0x19aa <vfprintf+0xd6>
    197c:	36 fc       	sbrc	r3, 6
    197e:	81 c1       	rjmp	.+770    	; 0x1c82 <vfprintf+0x3ae>
    1980:	23 2d       	mov	r18, r3
    1982:	20 64       	ori	r18, 0x40	; 64
    1984:	32 2e       	mov	r3, r18
    1986:	19 c0       	rjmp	.+50     	; 0x19ba <vfprintf+0xe6>
    1988:	36 fe       	sbrs	r3, 6
    198a:	06 c0       	rjmp	.+12     	; 0x1998 <vfprintf+0xc4>
    198c:	8a e0       	ldi	r24, 0x0A	; 10
    198e:	98 9e       	mul	r9, r24
    1990:	20 0d       	add	r18, r0
    1992:	11 24       	eor	r1, r1
    1994:	92 2e       	mov	r9, r18
    1996:	11 c0       	rjmp	.+34     	; 0x19ba <vfprintf+0xe6>
    1998:	ea e0       	ldi	r30, 0x0A	; 10
    199a:	2e 9e       	mul	r2, r30
    199c:	20 0d       	add	r18, r0
    199e:	11 24       	eor	r1, r1
    19a0:	22 2e       	mov	r2, r18
    19a2:	f3 2d       	mov	r31, r3
    19a4:	f0 62       	ori	r31, 0x20	; 32
    19a6:	3f 2e       	mov	r3, r31
    19a8:	08 c0       	rjmp	.+16     	; 0x19ba <vfprintf+0xe6>
    19aa:	8c 36       	cpi	r24, 0x6C	; 108
    19ac:	21 f4       	brne	.+8      	; 0x19b6 <vfprintf+0xe2>
    19ae:	83 2d       	mov	r24, r3
    19b0:	80 68       	ori	r24, 0x80	; 128
    19b2:	38 2e       	mov	r3, r24
    19b4:	02 c0       	rjmp	.+4      	; 0x19ba <vfprintf+0xe6>
    19b6:	88 36       	cpi	r24, 0x68	; 104
    19b8:	41 f4       	brne	.+16     	; 0x19ca <vfprintf+0xf6>
    19ba:	f7 01       	movw	r30, r14
    19bc:	93 fd       	sbrc	r25, 3
    19be:	85 91       	lpm	r24, Z+
    19c0:	93 ff       	sbrs	r25, 3
    19c2:	81 91       	ld	r24, Z+
    19c4:	7f 01       	movw	r14, r30
    19c6:	81 11       	cpse	r24, r1
    19c8:	b3 cf       	rjmp	.-154    	; 0x1930 <vfprintf+0x5c>
    19ca:	98 2f       	mov	r25, r24
    19cc:	9f 7d       	andi	r25, 0xDF	; 223
    19ce:	95 54       	subi	r25, 0x45	; 69
    19d0:	93 30       	cpi	r25, 0x03	; 3
    19d2:	28 f4       	brcc	.+10     	; 0x19de <vfprintf+0x10a>
    19d4:	0c 5f       	subi	r16, 0xFC	; 252
    19d6:	1f 4f       	sbci	r17, 0xFF	; 255
    19d8:	9f e3       	ldi	r25, 0x3F	; 63
    19da:	99 83       	std	Y+1, r25	; 0x01
    19dc:	0d c0       	rjmp	.+26     	; 0x19f8 <vfprintf+0x124>
    19de:	83 36       	cpi	r24, 0x63	; 99
    19e0:	31 f0       	breq	.+12     	; 0x19ee <vfprintf+0x11a>
    19e2:	83 37       	cpi	r24, 0x73	; 115
    19e4:	71 f0       	breq	.+28     	; 0x1a02 <vfprintf+0x12e>
    19e6:	83 35       	cpi	r24, 0x53	; 83
    19e8:	09 f0       	breq	.+2      	; 0x19ec <vfprintf+0x118>
    19ea:	59 c0       	rjmp	.+178    	; 0x1a9e <vfprintf+0x1ca>
    19ec:	21 c0       	rjmp	.+66     	; 0x1a30 <vfprintf+0x15c>
    19ee:	f8 01       	movw	r30, r16
    19f0:	80 81       	ld	r24, Z
    19f2:	89 83       	std	Y+1, r24	; 0x01
    19f4:	0e 5f       	subi	r16, 0xFE	; 254
    19f6:	1f 4f       	sbci	r17, 0xFF	; 255
    19f8:	88 24       	eor	r8, r8
    19fa:	83 94       	inc	r8
    19fc:	91 2c       	mov	r9, r1
    19fe:	53 01       	movw	r10, r6
    1a00:	13 c0       	rjmp	.+38     	; 0x1a28 <vfprintf+0x154>
    1a02:	28 01       	movw	r4, r16
    1a04:	f2 e0       	ldi	r31, 0x02	; 2
    1a06:	4f 0e       	add	r4, r31
    1a08:	51 1c       	adc	r5, r1
    1a0a:	f8 01       	movw	r30, r16
    1a0c:	a0 80       	ld	r10, Z
    1a0e:	b1 80       	ldd	r11, Z+1	; 0x01
    1a10:	36 fe       	sbrs	r3, 6
    1a12:	03 c0       	rjmp	.+6      	; 0x1a1a <vfprintf+0x146>
    1a14:	69 2d       	mov	r22, r9
    1a16:	70 e0       	ldi	r23, 0x00	; 0
    1a18:	02 c0       	rjmp	.+4      	; 0x1a1e <vfprintf+0x14a>
    1a1a:	6f ef       	ldi	r22, 0xFF	; 255
    1a1c:	7f ef       	ldi	r23, 0xFF	; 255
    1a1e:	c5 01       	movw	r24, r10
    1a20:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <strnlen>
    1a24:	4c 01       	movw	r8, r24
    1a26:	82 01       	movw	r16, r4
    1a28:	f3 2d       	mov	r31, r3
    1a2a:	ff 77       	andi	r31, 0x7F	; 127
    1a2c:	3f 2e       	mov	r3, r31
    1a2e:	16 c0       	rjmp	.+44     	; 0x1a5c <vfprintf+0x188>
    1a30:	28 01       	movw	r4, r16
    1a32:	22 e0       	ldi	r18, 0x02	; 2
    1a34:	42 0e       	add	r4, r18
    1a36:	51 1c       	adc	r5, r1
    1a38:	f8 01       	movw	r30, r16
    1a3a:	a0 80       	ld	r10, Z
    1a3c:	b1 80       	ldd	r11, Z+1	; 0x01
    1a3e:	36 fe       	sbrs	r3, 6
    1a40:	03 c0       	rjmp	.+6      	; 0x1a48 <vfprintf+0x174>
    1a42:	69 2d       	mov	r22, r9
    1a44:	70 e0       	ldi	r23, 0x00	; 0
    1a46:	02 c0       	rjmp	.+4      	; 0x1a4c <vfprintf+0x178>
    1a48:	6f ef       	ldi	r22, 0xFF	; 255
    1a4a:	7f ef       	ldi	r23, 0xFF	; 255
    1a4c:	c5 01       	movw	r24, r10
    1a4e:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <strnlen_P>
    1a52:	4c 01       	movw	r8, r24
    1a54:	f3 2d       	mov	r31, r3
    1a56:	f0 68       	ori	r31, 0x80	; 128
    1a58:	3f 2e       	mov	r3, r31
    1a5a:	82 01       	movw	r16, r4
    1a5c:	33 fc       	sbrc	r3, 3
    1a5e:	1b c0       	rjmp	.+54     	; 0x1a96 <vfprintf+0x1c2>
    1a60:	82 2d       	mov	r24, r2
    1a62:	90 e0       	ldi	r25, 0x00	; 0
    1a64:	88 16       	cp	r8, r24
    1a66:	99 06       	cpc	r9, r25
    1a68:	b0 f4       	brcc	.+44     	; 0x1a96 <vfprintf+0x1c2>
    1a6a:	b6 01       	movw	r22, r12
    1a6c:	80 e2       	ldi	r24, 0x20	; 32
    1a6e:	90 e0       	ldi	r25, 0x00	; 0
    1a70:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <fputc>
    1a74:	2a 94       	dec	r2
    1a76:	f4 cf       	rjmp	.-24     	; 0x1a60 <vfprintf+0x18c>
    1a78:	f5 01       	movw	r30, r10
    1a7a:	37 fc       	sbrc	r3, 7
    1a7c:	85 91       	lpm	r24, Z+
    1a7e:	37 fe       	sbrs	r3, 7
    1a80:	81 91       	ld	r24, Z+
    1a82:	5f 01       	movw	r10, r30
    1a84:	b6 01       	movw	r22, r12
    1a86:	90 e0       	ldi	r25, 0x00	; 0
    1a88:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <fputc>
    1a8c:	21 10       	cpse	r2, r1
    1a8e:	2a 94       	dec	r2
    1a90:	21 e0       	ldi	r18, 0x01	; 1
    1a92:	82 1a       	sub	r8, r18
    1a94:	91 08       	sbc	r9, r1
    1a96:	81 14       	cp	r8, r1
    1a98:	91 04       	cpc	r9, r1
    1a9a:	71 f7       	brne	.-36     	; 0x1a78 <vfprintf+0x1a4>
    1a9c:	e8 c0       	rjmp	.+464    	; 0x1c6e <vfprintf+0x39a>
    1a9e:	84 36       	cpi	r24, 0x64	; 100
    1aa0:	11 f0       	breq	.+4      	; 0x1aa6 <vfprintf+0x1d2>
    1aa2:	89 36       	cpi	r24, 0x69	; 105
    1aa4:	41 f5       	brne	.+80     	; 0x1af6 <vfprintf+0x222>
    1aa6:	f8 01       	movw	r30, r16
    1aa8:	37 fe       	sbrs	r3, 7
    1aaa:	07 c0       	rjmp	.+14     	; 0x1aba <vfprintf+0x1e6>
    1aac:	60 81       	ld	r22, Z
    1aae:	71 81       	ldd	r23, Z+1	; 0x01
    1ab0:	82 81       	ldd	r24, Z+2	; 0x02
    1ab2:	93 81       	ldd	r25, Z+3	; 0x03
    1ab4:	0c 5f       	subi	r16, 0xFC	; 252
    1ab6:	1f 4f       	sbci	r17, 0xFF	; 255
    1ab8:	08 c0       	rjmp	.+16     	; 0x1aca <vfprintf+0x1f6>
    1aba:	60 81       	ld	r22, Z
    1abc:	71 81       	ldd	r23, Z+1	; 0x01
    1abe:	07 2e       	mov	r0, r23
    1ac0:	00 0c       	add	r0, r0
    1ac2:	88 0b       	sbc	r24, r24
    1ac4:	99 0b       	sbc	r25, r25
    1ac6:	0e 5f       	subi	r16, 0xFE	; 254
    1ac8:	1f 4f       	sbci	r17, 0xFF	; 255
    1aca:	f3 2d       	mov	r31, r3
    1acc:	ff 76       	andi	r31, 0x6F	; 111
    1ace:	3f 2e       	mov	r3, r31
    1ad0:	97 ff       	sbrs	r25, 7
    1ad2:	09 c0       	rjmp	.+18     	; 0x1ae6 <vfprintf+0x212>
    1ad4:	90 95       	com	r25
    1ad6:	80 95       	com	r24
    1ad8:	70 95       	com	r23
    1ada:	61 95       	neg	r22
    1adc:	7f 4f       	sbci	r23, 0xFF	; 255
    1ade:	8f 4f       	sbci	r24, 0xFF	; 255
    1ae0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ae2:	f0 68       	ori	r31, 0x80	; 128
    1ae4:	3f 2e       	mov	r3, r31
    1ae6:	2a e0       	ldi	r18, 0x0A	; 10
    1ae8:	30 e0       	ldi	r19, 0x00	; 0
    1aea:	a3 01       	movw	r20, r6
    1aec:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <__ultoa_invert>
    1af0:	88 2e       	mov	r8, r24
    1af2:	86 18       	sub	r8, r6
    1af4:	45 c0       	rjmp	.+138    	; 0x1b80 <vfprintf+0x2ac>
    1af6:	85 37       	cpi	r24, 0x75	; 117
    1af8:	31 f4       	brne	.+12     	; 0x1b06 <vfprintf+0x232>
    1afa:	23 2d       	mov	r18, r3
    1afc:	2f 7e       	andi	r18, 0xEF	; 239
    1afe:	b2 2e       	mov	r11, r18
    1b00:	2a e0       	ldi	r18, 0x0A	; 10
    1b02:	30 e0       	ldi	r19, 0x00	; 0
    1b04:	25 c0       	rjmp	.+74     	; 0x1b50 <vfprintf+0x27c>
    1b06:	93 2d       	mov	r25, r3
    1b08:	99 7f       	andi	r25, 0xF9	; 249
    1b0a:	b9 2e       	mov	r11, r25
    1b0c:	8f 36       	cpi	r24, 0x6F	; 111
    1b0e:	c1 f0       	breq	.+48     	; 0x1b40 <vfprintf+0x26c>
    1b10:	18 f4       	brcc	.+6      	; 0x1b18 <vfprintf+0x244>
    1b12:	88 35       	cpi	r24, 0x58	; 88
    1b14:	79 f0       	breq	.+30     	; 0x1b34 <vfprintf+0x260>
    1b16:	b5 c0       	rjmp	.+362    	; 0x1c82 <vfprintf+0x3ae>
    1b18:	80 37       	cpi	r24, 0x70	; 112
    1b1a:	19 f0       	breq	.+6      	; 0x1b22 <vfprintf+0x24e>
    1b1c:	88 37       	cpi	r24, 0x78	; 120
    1b1e:	21 f0       	breq	.+8      	; 0x1b28 <vfprintf+0x254>
    1b20:	b0 c0       	rjmp	.+352    	; 0x1c82 <vfprintf+0x3ae>
    1b22:	e9 2f       	mov	r30, r25
    1b24:	e0 61       	ori	r30, 0x10	; 16
    1b26:	be 2e       	mov	r11, r30
    1b28:	b4 fe       	sbrs	r11, 4
    1b2a:	0d c0       	rjmp	.+26     	; 0x1b46 <vfprintf+0x272>
    1b2c:	fb 2d       	mov	r31, r11
    1b2e:	f4 60       	ori	r31, 0x04	; 4
    1b30:	bf 2e       	mov	r11, r31
    1b32:	09 c0       	rjmp	.+18     	; 0x1b46 <vfprintf+0x272>
    1b34:	34 fe       	sbrs	r3, 4
    1b36:	0a c0       	rjmp	.+20     	; 0x1b4c <vfprintf+0x278>
    1b38:	29 2f       	mov	r18, r25
    1b3a:	26 60       	ori	r18, 0x06	; 6
    1b3c:	b2 2e       	mov	r11, r18
    1b3e:	06 c0       	rjmp	.+12     	; 0x1b4c <vfprintf+0x278>
    1b40:	28 e0       	ldi	r18, 0x08	; 8
    1b42:	30 e0       	ldi	r19, 0x00	; 0
    1b44:	05 c0       	rjmp	.+10     	; 0x1b50 <vfprintf+0x27c>
    1b46:	20 e1       	ldi	r18, 0x10	; 16
    1b48:	30 e0       	ldi	r19, 0x00	; 0
    1b4a:	02 c0       	rjmp	.+4      	; 0x1b50 <vfprintf+0x27c>
    1b4c:	20 e1       	ldi	r18, 0x10	; 16
    1b4e:	32 e0       	ldi	r19, 0x02	; 2
    1b50:	f8 01       	movw	r30, r16
    1b52:	b7 fe       	sbrs	r11, 7
    1b54:	07 c0       	rjmp	.+14     	; 0x1b64 <vfprintf+0x290>
    1b56:	60 81       	ld	r22, Z
    1b58:	71 81       	ldd	r23, Z+1	; 0x01
    1b5a:	82 81       	ldd	r24, Z+2	; 0x02
    1b5c:	93 81       	ldd	r25, Z+3	; 0x03
    1b5e:	0c 5f       	subi	r16, 0xFC	; 252
    1b60:	1f 4f       	sbci	r17, 0xFF	; 255
    1b62:	06 c0       	rjmp	.+12     	; 0x1b70 <vfprintf+0x29c>
    1b64:	60 81       	ld	r22, Z
    1b66:	71 81       	ldd	r23, Z+1	; 0x01
    1b68:	80 e0       	ldi	r24, 0x00	; 0
    1b6a:	90 e0       	ldi	r25, 0x00	; 0
    1b6c:	0e 5f       	subi	r16, 0xFE	; 254
    1b6e:	1f 4f       	sbci	r17, 0xFF	; 255
    1b70:	a3 01       	movw	r20, r6
    1b72:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <__ultoa_invert>
    1b76:	88 2e       	mov	r8, r24
    1b78:	86 18       	sub	r8, r6
    1b7a:	fb 2d       	mov	r31, r11
    1b7c:	ff 77       	andi	r31, 0x7F	; 127
    1b7e:	3f 2e       	mov	r3, r31
    1b80:	36 fe       	sbrs	r3, 6
    1b82:	0d c0       	rjmp	.+26     	; 0x1b9e <vfprintf+0x2ca>
    1b84:	23 2d       	mov	r18, r3
    1b86:	2e 7f       	andi	r18, 0xFE	; 254
    1b88:	a2 2e       	mov	r10, r18
    1b8a:	89 14       	cp	r8, r9
    1b8c:	58 f4       	brcc	.+22     	; 0x1ba4 <vfprintf+0x2d0>
    1b8e:	34 fe       	sbrs	r3, 4
    1b90:	0b c0       	rjmp	.+22     	; 0x1ba8 <vfprintf+0x2d4>
    1b92:	32 fc       	sbrc	r3, 2
    1b94:	09 c0       	rjmp	.+18     	; 0x1ba8 <vfprintf+0x2d4>
    1b96:	83 2d       	mov	r24, r3
    1b98:	8e 7e       	andi	r24, 0xEE	; 238
    1b9a:	a8 2e       	mov	r10, r24
    1b9c:	05 c0       	rjmp	.+10     	; 0x1ba8 <vfprintf+0x2d4>
    1b9e:	b8 2c       	mov	r11, r8
    1ba0:	a3 2c       	mov	r10, r3
    1ba2:	03 c0       	rjmp	.+6      	; 0x1baa <vfprintf+0x2d6>
    1ba4:	b8 2c       	mov	r11, r8
    1ba6:	01 c0       	rjmp	.+2      	; 0x1baa <vfprintf+0x2d6>
    1ba8:	b9 2c       	mov	r11, r9
    1baa:	a4 fe       	sbrs	r10, 4
    1bac:	0f c0       	rjmp	.+30     	; 0x1bcc <vfprintf+0x2f8>
    1bae:	fe 01       	movw	r30, r28
    1bb0:	e8 0d       	add	r30, r8
    1bb2:	f1 1d       	adc	r31, r1
    1bb4:	80 81       	ld	r24, Z
    1bb6:	80 33       	cpi	r24, 0x30	; 48
    1bb8:	21 f4       	brne	.+8      	; 0x1bc2 <vfprintf+0x2ee>
    1bba:	9a 2d       	mov	r25, r10
    1bbc:	99 7e       	andi	r25, 0xE9	; 233
    1bbe:	a9 2e       	mov	r10, r25
    1bc0:	09 c0       	rjmp	.+18     	; 0x1bd4 <vfprintf+0x300>
    1bc2:	a2 fe       	sbrs	r10, 2
    1bc4:	06 c0       	rjmp	.+12     	; 0x1bd2 <vfprintf+0x2fe>
    1bc6:	b3 94       	inc	r11
    1bc8:	b3 94       	inc	r11
    1bca:	04 c0       	rjmp	.+8      	; 0x1bd4 <vfprintf+0x300>
    1bcc:	8a 2d       	mov	r24, r10
    1bce:	86 78       	andi	r24, 0x86	; 134
    1bd0:	09 f0       	breq	.+2      	; 0x1bd4 <vfprintf+0x300>
    1bd2:	b3 94       	inc	r11
    1bd4:	a3 fc       	sbrc	r10, 3
    1bd6:	11 c0       	rjmp	.+34     	; 0x1bfa <vfprintf+0x326>
    1bd8:	a0 fe       	sbrs	r10, 0
    1bda:	06 c0       	rjmp	.+12     	; 0x1be8 <vfprintf+0x314>
    1bdc:	b2 14       	cp	r11, r2
    1bde:	88 f4       	brcc	.+34     	; 0x1c02 <vfprintf+0x32e>
    1be0:	28 0c       	add	r2, r8
    1be2:	92 2c       	mov	r9, r2
    1be4:	9b 18       	sub	r9, r11
    1be6:	0e c0       	rjmp	.+28     	; 0x1c04 <vfprintf+0x330>
    1be8:	b2 14       	cp	r11, r2
    1bea:	60 f4       	brcc	.+24     	; 0x1c04 <vfprintf+0x330>
    1bec:	b6 01       	movw	r22, r12
    1bee:	80 e2       	ldi	r24, 0x20	; 32
    1bf0:	90 e0       	ldi	r25, 0x00	; 0
    1bf2:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <fputc>
    1bf6:	b3 94       	inc	r11
    1bf8:	f7 cf       	rjmp	.-18     	; 0x1be8 <vfprintf+0x314>
    1bfa:	b2 14       	cp	r11, r2
    1bfc:	18 f4       	brcc	.+6      	; 0x1c04 <vfprintf+0x330>
    1bfe:	2b 18       	sub	r2, r11
    1c00:	02 c0       	rjmp	.+4      	; 0x1c06 <vfprintf+0x332>
    1c02:	98 2c       	mov	r9, r8
    1c04:	21 2c       	mov	r2, r1
    1c06:	a4 fe       	sbrs	r10, 4
    1c08:	10 c0       	rjmp	.+32     	; 0x1c2a <vfprintf+0x356>
    1c0a:	b6 01       	movw	r22, r12
    1c0c:	80 e3       	ldi	r24, 0x30	; 48
    1c0e:	90 e0       	ldi	r25, 0x00	; 0
    1c10:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <fputc>
    1c14:	a2 fe       	sbrs	r10, 2
    1c16:	17 c0       	rjmp	.+46     	; 0x1c46 <vfprintf+0x372>
    1c18:	a1 fc       	sbrc	r10, 1
    1c1a:	03 c0       	rjmp	.+6      	; 0x1c22 <vfprintf+0x34e>
    1c1c:	88 e7       	ldi	r24, 0x78	; 120
    1c1e:	90 e0       	ldi	r25, 0x00	; 0
    1c20:	02 c0       	rjmp	.+4      	; 0x1c26 <vfprintf+0x352>
    1c22:	88 e5       	ldi	r24, 0x58	; 88
    1c24:	90 e0       	ldi	r25, 0x00	; 0
    1c26:	b6 01       	movw	r22, r12
    1c28:	0c c0       	rjmp	.+24     	; 0x1c42 <vfprintf+0x36e>
    1c2a:	8a 2d       	mov	r24, r10
    1c2c:	86 78       	andi	r24, 0x86	; 134
    1c2e:	59 f0       	breq	.+22     	; 0x1c46 <vfprintf+0x372>
    1c30:	a1 fe       	sbrs	r10, 1
    1c32:	02 c0       	rjmp	.+4      	; 0x1c38 <vfprintf+0x364>
    1c34:	8b e2       	ldi	r24, 0x2B	; 43
    1c36:	01 c0       	rjmp	.+2      	; 0x1c3a <vfprintf+0x366>
    1c38:	80 e2       	ldi	r24, 0x20	; 32
    1c3a:	a7 fc       	sbrc	r10, 7
    1c3c:	8d e2       	ldi	r24, 0x2D	; 45
    1c3e:	b6 01       	movw	r22, r12
    1c40:	90 e0       	ldi	r25, 0x00	; 0
    1c42:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <fputc>
    1c46:	89 14       	cp	r8, r9
    1c48:	38 f4       	brcc	.+14     	; 0x1c58 <vfprintf+0x384>
    1c4a:	b6 01       	movw	r22, r12
    1c4c:	80 e3       	ldi	r24, 0x30	; 48
    1c4e:	90 e0       	ldi	r25, 0x00	; 0
    1c50:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <fputc>
    1c54:	9a 94       	dec	r9
    1c56:	f7 cf       	rjmp	.-18     	; 0x1c46 <vfprintf+0x372>
    1c58:	8a 94       	dec	r8
    1c5a:	f3 01       	movw	r30, r6
    1c5c:	e8 0d       	add	r30, r8
    1c5e:	f1 1d       	adc	r31, r1
    1c60:	80 81       	ld	r24, Z
    1c62:	b6 01       	movw	r22, r12
    1c64:	90 e0       	ldi	r25, 0x00	; 0
    1c66:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <fputc>
    1c6a:	81 10       	cpse	r8, r1
    1c6c:	f5 cf       	rjmp	.-22     	; 0x1c58 <vfprintf+0x384>
    1c6e:	22 20       	and	r2, r2
    1c70:	09 f4       	brne	.+2      	; 0x1c74 <vfprintf+0x3a0>
    1c72:	42 ce       	rjmp	.-892    	; 0x18f8 <vfprintf+0x24>
    1c74:	b6 01       	movw	r22, r12
    1c76:	80 e2       	ldi	r24, 0x20	; 32
    1c78:	90 e0       	ldi	r25, 0x00	; 0
    1c7a:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <fputc>
    1c7e:	2a 94       	dec	r2
    1c80:	f6 cf       	rjmp	.-20     	; 0x1c6e <vfprintf+0x39a>
    1c82:	f6 01       	movw	r30, r12
    1c84:	86 81       	ldd	r24, Z+6	; 0x06
    1c86:	97 81       	ldd	r25, Z+7	; 0x07
    1c88:	02 c0       	rjmp	.+4      	; 0x1c8e <vfprintf+0x3ba>
    1c8a:	8f ef       	ldi	r24, 0xFF	; 255
    1c8c:	9f ef       	ldi	r25, 0xFF	; 255
    1c8e:	2b 96       	adiw	r28, 0x0b	; 11
    1c90:	e2 e1       	ldi	r30, 0x12	; 18
    1c92:	0c 94 20 0f 	jmp	0x1e40	; 0x1e40 <__epilogue_restores__>

00001c96 <strnlen_P>:
    1c96:	fc 01       	movw	r30, r24
    1c98:	05 90       	lpm	r0, Z+
    1c9a:	61 50       	subi	r22, 0x01	; 1
    1c9c:	70 40       	sbci	r23, 0x00	; 0
    1c9e:	01 10       	cpse	r0, r1
    1ca0:	d8 f7       	brcc	.-10     	; 0x1c98 <strnlen_P+0x2>
    1ca2:	80 95       	com	r24
    1ca4:	90 95       	com	r25
    1ca6:	8e 0f       	add	r24, r30
    1ca8:	9f 1f       	adc	r25, r31
    1caa:	08 95       	ret

00001cac <memcpy>:
    1cac:	fb 01       	movw	r30, r22
    1cae:	dc 01       	movw	r26, r24
    1cb0:	02 c0       	rjmp	.+4      	; 0x1cb6 <memcpy+0xa>
    1cb2:	01 90       	ld	r0, Z+
    1cb4:	0d 92       	st	X+, r0
    1cb6:	41 50       	subi	r20, 0x01	; 1
    1cb8:	50 40       	sbci	r21, 0x00	; 0
    1cba:	d8 f7       	brcc	.-10     	; 0x1cb2 <memcpy+0x6>
    1cbc:	08 95       	ret

00001cbe <strnlen>:
    1cbe:	fc 01       	movw	r30, r24
    1cc0:	61 50       	subi	r22, 0x01	; 1
    1cc2:	70 40       	sbci	r23, 0x00	; 0
    1cc4:	01 90       	ld	r0, Z+
    1cc6:	01 10       	cpse	r0, r1
    1cc8:	d8 f7       	brcc	.-10     	; 0x1cc0 <strnlen+0x2>
    1cca:	80 95       	com	r24
    1ccc:	90 95       	com	r25
    1cce:	8e 0f       	add	r24, r30
    1cd0:	9f 1f       	adc	r25, r31
    1cd2:	08 95       	ret

00001cd4 <fputc>:
    1cd4:	0f 93       	push	r16
    1cd6:	1f 93       	push	r17
    1cd8:	cf 93       	push	r28
    1cda:	df 93       	push	r29
    1cdc:	fb 01       	movw	r30, r22
    1cde:	23 81       	ldd	r18, Z+3	; 0x03
    1ce0:	21 fd       	sbrc	r18, 1
    1ce2:	03 c0       	rjmp	.+6      	; 0x1cea <fputc+0x16>
    1ce4:	8f ef       	ldi	r24, 0xFF	; 255
    1ce6:	9f ef       	ldi	r25, 0xFF	; 255
    1ce8:	2c c0       	rjmp	.+88     	; 0x1d42 <fputc+0x6e>
    1cea:	22 ff       	sbrs	r18, 2
    1cec:	16 c0       	rjmp	.+44     	; 0x1d1a <fputc+0x46>
    1cee:	46 81       	ldd	r20, Z+6	; 0x06
    1cf0:	57 81       	ldd	r21, Z+7	; 0x07
    1cf2:	24 81       	ldd	r18, Z+4	; 0x04
    1cf4:	35 81       	ldd	r19, Z+5	; 0x05
    1cf6:	42 17       	cp	r20, r18
    1cf8:	53 07       	cpc	r21, r19
    1cfa:	44 f4       	brge	.+16     	; 0x1d0c <fputc+0x38>
    1cfc:	a0 81       	ld	r26, Z
    1cfe:	b1 81       	ldd	r27, Z+1	; 0x01
    1d00:	9d 01       	movw	r18, r26
    1d02:	2f 5f       	subi	r18, 0xFF	; 255
    1d04:	3f 4f       	sbci	r19, 0xFF	; 255
    1d06:	31 83       	std	Z+1, r19	; 0x01
    1d08:	20 83       	st	Z, r18
    1d0a:	8c 93       	st	X, r24
    1d0c:	26 81       	ldd	r18, Z+6	; 0x06
    1d0e:	37 81       	ldd	r19, Z+7	; 0x07
    1d10:	2f 5f       	subi	r18, 0xFF	; 255
    1d12:	3f 4f       	sbci	r19, 0xFF	; 255
    1d14:	37 83       	std	Z+7, r19	; 0x07
    1d16:	26 83       	std	Z+6, r18	; 0x06
    1d18:	14 c0       	rjmp	.+40     	; 0x1d42 <fputc+0x6e>
    1d1a:	8b 01       	movw	r16, r22
    1d1c:	ec 01       	movw	r28, r24
    1d1e:	fb 01       	movw	r30, r22
    1d20:	00 84       	ldd	r0, Z+8	; 0x08
    1d22:	f1 85       	ldd	r31, Z+9	; 0x09
    1d24:	e0 2d       	mov	r30, r0
    1d26:	09 95       	icall
    1d28:	89 2b       	or	r24, r25
    1d2a:	e1 f6       	brne	.-72     	; 0x1ce4 <fputc+0x10>
    1d2c:	d8 01       	movw	r26, r16
    1d2e:	16 96       	adiw	r26, 0x06	; 6
    1d30:	8d 91       	ld	r24, X+
    1d32:	9c 91       	ld	r25, X
    1d34:	17 97       	sbiw	r26, 0x07	; 7
    1d36:	01 96       	adiw	r24, 0x01	; 1
    1d38:	17 96       	adiw	r26, 0x07	; 7
    1d3a:	9c 93       	st	X, r25
    1d3c:	8e 93       	st	-X, r24
    1d3e:	16 97       	sbiw	r26, 0x06	; 6
    1d40:	ce 01       	movw	r24, r28
    1d42:	df 91       	pop	r29
    1d44:	cf 91       	pop	r28
    1d46:	1f 91       	pop	r17
    1d48:	0f 91       	pop	r16
    1d4a:	08 95       	ret

00001d4c <__ultoa_invert>:
    1d4c:	fa 01       	movw	r30, r20
    1d4e:	aa 27       	eor	r26, r26
    1d50:	28 30       	cpi	r18, 0x08	; 8
    1d52:	51 f1       	breq	.+84     	; 0x1da8 <__ultoa_invert+0x5c>
    1d54:	20 31       	cpi	r18, 0x10	; 16
    1d56:	81 f1       	breq	.+96     	; 0x1db8 <__ultoa_invert+0x6c>
    1d58:	e8 94       	clt
    1d5a:	6f 93       	push	r22
    1d5c:	6e 7f       	andi	r22, 0xFE	; 254
    1d5e:	6e 5f       	subi	r22, 0xFE	; 254
    1d60:	7f 4f       	sbci	r23, 0xFF	; 255
    1d62:	8f 4f       	sbci	r24, 0xFF	; 255
    1d64:	9f 4f       	sbci	r25, 0xFF	; 255
    1d66:	af 4f       	sbci	r26, 0xFF	; 255
    1d68:	b1 e0       	ldi	r27, 0x01	; 1
    1d6a:	3e d0       	rcall	.+124    	; 0x1de8 <__ultoa_invert+0x9c>
    1d6c:	b4 e0       	ldi	r27, 0x04	; 4
    1d6e:	3c d0       	rcall	.+120    	; 0x1de8 <__ultoa_invert+0x9c>
    1d70:	67 0f       	add	r22, r23
    1d72:	78 1f       	adc	r23, r24
    1d74:	89 1f       	adc	r24, r25
    1d76:	9a 1f       	adc	r25, r26
    1d78:	a1 1d       	adc	r26, r1
    1d7a:	68 0f       	add	r22, r24
    1d7c:	79 1f       	adc	r23, r25
    1d7e:	8a 1f       	adc	r24, r26
    1d80:	91 1d       	adc	r25, r1
    1d82:	a1 1d       	adc	r26, r1
    1d84:	6a 0f       	add	r22, r26
    1d86:	71 1d       	adc	r23, r1
    1d88:	81 1d       	adc	r24, r1
    1d8a:	91 1d       	adc	r25, r1
    1d8c:	a1 1d       	adc	r26, r1
    1d8e:	20 d0       	rcall	.+64     	; 0x1dd0 <__ultoa_invert+0x84>
    1d90:	09 f4       	brne	.+2      	; 0x1d94 <__ultoa_invert+0x48>
    1d92:	68 94       	set
    1d94:	3f 91       	pop	r19
    1d96:	2a e0       	ldi	r18, 0x0A	; 10
    1d98:	26 9f       	mul	r18, r22
    1d9a:	11 24       	eor	r1, r1
    1d9c:	30 19       	sub	r19, r0
    1d9e:	30 5d       	subi	r19, 0xD0	; 208
    1da0:	31 93       	st	Z+, r19
    1da2:	de f6       	brtc	.-74     	; 0x1d5a <__ultoa_invert+0xe>
    1da4:	cf 01       	movw	r24, r30
    1da6:	08 95       	ret
    1da8:	46 2f       	mov	r20, r22
    1daa:	47 70       	andi	r20, 0x07	; 7
    1dac:	40 5d       	subi	r20, 0xD0	; 208
    1dae:	41 93       	st	Z+, r20
    1db0:	b3 e0       	ldi	r27, 0x03	; 3
    1db2:	0f d0       	rcall	.+30     	; 0x1dd2 <__ultoa_invert+0x86>
    1db4:	c9 f7       	brne	.-14     	; 0x1da8 <__ultoa_invert+0x5c>
    1db6:	f6 cf       	rjmp	.-20     	; 0x1da4 <__ultoa_invert+0x58>
    1db8:	46 2f       	mov	r20, r22
    1dba:	4f 70       	andi	r20, 0x0F	; 15
    1dbc:	40 5d       	subi	r20, 0xD0	; 208
    1dbe:	4a 33       	cpi	r20, 0x3A	; 58
    1dc0:	18 f0       	brcs	.+6      	; 0x1dc8 <__ultoa_invert+0x7c>
    1dc2:	49 5d       	subi	r20, 0xD9	; 217
    1dc4:	31 fd       	sbrc	r19, 1
    1dc6:	40 52       	subi	r20, 0x20	; 32
    1dc8:	41 93       	st	Z+, r20
    1dca:	02 d0       	rcall	.+4      	; 0x1dd0 <__ultoa_invert+0x84>
    1dcc:	a9 f7       	brne	.-22     	; 0x1db8 <__ultoa_invert+0x6c>
    1dce:	ea cf       	rjmp	.-44     	; 0x1da4 <__ultoa_invert+0x58>
    1dd0:	b4 e0       	ldi	r27, 0x04	; 4
    1dd2:	a6 95       	lsr	r26
    1dd4:	97 95       	ror	r25
    1dd6:	87 95       	ror	r24
    1dd8:	77 95       	ror	r23
    1dda:	67 95       	ror	r22
    1ddc:	ba 95       	dec	r27
    1dde:	c9 f7       	brne	.-14     	; 0x1dd2 <__ultoa_invert+0x86>
    1de0:	00 97       	sbiw	r24, 0x00	; 0
    1de2:	61 05       	cpc	r22, r1
    1de4:	71 05       	cpc	r23, r1
    1de6:	08 95       	ret
    1de8:	9b 01       	movw	r18, r22
    1dea:	ac 01       	movw	r20, r24
    1dec:	0a 2e       	mov	r0, r26
    1dee:	06 94       	lsr	r0
    1df0:	57 95       	ror	r21
    1df2:	47 95       	ror	r20
    1df4:	37 95       	ror	r19
    1df6:	27 95       	ror	r18
    1df8:	ba 95       	dec	r27
    1dfa:	c9 f7       	brne	.-14     	; 0x1dee <__ultoa_invert+0xa2>
    1dfc:	62 0f       	add	r22, r18
    1dfe:	73 1f       	adc	r23, r19
    1e00:	84 1f       	adc	r24, r20
    1e02:	95 1f       	adc	r25, r21
    1e04:	a0 1d       	adc	r26, r0
    1e06:	08 95       	ret

00001e08 <__prologue_saves__>:
    1e08:	2f 92       	push	r2
    1e0a:	3f 92       	push	r3
    1e0c:	4f 92       	push	r4
    1e0e:	5f 92       	push	r5
    1e10:	6f 92       	push	r6
    1e12:	7f 92       	push	r7
    1e14:	8f 92       	push	r8
    1e16:	9f 92       	push	r9
    1e18:	af 92       	push	r10
    1e1a:	bf 92       	push	r11
    1e1c:	cf 92       	push	r12
    1e1e:	df 92       	push	r13
    1e20:	ef 92       	push	r14
    1e22:	ff 92       	push	r15
    1e24:	0f 93       	push	r16
    1e26:	1f 93       	push	r17
    1e28:	cf 93       	push	r28
    1e2a:	df 93       	push	r29
    1e2c:	cd b7       	in	r28, 0x3d	; 61
    1e2e:	de b7       	in	r29, 0x3e	; 62
    1e30:	ca 1b       	sub	r28, r26
    1e32:	db 0b       	sbc	r29, r27
    1e34:	0f b6       	in	r0, 0x3f	; 63
    1e36:	f8 94       	cli
    1e38:	de bf       	out	0x3e, r29	; 62
    1e3a:	0f be       	out	0x3f, r0	; 63
    1e3c:	cd bf       	out	0x3d, r28	; 61
    1e3e:	09 94       	ijmp

00001e40 <__epilogue_restores__>:
    1e40:	2a 88       	ldd	r2, Y+18	; 0x12
    1e42:	39 88       	ldd	r3, Y+17	; 0x11
    1e44:	48 88       	ldd	r4, Y+16	; 0x10
    1e46:	5f 84       	ldd	r5, Y+15	; 0x0f
    1e48:	6e 84       	ldd	r6, Y+14	; 0x0e
    1e4a:	7d 84       	ldd	r7, Y+13	; 0x0d
    1e4c:	8c 84       	ldd	r8, Y+12	; 0x0c
    1e4e:	9b 84       	ldd	r9, Y+11	; 0x0b
    1e50:	aa 84       	ldd	r10, Y+10	; 0x0a
    1e52:	b9 84       	ldd	r11, Y+9	; 0x09
    1e54:	c8 84       	ldd	r12, Y+8	; 0x08
    1e56:	df 80       	ldd	r13, Y+7	; 0x07
    1e58:	ee 80       	ldd	r14, Y+6	; 0x06
    1e5a:	fd 80       	ldd	r15, Y+5	; 0x05
    1e5c:	0c 81       	ldd	r16, Y+4	; 0x04
    1e5e:	1b 81       	ldd	r17, Y+3	; 0x03
    1e60:	aa 81       	ldd	r26, Y+2	; 0x02
    1e62:	b9 81       	ldd	r27, Y+1	; 0x01
    1e64:	ce 0f       	add	r28, r30
    1e66:	d1 1d       	adc	r29, r1
    1e68:	0f b6       	in	r0, 0x3f	; 63
    1e6a:	f8 94       	cli
    1e6c:	de bf       	out	0x3e, r29	; 62
    1e6e:	0f be       	out	0x3f, r0	; 63
    1e70:	cd bf       	out	0x3d, r28	; 61
    1e72:	ed 01       	movw	r28, r26
    1e74:	08 95       	ret

00001e76 <_exit>:
    1e76:	f8 94       	cli

00001e78 <__stop_program>:
    1e78:	ff cf       	rjmp	.-2      	; 0x1e78 <__stop_program>
